<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>韵律操bgm投票</title>
      <link href="/2023/10/01/vote/"/>
      <url>/2023/10/01/vote/</url>
      
        <content type="html"><![CDATA[<p>这是对韵律操bgm最后一次投票。</p><p>以下是投票数最高的三首bgm，希望各位再仔细听过后慎重选择。</p>    <div id="aplayer-wZqFGjWK" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="8771324351" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><iframe src='https://www.wjx.cn/vm/OWn1cJw.aspx?width=750&source=iframe&s=t' width='789' height='750' frameborder='0' style='overflow:auto'></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/19/%E5%86%9B%E8%AE%AD/"/>
      <url>/2023/07/19/%E5%86%9B%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h2><p>由于我实在记不太清时间顺序了，所以就按照事件来写吧。</p><h2 id="1-军训前"><a href="#1-军训前" class="headerlink" title="1. 军训前"></a>1. 军训前</h2><p>由于去年限电+高温+疫情的超级buff加成，于是我们就没有军训。本来的计划是上半学期11月左右军训（那个时候csp集训正好可以逃），天气也比较凉爽，但是因为课时太紧张，又挪到了下半学期，定在期末考试之后。</p><p>然后因为学校操场要装修，所以把我们带到了一个带专里军训。但是听说要军训9天，想想就哈人。</p><p>看到安排表之后感觉还好，去头去尾还有7天（但是某些学校一共都没有7天）。果然石室不做个人。</p><p>马上期末那几周就向保哥打听消息。大概听着感觉条件也不是想象中的那么艰苦，竟然有一丝期待。</p><p>7.6 刚考完期末。生物结束还回班上听zd讲了军训的注意事项。听说第二天早上7点钟就要在学校门口集合，晕死。</p><p>7.7 早上7点操场集合。亲爱的hff主任硬是讲了40分钟的话，拖到将近8点才出发。</p><p><img src="http://qungz.photo.store.qq.com/qun-qungz/V54DXOid0Tu8qb4bUTpG3mCjVt3iu0w0/V5bCQA4NTU4OTI3ODTe6adker73AA!!/800?w5=1080&amp;h5=1440&amp;rf=viewer_421" alt=""></p><p>（罚站ing）</p><p>结果好不容易出发了，发现车上根本装不下几件行李。只有被迫把行李塞到过道。</p><p>现场：</p><p><img src="http://qungz.photo.store.qq.com/qun-qungz/V54DXOid0Tu8qb4bUTpG3mCjVt3iu0w0/V5bCQA4NTU4OTI3ODTT6adktJwZAQ!!/800?w5=1440&amp;h5=1080&amp;rf=viewer_421" alt=""></p><p>可怜的我坐在倒数第二排靠窗的位置。拍照根本就没被通知到，于是完全看不见我。</p><p>车上后面玩得还是可以。lhx他们在zjh。结果la从-14赢到+16，lhx也输了十多二十点。可怜。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023成都中考数学解析（部分）</title>
      <link href="/2023/06/17/2023zhongkaomath/"/>
      <url>/2023/06/17/2023zhongkaomath/</url>
      
        <content type="html"><![CDATA[<p>22.如图,在 $Rt \Delta ABC$ 中,$∠ABC=90°$ , $CD$ 平分 $∠ACB$ 交 $AB$ 于点 $D$ ,过$D$ 作 $DE//BC$ 交 $AC$ 于点 $E$  ,      将 $\Delta DEC$ 沿 $DE$ 折叠得到 $\Delta DEF$ , $DF$ 交 $AC$ 于点 $G$ ,若 $\frac{AG}{GE}=\frac{7}{3}$  ,求 $tanA$.</p><p><strong>解析</strong>：利用相似找到边的比例关系。说白了就是一道解三角形的问题，比较简单。思路可能稍微有点思维含量，但计算难度是一点没有。</p><p><img src="https://s1.ax1x.com/2023/06/17/pClFEuR.png" style="zoom:67%;" /></p><p><strong>解法</strong>：连接 $FP$ , 延长 $DE$ 交 $FC$ 与点 $P$.</p><p>设 $AG=7,GE=3,CE=a$.</p><p>易证: $\Delta AGD \sim \Delta CGF$</p><p>$\therefore \frac{AD}{FC}=\frac{AG}{GE}=\frac{7}{3+a}$ .</p><p>易证: $\Delta DFP \cong \Delta DCP$ 且 $DBPC$ 为矩形</p><p>$\therefore DB // FC$ 且 $DB = \frac12 FC$</p><p>故 $\frac{AD}{DB}=\frac{14}{3+a}$</p><p>由平行线分线段成比例定理得: $\frac{AD}{DB}=\frac{AE}{EC}=\frac{10}{a}=\frac{14}{3+a}$</p><p>解得 $a=\frac{15}{2}$</p><p>$\because DE//BC$ 且 $\angle ECD = \angle DCB$ </p><p>$\therefore DE=EC=a=\frac{15}2$</p><p>在 $\Delta ADE$ 中，由勾股定理：</p><p>$AD=\sqrt{AE^2-DE^2}=\sqrt{10^2-(\frac{15}2)^2}=\frac52 \sqrt7$</p><p>$\therefore \tan A= \frac{DE}{AD}=\frac{3\sqrt7}7$</p><hr><p>23.定义:如果一个正整数能表示为两个正整数 $m,n$ 的平方差,且 $m-n&gt; 1$ ,则称这个正整数为“智慧优数”.例如, $16=5^2-3^2$  ,$16$ 就是一一个智慧优数,可以利用 $m^2-n^2 =(m+n) (m-n)$ 进行研究.若将智慧优数从小到大排列，求第3个和第23个智慧优数.</p><p><strong>解析:</strong> 没想到今年的B填压轴居然是一道数论题。貌似今年没有考动点的最值问题，这与去年的那道23题还是有很大的差距的。这道题的思维含量还是可以的，考场上遇到这种题反正我是不会有什么思路的。其实这道题的思路都是枚举，只不过是不同的枚举方式罢了。第一问是很好枚举的，但第二问需要找一些规律。总之，这里提供一种可行的解法。</p><p><strong>解法</strong>：$Solution1:$ 筛法.</p><p>我们先设 $m^2-n^2=x$ .</p><p>我们可以枚举 $m$ 和 $n$ 的差值，即 $i=m-n,i \geq 2$ .</p><p>变形可得 $m=i+n$ ，将 $m$ 代入，$x=2in+i^2$</p><p>我们可以设 $f_i(n)=2in+i^2$ ,那么问题就转化为求 $f_i(n)$ 的值从小到大的排序.</p><p>先举个例子，当 $i=2$ 时 ，$f_2(n)=8,12,16,20,24\dots$</p><p>当 $i=3$ 时 ，$f_3(n)=15,24,33,42,51\dots$</p><p>当 $i=4$ 时，$f_4(n)=24,40,56,72,88,104\dots$</p><p>我们会发现，这不就是一个筛法吗？</p><p>筛法的概念和简介可以看<a href="https://ohepse.github.io/2023/04/02/simple_number_theory/">这篇文章</a> 。</p><p>所以我们可以只用枚举 $i=2,3,5$ 的情况。当我们枚举到 $i=7$ 时会发现 $f_7(1)$ 已经大于当前的最大数，所以可以停止枚举。</p><hr><ol><li>如图,在平面直角坐标系 $xOy$ 中，已知抛物线 $y=ax^2+c$ 经过点 $P(4,-3)$ ,与y轴交于点 $A(0, 1)$ ,直线$y=kx(k≠0)$ 与抛物线交于 $B,C$ 两点.<br>(1)求抛物线的函数表达式;<br>(2)若 $\Delta ABP$ 是以 $AB$ 为腰的等腰三角形,求点 $B$ 的坐标;<br>(3)过点 $M(0,m)$ 作 $y$ 轴的垂线,交直线 $AB$ 于点 $D$ ,交直线 $AC$ 于点 $E$ .试探究: 是否存在常数 $m$ ,使得$OD⊥OE$ 始终成立?若存在,求出 $m$ 的值;若不存在,请说明理由.</li></ol><p><strong>解析</strong>：一道比较常规的二次函数题，没有什么技术含量。第二问为一个比较简单的三角形存在性问题。第三问直接代值暴力计算即刻。只是计算量有点小大，考场上可能比较容易算错。</p><p><strong>解法</strong>：(1)  将点 $P(4,-3),A(0,1)$ 代入抛物线 $y=ax^2+c$：</p><script type="math/tex; mode=display">\begin{cases}4=a \times 3^2+c \\0=a \times 1^2+c \\\end{cases}</script><p>解得：</p><script type="math/tex; mode=display">\begin{cases}a=-\frac14 \\c=1\end{cases}</script><p>故抛物线的解析式为 $y=-\frac14x^2+1$</p><p>(2) $Case 1:$ $AP$ 、$AB$ 为等腰三角形的腰, $BP$ 为底边.</p><p>则 $B$ 为 $P$ 关于 $y$ 轴的对称点, $B$ 点坐标为 $(-4,-3)$.</p><p> $Case 2:$ $BP$ 、$AB$ 为等腰三角形的腰, $AP$ 为底边.</p><p>则 $B$ 在直线 $AP$ 的中垂线与抛物线的交点处.</p><p>由题可得：$k_{AP}=-1$ , $l_{AP}=-x+1$ .</p><p>则 $l_{AP}$ 的中垂线为 $l_1=x-3$</p><p>联立直线 $l_1$ 和 抛物线 $y$ 得：</p><script type="math/tex; mode=display">\begin{cases}y=x-3 \\y=-\frac14x^2+1\end{cases}</script><p>解得： $x=-2-2\sqrt5$ 或 $-2+2\sqrt{5}$</p><p>则 $B$ 的坐标为 $(-2-2\sqrt5,-5-2\sqrt5)$ 或 $(-2+2\sqrt5,-5+2\sqrt{5})$</p><p>综上所述：$B$ 的坐标为$(-4,-3)$ , $(-2-2\sqrt5,-5-2\sqrt5)$ 或 $(-2+2\sqrt5,-5+2\sqrt{5})$.</p><p><img src="https://s1.ax1x.com/2023/06/17/pCQzlm8.png" style="zoom:50%;" /></p><p>(3) 存在 $m=2$ 或 $\frac23$ 使得题目条件成立.</p><p>设 $B$ 在 $x$ 轴负半轴,$C$ 在 $x$ 轴正半轴.</p><p>已知 $l_{BC}=kx$ ,联立 $l_{BC}$ 和抛物线 $y$ :</p><script type="math/tex; mode=display">\begin{cases}y=kx \\y=-\frac14x^2+1 \\\end{cases}</script><p>解得: $B(-2k-\sqrt{4k^2+4},-2k^2-k\sqrt{4k^2+4}),C(-2k+\sqrt{4k^2+4},-2k^2+k\sqrt{4k^2+4})$ .</p><p>令 $\varphi_1=-2k-\sqrt{4k^2+4},-2k^2-k\sqrt{4k^2+4},\varphi_2=-2k+\sqrt{4k^2+4},-2k^2+k\sqrt{4k^2+4}$ .</p><p>则 $B(\varphi_1,k\varphi_1),C(\varphi_2,k\varphi_2)$ .</p><p>设 $l_{AB}=kx+b$, 将 $A(0,1),B(\varphi_1,k\varphi_1)$ 代入，解得 $l_{BC}=\frac{k\varphi_1-1}{\varphi_1}x+1$</p><p>当 $y=m$ 时, $m=\frac{k\varphi_1-1}{\varphi_1}x+1$ </p><p>解得 $x=\frac{\varphi_1(m-1)}{k\varphi_1-1}$ , $D(\frac{\varphi_1(m-1)}{k\varphi_1-1},m)$ .</p><p>同理可得，$E(\frac{\varphi_2(m-1)}{k\varphi_2-1},m)$ .</p><p>若 $OD⊥OE$ , 则有 </p><script type="math/tex; mode=display">\frac{\varphi_1(m-1)}{k\varphi_1-1} \times \frac{\varphi_2(m-1)}{k\varphi_2-1}=m^2</script><p>整理得</p><script type="math/tex; mode=display">\frac{\varphi_1\varphi_2(m-1)^2}{(k\varphi_1-1)(k\varphi_2-1)} =m^2</script><p>将 $\varphi_1=-2k-\sqrt{4k^2+4},-2k^2-k\sqrt{4k^2+4},\varphi_2=-2k+\sqrt{4k^2+4},-2k^2+k\sqrt{4k^2+4}$ 代入方程</p><p>有 $-4(m-1)^2=m^2$</p><p>解得 $m=2$ 或 $\frac23$</p><p><img src="https://s1.ax1x.com/2023/06/17/pCl9pSs.png" style="zoom:50%;" /></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
          <category> 中考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2023/04/09/basic_grammar/"/>
      <url>/2023/04/09/basic_grammar/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍Markdown中的基本语法。</p><h2 id="1-Markdown标题"><a href="#1-Markdown标题" class="headerlink" title="1.Markdown标题"></a>1.Markdown标题</h2><p>几级标题对应几个 <code>#</code>，共六级标题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><img src="photos\title.png" alt="title"></p><h2 id="2-Markdown文本"><a href="#2-Markdown文本" class="headerlink" title="2.Markdown文本"></a>2.Markdown文本</h2><ul><li>斜体文本：可以在需要标注为斜体文本前及斜体文本结尾，输入一个星号<code>*</code>或者一个下划线 <code>_</code> ；</li><li>粗体文本：可以在需要标注为粗体文本前及粗体文本结尾，输入两个星号 <code>**</code> 或者两个下划线  <code>__</code>；</li><li>粗斜体文本：可以在需要标注为粗斜体文本前及粗斜体文本结尾，输入三个星号 <code>***</code> 或者三个下划线 <code>___</code>；</li><li>高亮文本：可以在需要标注为高亮文本前及高亮文本结尾，输入两个 等号<code>==</code>；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line"></span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line"></span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br><span class="line"></span><br><span class="line">==高亮文本==</span><br></pre></td></tr></table></figure><p><img src="photos\text.png" alt="text"></p><h2 id="3-Markdown列表"><a href="#3-Markdown列表" class="headerlink" title="3.Markdown列表"></a>3.Markdown列表</h2><ul><li><p>有序列表：使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)</p></li><li><p>有序列表：用数字加上<code>.</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表1</span><br><span class="line">+ 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line"></span><br><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line">3. 有序列表3</span><br></pre></td></tr></table></figure><p><img src="photos\list.png" alt="list"></p></li></ul><p>可以使用缩进控制列表层级</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表1</span><br><span class="line">* 无序列表1.1</span><br><span class="line">* 无序列标2</span><br><span class="line">* 无序列表2.1</span><br></pre></td></tr></table></figure><p>  <img src="photos\level_list.png" alt="level_list"></p><p>在<code>-</code>后加上<code>[]</code>或<code>[x]</code>表示完成或未完成的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- [ ] a task list item</span><br><span class="line">- [ ] list syntax required</span><br><span class="line">- [ ] normal **formatting**, @mentions, #1234 refs</span><br><span class="line">- [ ] incomplete</span><br><span class="line">- [x] completed</span><br></pre></td></tr></table></figure><ul><li>[ ] a task list item</li><li>[ ] list syntax required</li><li>[ ] normal <strong>formatting</strong>, @mentions, #1234 refs</li><li>[ ] incomplete</li><li>[x] completed</li></ul><h2 id="4-Markdown表格"><a href="#4-Markdown表格" class="headerlink" title="4.Markdown表格"></a>4.Markdown表格</h2><ul><li><p>使用 <code>|</code>分割不同的单元格</p></li><li><p>使用 <code>-</code>分割表头和其他行</p></li><li><p>对齐方式：</p><ul><li><p><code>:-</code> :内容左对齐</p></li><li><p><code>-:</code> :内容右对齐</p></li><li><p><code>:-:</code> :内容居中对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|学号|总分|排名|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|0101|100|1|</span><br><span class="line">|0102|99|3|</span><br><span class="line">|0103|98|10|</span><br></pre></td></tr></table></figure></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">学号</th><th style="text-align:center">总分</th><th style="text-align:right">排名</th></tr></thead><tbody><tr><td style="text-align:left">0101</td><td style="text-align:center">100</td><td style="text-align:right">1</td></tr><tr><td style="text-align:left">0102</td><td style="text-align:center">99</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">0103</td><td style="text-align:center">98</td><td style="text-align:right">10</td></tr></tbody></table></div><h2 id="5-Markdown链接"><a href="#5-Markdown链接" class="headerlink" title="5.Markdown链接"></a>5.Markdown链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接名字](链接地址) #将文本设为超链接</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt; #将链接直接设为超链接</span><br></pre></td></tr></table></figure><p><a href="https://camlthx.github.io">my wiki</a></p><p><a href="https://camlthx.github.io">https://camlthx.github.io</a></p><h2 id="6-Markdwon图片"><a href="#6-Markdwon图片" class="headerlink" title="6.Markdwon图片"></a>6.Markdwon图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片名字](图片链接)</span><br></pre></td></tr></table></figure><p>图片链接可以使用本地图片或者url链接都可以</p><h2 id="7-Markdown代码块"><a href="#7-Markdown代码块" class="headerlink" title="7.Markdown代码块"></a>7.Markdown代码块</h2><p>使用<code>``` </code>引用起来，可以选择语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```cpp(这里可以选择语言)</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>也可以在行内使用<code>` </code>引用代码 。</p><h2 id="8-Markdown引用"><a href="#8-Markdown引用" class="headerlink" title="8.Markdown引用"></a>8.Markdown引用</h2><p>在 <code>&gt;</code> 后写文字即可。也可以用多个 <code>&gt;</code> 进行嵌套</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用1</span><br><span class="line">&gt; 引用2</span><br><span class="line">&gt; 引用3</span><br><span class="line"></span><br><span class="line">&gt; 引用1</span><br><span class="line">&gt;&gt; 引用2</span><br><span class="line">&gt;&gt;&gt; 引用3</span><br></pre></td></tr></table></figure><blockquote><p>引用1<br>引用2<br>引用3</p><p>引用1</p><blockquote><p>引用2</p><blockquote><p>引用3</p></blockquote></blockquote></blockquote><h2 id="9-Markdown分割线"><a href="#9-Markdown分割线" class="headerlink" title="9.Markdown分割线"></a>9.Markdown分割线</h2><p><del>不排斥你用一些奇奇怪怪的分割线</del></p><p>可以用三个 <code>_</code> 或者 <code>*</code>来建立一个分割线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">***</span><br></pre></td></tr></table></figure><h2 id="10-Markdown删除线"><a href="#10-Markdown删除线" class="headerlink" title="10.Markdown删除线"></a>10.Markdown删除线</h2><p>用 <code>~~</code>引用文字即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~被删除的文本~~</span><br></pre></td></tr></table></figure><p><del>被删除的文本</del></p><h2 id="11-Markdown下划线"><a href="#11-Markdown下划线" class="headerlink" title="11.Markdown下划线"></a>11.Markdown下划线</h2><p>用 <code>&lt;u&gt;</code> 和 <code>&lt;/u&gt;</code> 引用文字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><u>下划线</u></p><h2 id="12-Markdown脚注"><a href="#12-Markdown脚注" class="headerlink" title="12.Markdown脚注"></a>12.Markdown脚注</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You can create footnotes like this[^footnote].</span><br><span class="line"></span><br><span class="line">[^footnote]: Here is the *text* of the **footnote**.</span><br></pre></td></tr></table></figure><p>的效果：</p><p>You can create footnotes like this<sup><a href="#fn_footnote" id="reffn_footnote">footnote</a></sup>.</p><blockquote id="fn_footnote"><sup>footnote</sup>. Here is the <em>text</em> of the <strong>footnote</strong>.<a href="#reffn_footnote" title="Jump back to footnote [footnote] in the text."> &#8617;</a></blockquote><h2 id="13-Markdown-Emojis"><a href="#13-Markdown-Emojis" class="headerlink" title="13.Markdown Emojis"></a>13.Markdown Emojis</h2><p>使用一下语法召唤emojis</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:name:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.6~2.9数据结构dp专练</title>
      <link href="/2023/04/02/2.6practice/"/>
      <url>/2023/04/02/2.6practice/</url>
      
        <content type="html"><![CDATA[<p>2.6~2.9 数据结构与dp​专练，每天4题，难度不小，深蓝到深紫之间的难度。</p><p>绝大部分题来自bzoj，洛谷上只收录了一小部分。</p><p>题目链接：</p><ul><li>D1T1 <a href="http://oi.cdshishi.net:8888/p/P2604">与或</a>：线段树维护二进制操作</li><li>D1T2 <a href="http://oi.cdshishi.net:8888/p/bzoj3333">排队计划</a> ：推导性质+线段树维护</li><li>D1T3 <a href="https://www.luogu.com.cn/problem/p3582">Kinoman</a>： 权值线段树</li><li>D1T4 <a href="https://www.luogu.com.cn/problem/p2894">Hotel</a>：线段树+最长子序列</li><li>D2T1 <a href="https://www.luogu.com.cn/problem/p1712">[NOI2016]区间</a>：双指针+线段树</li><li>D2T2 <a href="http://oi.cdshishi.net:8888/p/bzoj4977">跳伞求生</a> ：贪心/线段树模拟费用流</li><li>D2T3 <a href="https://www.luogu.com.cn/problem/p3569">Cards</a>：线段树合并</li><li>D2T4 <a href="https://www.luogu.com.cn/problem/p4041">[AHOI2014/JSOI2014]奇怪的计算器</a>：线段树</li><li>D3T1 <a href="http://oi.cdshishi.net:8888/p/P2582">层流</a> ：树剖+树上染色</li><li>D3T2  <a href="http://oi.cdshishi.net:8888/p/P2583">Graph</a> ：树剖/dfs序+树状数组</li><li>D3T3  <a href="http://oi.cdshishi.net:8888/p/P2623">three</a> ：长链剖分维护dp​</li><li>D3T4 <a href="https://www.luogu.com.cn/problem/p4315">月下“毛景树”</a>：树剖裸题</li><li>D4T1 <a href="https://www.luogu.com.cn/problem/P3313">[SDOI2014]旅行</a>：树剖+主席树</li><li>D4T2 <a href="https://www.luogu.com.cn/problem/P1973">[NOI2011]嘉年华</a>：单调队列优化dp​</li><li>D4T3 <a href="https://www.luogu.com.cn/problem/P4180">[BJWC2010]严格次小生成树</a>：树剖+最小生成树</li><li>D4T4 <a href="http://oi.cdshishi.net:8888/p/P2601">路径的交</a> ：dfs序</li></ul><p>题解链接：</p><ul><li><a href="https://camlthx.github.io/OI_related/SLOJ_P2604/">与或 </a> </li><li><a href="https://camlthx.github.io/OI_related/bzoj3333/">排队计划</a></li><li><a href="https://camlthx.github.io/OI_related/luoguP3852/">Kinoman</a> </li><li><a href="https://camlthx.github.io/OI_related/luoguP2894/">Hotel</a> </li><li><a href="https://camlthx.github.io/OI_related/luoguP1712/">区间</a> </li><li><a href="https://camlthx.github.io/OI_related/bzoj4977/">跳伞求生</a></li><li><a href="https://camlthx.github.io/OI_related/luoguP3569/">Cards</a></li><li><a href="https://camlthx.github.io/OI_related/luoguP4041/">奇怪的计算器</a> </li><li><a href="https://camlthx.github.io/OI_related/SLOJ_P2582/">层流</a> </li><li><a href="https://camlthx.github.io/OI_related/SLOJ_P2583/">Graph</a> </li><li><a href="https://camlthx.github.io/OI_related/SLOJ_P2623/">three</a> </li><li><a href="https://camlthx.github.io/OI_related/luoguP4315/">月下“毛景树” </a> </li><li><a href="https://camlthx.github.io/OI_related/luoguP3313/">旅行</a> </li><li>嘉年华：因为dp太难被洛谷hack了</li><li><a href="https://camlthx.github.io/OI_related/luoguP4180/">严格次小生成树</a> </li><li><a href="https://camlthx.github.io/OI_related/SLOJ_P2601/">路径的交</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF400D Dima and Bacteria</title>
      <link href="/2023/04/02/CF400D_Dima_and_Bacteria/"/>
      <url>/2023/04/02/CF400D_Dima_and_Bacteria/</url>
      
        <content type="html"><![CDATA[<p>一天爆肝两道CF毒瘤题题解~~</p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p><a href="https://www.luogu.com.cn/problem/CF400D">传送门</a></p><p><del>建议使用百度翻译因为那个自带的翻译实在太水了</del></p><h3 id="solution：-并查集-Floyd-）"><a href="#solution：-并查集-Floyd-）" class="headerlink" title="solution：(并查集+$Floyd$）"></a>solution：(并查集+$Floyd$）</h3><p>同样是很好读懂的一道题，第一问就是让你求一个 $type$ 里的所有点能否以 $0$ 的代价抵达。对于这一问读入之后可以用将所有边权为0的边的端点用并查集合并。然后枚举每个点，如果和同一个 $type$ 其他的点不在一个连通块里就 $puts(“NO”)$ 即可。</p><p>对于第二问就是求每个$type$ 之间的最短距离。多源最短路，又看到 $k \leq 500$ ,毫无疑问用 $Floyd$ 做就可以了。读入每条边的时候更新 $type$ 之间的距离就好了。</p><h3 id="code"><a href="#code" class="headerlink" title="code:"></a>code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,c[<span class="number">505</span>],u,v,w,fa[maxn],f[<span class="number">505</span>][<span class="number">505</span>],col[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]!=x) fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> f[i][j]=f[j][i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//初始化Floyd数组 </span></span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c[i];j++)&#123;</span><br><span class="line">col[cnt++]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//预处理出每个点是属于哪个type </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;<span class="comment">//并查集初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="keyword">if</span>(!w)&#123;</span><br><span class="line"><span class="type">int</span> fu=<span class="built_in">find</span>(u),fv=<span class="built_in">find</span>(v);</span><br><span class="line"><span class="keyword">if</span>(fu!=fv) fa[fu]=fv;</span><br><span class="line">&#125;</span><br><span class="line">u=col[u];v=col[v];</span><br><span class="line">f[u][v]=f[v][u]=<span class="built_in">min</span>(f[u][v],w);<span class="comment">//读入的同时更新边权 </span></span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">find</span>(cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c[i];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(cnt++)!=x)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);<span class="comment">//如果不在一个连通块内就是“NO” </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++) f[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">1</span>;p&lt;=k;p++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][p]+f[p][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//Floyd的板子 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[i][j]!=inf?f[i][j]:<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//按照题意输出即可 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> FLoyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF567E President and roads</title>
      <link href="/2023/04/02/CF567E_President_and_Roads/"/>
      <url>/2023/04/02/CF567E_President_and_Roads/</url>
      
        <content type="html"><![CDATA[<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p><a href="https://www.luogu.com.cn/problem/CF567E">点击穿越</a></p><p>第一次做cf的题真的发现数据强度好大哇qwq（哭。看着是到蓝题，但是已经把我调废了。<del>不要问我为什么改了四天才该对，问就是我是蒟蒻</del>。</p><h3 id="solution：-Dijstra-Tarjan"><a href="#solution：-Dijstra-Tarjan" class="headerlink" title="solution：( $Dijstra + Tarjan$ )"></a>solution：( $Dijstra + Tarjan$ )</h3><p>这道题的思路其实不是很难想，很好理解就是要找出最短路并且找到桥，再枚举每一条边即可。</p><p>因为是有向图且要枚举每一条边，所以应该正反建一次图然后分别跑一边 $dijstra$ 。</p><p>然后就是找桥，也就是最短路上得必经边，首先得把所有最短路上的边重新建图。第一可以用 $tarjan$ ，这是个简单质朴的方式，代码实现问题也不大。</p><p>还有一种方法可以使用最短路计数的方法，设从 $s$ 开始到 $u$ 的最短路条数用 $sum_{0,u}$ 表示，从 $t$ 开始到 $v$ 的最短路条数用 $sum_{1,v}$ 表示,那么如果一条边 $(u,v)$ 是桥的话，一定满足 $sum_{0,u}  \times  sum_{1,v} = sum_{0,t}$ 。</p><p>然后直接一通分类讨论就完辣。</p><p><del>最短路计数的方法实在是太难写了所以我还是贴 $tarjan$ 吧。</del><br>听说 cf 的毒瘤数据还卡单模数和 $1e^9$ 的模数，然后便看到各种大佬的随机模数，双模数等等。蒟蒻实在写不来（悲。</p><h3 id="code："><a href="#code：" class="headerlink" title="code："></a>code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> ll inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">ll u,v,w,nxt;</span><br><span class="line">&#125;e[<span class="number">3</span>][maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll h[<span class="number">3</span>][maxn],cnt[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">e[k][++cnt[k]]=(edge)&#123;u,v,w,h[k][u]&#125;;</span><br><span class="line">h[k][u]=cnt[k];</span><br><span class="line">&#125;<span class="comment">//k=0是为正向图，k=1是为反向图 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">reedge</span>&#123;</span><br><span class="line">ll u,v,w,nxt,num;</span><br><span class="line">&#125;re[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll rcnt=<span class="number">0</span>,rh[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v,ll w,ll i)</span></span>&#123;</span><br><span class="line">re[++rcnt].u=u;re[rcnt].v=v;re[rcnt].w=w;</span><br><span class="line">re[rcnt].nxt=rh[u];re[rcnt].num=i;</span><br><span class="line">rh[u]=rcnt;</span><br><span class="line">&#125;<span class="comment">//是保存最短路上的边的图 </span></span><br><span class="line">ll n,m,s,t,u,v,w,dis[<span class="number">3</span>][maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">ll i,dis;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node&amp;x)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijstra</span><span class="params">(ll be,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) dis[k][i]=inf;</span><br><span class="line">dis[k][be]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;be,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">ll u=q.<span class="built_in">top</span>().i,dist=q.<span class="built_in">top</span>().dis;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(dis[k][u]!=dist) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[k][u];i;i=e[k][i].nxt)&#123;</span><br><span class="line">ll v=e[k][i].v,w=e[k][i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[k][v]&gt;dis[k][u]+w)&#123;</span><br><span class="line">dis[k][v]=dis[k][u]+w;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;v,dis[k][v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//普通的最短路 </span></span><br><span class="line">ll dfn[maxn],low[maxn],tot=<span class="number">0</span>,fa[maxn],flag[maxn&lt;&lt;<span class="number">2</span>],ans[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(ll u)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=rh[u];i;i=re[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=re[i].v;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">fa[v]=re[i].num;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line"><span class="keyword">if</span>(dfn[u]&lt;low[v])&#123;</span><br><span class="line">flag[re[i].num]=<span class="number">1</span>;<span class="comment">//保存桥的编号 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(fa[u]!=re[i].num)&#123;</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//普通的tarjan </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="built_in">add</span>(u,v,w,<span class="number">0</span>);<span class="comment">//正向建图 </span></span><br><span class="line"><span class="built_in">add</span>(v,u,w,<span class="number">1</span>);<span class="comment">//反向建图 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijstra</span>(s,<span class="number">0</span>);<span class="comment">//正向最短路 </span></span><br><span class="line"><span class="built_in">dijstra</span>(t,<span class="number">1</span>);<span class="comment">//反向最短路 </span></span><br><span class="line">ll minn=dis[<span class="number">0</span>][t];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ll u=e[<span class="number">0</span>][i].u,v=e[<span class="number">0</span>][i].v,w=e[<span class="number">0</span>][i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[<span class="number">0</span>][u]==inf||dis[<span class="number">1</span>][v]==inf)&#123;</span><br><span class="line">flag[i]=<span class="number">-2</span>;<span class="comment">//将不可能经过的边设为-2 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dis[<span class="number">0</span>][u]+dis[<span class="number">1</span>][v]+w==minn)&#123;</span><br><span class="line"><span class="built_in">addedge</span>(u,v,w,i);</span><br><span class="line"><span class="built_in">addedge</span>(v,u,w,i);<span class="comment">//对最短路上的边重新建图 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dis[<span class="number">0</span>][u]+dis[<span class="number">1</span>][v]+w&gt;minn)&#123;</span><br><span class="line">flag[i]=<span class="number">-1</span>;</span><br><span class="line">ans[i]=w-(minn<span class="number">-1</span>-dis[<span class="number">0</span>][u]-dis[<span class="number">1</span>][v]);<span class="comment">//&quot;can&quot;情况的边保存 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">tarjan</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]&lt;e[<span class="number">0</span>][i].w&amp;&amp;ans[i]&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;CAN %lld\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e[<span class="number">0</span>][i].w&gt;<span class="number">1</span>&amp;&amp;flag[i]!=<span class="number">-2</span>) <span class="built_in">puts</span>(<span class="string">&quot;CAN 1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//一通分类讨论 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> Dijstra </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ2582 层流</title>
      <link href="/2023/04/02/SLOJ_P2582/"/>
      <url>/2023/04/02/SLOJ_P2582/</url>
      
        <content type="html"><![CDATA[<h3 id="D3T1-层流"><a href="#D3T1-层流" class="headerlink" title="D3T1 层流"></a>D3T1 层流</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>对于一个全集 $U$ ，$A,B$ 是它的两个子集，如果 $A \subseteq B$ 或 $B \subseteq A$ 或 $A \cap B = \emptyset$ ，则称 $A,B$ 是 $U$ 的两个层流集。</p><p>给定一棵树，$U$ 为树上所有点构成的集合。将两点间的简单路径 $(u,v)$ 经过的点视作一个集合，求给出的 $m$ 对 $(u,v)$ 判断是否满足任意两个集合都是 $U$ 的层流集。  </p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>考虑染色。先将询问按集合大小从大到小排序，这样可以将问题转化为小区间包含大区间的问题。对于每个集合染色前，判断 $(u,v)$ 上如果有2种及以上的颜色，那么就不符合。</p><p>染色过程与<a href="https://www.luogu.com.cn/problem/P2486">[SDOI2011]染色</a>相同。<del>早知道就直接复制这个代码了</del></p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,tag,cnt,lc,rc;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dep[maxn],num[maxn],fa[maxn],siz[maxn],hson[maxn],top[maxn],pred[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">pred[tot]=x; </span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> LC,RC,n,m,u,v,tt,w[maxn];</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].cnt=t[p&lt;&lt;<span class="number">1</span>].cnt+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rc==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc) t[p].cnt--;</span><br><span class="line">t[p].lc=t[p&lt;&lt;<span class="number">1</span>].lc;t[p].rc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].lc=t[p].rc=w[pred[l]];</span><br><span class="line">t[p].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].lc=t[p&lt;&lt;<span class="number">1</span>].rc=t[p&lt;&lt;<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].cnt=<span class="number">1</span>;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt=<span class="number">1</span>;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].lc=t[p].rc=t[p].tag=val;</span><br><span class="line">t[p].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line"><span class="built_in">pushup</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l==l) LC=t[p].lc;</span><br><span class="line"><span class="keyword">if</span>(t[p].r==r) RC=t[p].rc;</span><br><span class="line"><span class="keyword">return</span> t[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>)+<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rc==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc) ans--;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(num[x],num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,ansl=<span class="number">0</span>,ansr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(ansl,ansr);</span><br><span class="line">res+=<span class="built_in">query</span>(num[top[x]],num[x],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(RC==ansl) res--;</span><br><span class="line">ansl=LC;</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(ansl,ansr);</span><br><span class="line">res+=<span class="built_in">query</span>(num[x],num[y],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ansl==LC) res--;</span><br><span class="line"><span class="keyword">if</span>(ansr==RC) res--;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sett</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,lcaa,len;</span><br><span class="line">&#125;s[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(sett a,sett b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len&gt;b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">s[i].u=in;s[i].v=in;</span><br><span class="line">s[i].lcaa=<span class="built_in">lca</span>(s[i].u,s[i].v);</span><br><span class="line">s[i].len=dep[s[i].u]+dep[s[i].v]<span class="number">-2</span>*dep[s[i].lcaa]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="type">int</span> col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getsum</span>(s[i].u,s[i].v)&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">col++;</span><br><span class="line"><span class="built_in">upd</span>(s[i].u,s[i].v,col);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ2583 Graph</title>
      <link href="/2023/04/02/SLOJ_P2583/"/>
      <url>/2023/04/02/SLOJ_P2583/</url>
      
        <content type="html"><![CDATA[<h3 id="D3T2-Graph"><a href="#D3T2-Graph" class="headerlink" title="D3T2 Graph"></a>D3T2 Graph</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>给一个 $n$ 个点的图，有 $2 \times n-2$ 条 <strong>有向边</strong>。边目录按两部分给出：</p><ol><li><p>开始的 $n-1$ 条边描述了一颗以1号点为根的生成树，每个点都可以由1号点到达。</p></li><li><p>接下来的 $n-1$ 条边一定是 $<i,1>$ 的有向边，保证每个点都能到达1号点。</p></li></ol><p>有 $q$ 次询问：</p><p><code>1 x w</code> 将第 $x$条边的边权修改为 $w$ </p><p><code>2 u v</code> 询问 $u$ 到 $v$ 的最短距离</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p><del>我是绝对不会说我因为没看见有向边导致样例玩了1个小时</del></p><p>讨论一下 $u$ 和 $v$ 的关系。</p><p>如果 $u$ 是 $lca$ ，直接求链就可以了。不然查询以 $u$ 为根的子树返回根的最优值就好了。</p><p>然后用树剖维护 $dis_i+w_i$ 的最小值，$dis_i$ 表示 $i$ 到根的距离，$w_i$ 表示 $i$ 回到根的距离。</p><p>至于为什么觉得 <a href="https://blog.csdn.net/sslz_fsy/article/details/82557256?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=graph%20%E7%BA%BF%E6%AE%B5%E6%A0%91&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-82557256.142^v73^control_1,201^v4^add_ask,239^v1^insert_chatgpt&amp;spm=1018.2226.3001.4187">FSYo的题解</a> 写的很清楚。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">ll w;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> h[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">e[++cnt].v=v;e[cnt].nxt=h[u];e[cnt].w=w;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll min,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,q,tot=<span class="number">0</span>,siz[maxn],rec[maxn],top[maxn],num[maxn],fa[maxn],dep[maxn],pred[maxn],hson[maxn];</span><br><span class="line">ll a[maxn],dis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line">a[v]=a[x]+e[i].w;</span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;siz[hson[x]]) hson[x]=v; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;num[x]=++tot;pred[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(!hson[x]) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=hson[x]) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].min=a[pred[l]]+dis[pred[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].min+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;t[p].r||t[p].l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].tag+=val;</span><br><span class="line">t[p].min+=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,val),<span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;t[p].r||t[p].l&gt;r) <span class="keyword">return</span> <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].min;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">query</span>(l,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">query</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;q=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u=in,v=in;ll w=in;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u=in,v=in;ll w=in;</span><br><span class="line">rec[i]=u;dis[u]=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="type">int</span> opt=in;ll x=in,y=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=n<span class="number">-1</span>) <span class="built_in">update</span>(num[e[x].v],num[e[x].v]+siz[e[x].v]<span class="number">-1</span>,<span class="number">1</span>,y-e[x].w),e[x].w=y;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(num[rec[x-n+<span class="number">1</span>]],num[rec[x-n+<span class="number">1</span>]],<span class="number">1</span>,y-dis[rec[x-n+<span class="number">1</span>]]),dis[rec[x-n+<span class="number">1</span>]]=y;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">lca</span>(x,y)==x) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(num[y],num[y],<span class="number">1</span>)-dis[y]-<span class="built_in">query</span>(num[x],num[x],<span class="number">1</span>)+dis[x]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(num[y],num[y],<span class="number">1</span>)+<span class="built_in">query</span>(num[x],num[x]+siz[x]<span class="number">-1</span>,<span class="number">1</span>)-<span class="built_in">query</span>(num[x],num[x],<span class="number">1</span>)+dis[x]-dis[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ2601 路径的交</title>
      <link href="/2023/04/02/SLOJ_P2601/"/>
      <url>/2023/04/02/SLOJ_P2601/</url>
      
        <content type="html"><![CDATA[<h3 id="D4T4-路径的交"><a href="#D4T4-路径的交" class="headerlink" title="D4T4 路径的交"></a>D4T4 路径的交</h3><h4 id="Desciption："><a href="#Desciption：" class="headerlink" title="Desciption："></a>Desciption：</h4><p>给定一颗 $n$ 个节点的树，以及 $m$ 条路径，第 $i$ 条路径与前 $i-1$ 条有多少相交的（点相交即视为路径相交）</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>现在有两条路径 $a$ 和 $b$ ，有两种情况，一种是 $a$ 的 $lca$ 在 $b$ 上，另一种是 $b$ 的 $lca$ 在 $a$ 上。</p><p>所以就转化成了两个问题：</p><ol><li><p>当前路径上有几个之前的 $lca$</p></li><li><p>之前的路径有几个经过当前的 $lca$ </p></li></ol><p>可以用两个树状数组来维护，一个支持单点修改、链上查询，另一个支持链上修改、单点查询。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><p>目前只能用倍增来跳 $lca$ ，用欧拉序跳的有点奇怪（悲</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,u,v;</span><br><span class="line"><span class="type">int</span> val[maxn],st[maxn],ed[maxn],tim=<span class="number">0</span>,dfn[maxn&lt;&lt;<span class="number">1</span>],dep[maxn],fath[maxn];</span><br><span class="line"><span class="type">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[a]&lt;dep[b]?a:b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">st[u]=++tim;</span><br><span class="line">f[u][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">19</span>;++i) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">ed[u]=tim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">  <span class="keyword">if</span>(dep[f[x][i]]&gt;=dep[y]) x=f[x][i];   </span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">  <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];    </span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bittree</span>&#123;</span><br><span class="line"><span class="type">int</span> t[maxn],siz;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">t[x]+=val;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;t1,t2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">clac</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> lca)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">ans+=t1.<span class="built_in">query</span>(ed[lca])-t1.<span class="built_in">query</span>(st[lca]<span class="number">-1</span>);</span><br><span class="line">ans+=t2.<span class="built_in">query</span>(st[x])+t2.<span class="built_in">query</span>(st[y])-t2.<span class="built_in">query</span>(st[lca])*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="type">int</span> lcaa=<span class="built_in">lca</span>(u,v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">clac</span>(u,v,lcaa)+val[lcaa]);</span><br><span class="line">val[lcaa]++;</span><br><span class="line">t1.<span class="built_in">update</span>(st[u],<span class="number">1</span>);</span><br><span class="line">t1.<span class="built_in">update</span>(st[v],<span class="number">1</span>);</span><br><span class="line">t1.<span class="built_in">update</span>(st[lcaa],<span class="number">-2</span>);</span><br><span class="line">t2.<span class="built_in">update</span>(st[lcaa],<span class="number">1</span>);</span><br><span class="line">t2.<span class="built_in">update</span>(ed[lcaa]+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ2604 与或</title>
      <link href="/2023/04/02/SLOJ_P2604/"/>
      <url>/2023/04/02/SLOJ_P2604/</url>
      
        <content type="html"><![CDATA[<h3 id="D1T1-与或"><a href="#D1T1-与或" class="headerlink" title="D1T1 与或"></a>D1T1 与或</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>对于一个长度为 $n$ 的序列，维护一下三个信息：</p><p><code>1 l r v</code> ：将 $a_i,l\leq i \leq r$ 变为 $a_i \text{ and } v$</p><p><code>2 l r v</code> ：将 $a_i,l\leq i \leq r$ 变为 $a_i \text{ or } v$</p><p><code>3 l r</code> ：求 $a_i,l\leq i \leq r$ 的最大值</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>不会（逃</p><p>正解参考<a href="https://blog.csdn.net/dreaming__ldx/article/details/80850136?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167575663516782428622687%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167575663516782428622687&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-80850136-null-null.142^v73^control,201^v4^add_ask,239^v1^control&amp;utm_term=%E4%B8%8E%E6%88%96%E7%BA%BF%E6%AE%B5%E6%A0%91&amp;spm=1018.2226.3001.4187">idx巨佬的文章</a></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><p>这里使用的是暴力解法，可以过掉随机数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">ll l,r;</span><br><span class="line">ll max,min,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll n,q,a[maxn],opt,l,r,x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].max=t[p].min=<span class="number">0</span>;t[p].tag=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=t[p].min=t[p].tag=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="comment">//t[p].tag=t[p].max;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag!=<span class="number">-1</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].max=t[p&lt;&lt;<span class="number">1</span>].min=t[p&lt;&lt;<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updand</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r&amp;&amp;t[p].max==t[p].min)&#123;</span><br><span class="line">t[p].max&amp;=x;t[p].min&amp;=x;</span><br><span class="line">t[p].tag=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updand</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updand</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updor</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r&amp;&amp;t[p].max==t[p].min)&#123;</span><br><span class="line">t[p].max|=x;t[p].min|=x;</span><br><span class="line">t[p].tag=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updor</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updor</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].max;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line">ll mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;q=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">opt=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">l=in;r=in;x=in;</span><br><span class="line"><span class="built_in">updand</span>(l,r,<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">l=in;r=in;x=in;</span><br><span class="line"><span class="built_in">updor</span>(l,r,<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">l=in;r=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(l,r,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ2623 Three</title>
      <link href="/2023/04/02/SLOJ_P2623/"/>
      <url>/2023/04/02/SLOJ_P2623/</url>
      
        <content type="html"><![CDATA[<h3 id="D3T3-Three"><a href="#D3T3-Three" class="headerlink" title="D3T3 Three"></a>D3T3 Three</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>给定一颗 $n$ 个节点的无根树，在树上选三个互不相同的节点，使得三个节点两两之间距离相等，输出方案数。</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>首先，我不是很会 $dp$ </p><p>其次，我完全不会长链剖分优化 $dp$ </p><p>最后，我<em> </em> <em> </em> <em> </em></p><p>其实 $dp$ 部分还是听懂了。</p><p>设 $f_{i,j}$ 表示以 $i$ 为根的子树中距离 $i$ 为 $j$ 的点数，$g_{i,j}$ 表示 $i$ 的子树中有多少两个点的 $lca$ 到 $i$ 的距离为 $d-j$ ，两个点到他们 $lca$ 的距离是 $d$ 。</p><p>很容易发现这两个状态可以互补（？</p><p>因此对于一对父子 $(p,v)$ 有如下转移式：</p><script type="math/tex; mode=display">ans+=g_{v,i+1}*f_{p,i}+g_{p,i}*f_{v,i-1}</script><script type="math/tex; mode=display">g_{p,i}+=g_{v,i-1}+f_{v,i-1}*f_{p,i}</script><script type="math/tex; mode=display">f_{p,i}+=f_{v,i-1}</script><p>但是代码就完全就看不懂了，什么指针转移力（哭</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[maxn];</span><br><span class="line"><span class="type">int</span> n,u,v;</span><br><span class="line">ll pool[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line">ll* top=pool;</span><br><span class="line">ll *f[maxn],*g[maxn];</span><br><span class="line"><span class="function">ll* <span class="title">get</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">ll* t=top;top+=len;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dep[maxn],hson[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dep[x]=<span class="number">0</span>;hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">dep[x]=<span class="built_in">max</span>(dep[x],dep[v]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(dep[v]&gt;dep[hson[x]]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;maxlen,<span class="type">int</span> blank)</span></span>&#123;</span><br><span class="line">maxlen=<span class="built_in">max</span>(maxlen,dep[x]);</span><br><span class="line"><span class="keyword">if</span>(hson[x])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[x],x,maxlen,blank+<span class="number">1</span>);</span><br><span class="line">ans+=g[hson[x]][<span class="number">1</span>];</span><br><span class="line">f[x]=f[hson[x]]<span class="number">-1</span>;</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">g[x]=g[hson[x]]+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">f[x]=<span class="built_in">get</span>(maxlen+<span class="number">5</span>+blank)+blank;</span><br><span class="line">g[x]=<span class="built_in">get</span>(maxlen+<span class="number">5</span>+blank);</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v=e[x][i],mlen=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==fa||v==hson[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,x,mlen,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;dep[v];j++) ans+=f[x][j]*g[v][j+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v]+<span class="number">1</span>;j++) ans+=g[x][j]*f[v][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v]+<span class="number">1</span>;j++) g[x][j]+=f[x][j]*f[v][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=dep[v];j++) f[x][j+<span class="number">1</span>]+=f[v][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v];j++) g[x][j<span class="number">-1</span>]+=g[v][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(pool,<span class="number">0</span>,<span class="built_in">sizeof</span>(pool));</span><br><span class="line"><span class="built_in">memset</span>(hson,<span class="number">0</span>,<span class="built_in">sizeof</span>(hson));</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line">e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mxlen=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,mxlen,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> dp </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLOJ3045 食堂</title>
      <link href="/2023/04/02/SLOJ_P3045/"/>
      <url>/2023/04/02/SLOJ_P3045/</url>
      
        <content type="html"><![CDATA[<p><del>我是劳模</del></p><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>在SSZX食堂，所有的座位是一行一行的排列。现在有 $N$ 个座位排成一行，依次编号 $1,2,\dots,N$ ，每个座位只能坐一个人，现在L想数一下有多少个人坐着，一个一个数太慢了，L决定只选择 $M$ 段连续的座位，对每段分别数出人数。由于食堂噪音十分嘈杂，L无法专心，可能有数错了。但是L认为没有数漏，最多是重复计数导致的。现在他把得到的数据给你，希望你帮他算出，一共最多有多少人。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行2个整数 $N,M$，分别是座位数量，和L分成 $M$ 段</p><p>接下来M行，每行3个整数，$l,r,k$，表示L数了 $l$ 到 $r$ 这一段的座位，他输出的数是 $k$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行一个整数表示答案</p><p><del>我们学校食堂没有这么大</del></p><h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><p>20%数据, $N,M$ &lt;=20</p><p>40%数据，$N,M$&lt;=500</p><p>20%数据，L选的每段座位 不相交</p><p>100%数据，$1 \leq N,M,K \leq 100 000$ , $1 \leq l \leq r \leq N $</p><h3 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h3><p>（差分约束）</p><p>说白了就是有一个长度为 $n$ 的 01 串，每次告诉区间 $[l,r]$ 中有多少个 1 ，求次串最多有几个 1 。</p><p>首先可以想到用前缀和 $pre_i$ 表示 $[1,i]$ 的范围内有多少个 1 ，答案就是求 $pre_n-pre_0$ 的最大解。每一个条件可以表示为 $pre_r-pre_{l-1}=k$ 。然后考虑用差分约束求解，建立 $(l-1,r)$ 和 $(r,l-1)$ 、权值为 $k$ 的一条边。但是如果这样建完边会发现不连通，所以需要加条件。<del>我就在这里卡了好久</del>。直到看了其他的题解，又发现了一个约束条件： $0 \leq pre_i-pre_{i-1} \leq 1$ ,很好理解吧。然后跑一遍最短路求最大解就好了。 </p><h3 id="code-："><a href="#code-：" class="headerlink" title="code ："></a>code ：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;<span class="comment">//前向星存图 </span></span><br><span class="line"><span class="type">int</span> n,m,op,u,v,w,dis[maxn],vis[maxn],cntt[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> be)</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis,inf,<span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">q.<span class="built_in">push</span>(be);</span><br><span class="line">vis[be]=<span class="number">1</span>;dis[be]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(++cntt[v]&gt;n+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*关于spfa，他死了。</span></span><br><span class="line"><span class="comment">不要问我为什么还有个return，问就是抄的模板。*/</span> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="built_in">add</span>(u<span class="number">-1</span>,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u<span class="number">-1</span>,w);<span class="comment">//pre[r]-pre[l-1]=w,所以建立两条约束边 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">add</span>(i<span class="number">-1</span>,i,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(i,i<span class="number">-1</span>,<span class="number">0</span>);<span class="comment">//0&lt;=pre[i]-pre[i-1]&lt;=1的条件建边 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">spfa</span>(<span class="number">0</span>);<span class="comment">//最短路求最大值解 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题借鉴了一点<a href="https://www.luogu.com.cn/blog/five20/solution-p1250">这篇题解</a>的思路。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西川实验随笔</title>
      <link href="/2023/04/02/about_xcsy/"/>
      <url>/2023/04/02/about_xcsy/</url>
      
        <content type="html"><![CDATA[<h2 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h2><p>懒癌晚期患者，本来说毕业暑假找个时间写写，结果拖到现在</p><p>在外面漂泊了大半年，仍然还是很想xcsy</p><p>怎么说呢，已经算是一种精神寄托了属于是</p><h2 id="1-大事祭"><a href="#1-大事祭" class="headerlink" title="1.大事祭"></a>1.大事祭</h2><h2 id="1-1-初一之前"><a href="#1-1-初一之前" class="headerlink" title="1.1 初一之前"></a>1.1 初一之前</h2><h4 id="1-1-1-2019-6以前的事"><a href="#1-1-1-2019-6以前的事" class="headerlink" title="1.1.1 2019.6以前的事"></a>1.1.1 2019.6以前的事</h4><p>最早关于xcsy还是在2018.9的样子。听说ljz被挖到xczx去了，后面才知道是xcsy，1w的奖学金，还有晚自习练魔方的权利，爽死了。心想我也身为一个cuber会不会也有这种待遇。后面才发现ljz是我永远无法企及的高度。</p><p>2019.1以及2019.6 ljz拿世界冠军、去上节目确实让xcsy好好吹了一把，感觉还能再宣传5年。</p><p>好了该是我自己的事了。</p><p>好怀念我们当时还没有全摇号的日子。</p><p>大概2019.1（记不太清了 tyc首先拿到了xcsy的offer，好像是小考进的，xhx整个六年级下大概都在外面补课，那个机构也有进xcsy的手段。我大概是2019.5小面试的时候拿到了减分的政策，7月的大面试不失常就肯定能进了。</p><p>当时还是很开心的立马停掉了奥数课然后2019.6还去打了<a href="https://cubing.com/competition/Guilin-Open-2019">桂林赛</a>，属于保送了。</p><p>记得小考还拿到了tfqz的offer，区上摇号还有qzcz。因为那年xcsy风头太盛了，所以果断选了xcsy。</p><p>然后怀着极其开心的心态去了毕业旅行。然后被hzx坑了120多导致彻底闹掰。</p><h4 id="1-1-2-2019-7"><a href="#1-1-2-2019-7" class="headerlink" title="1.1.2 2019.7"></a>1.1.2 2019.7</h4><p>记得那时候七月初是大面试。我报了三个志愿，一志愿xcsy，二志愿xczx，三志愿tfqz。后两个纯粹图一乐，xczx是还是最没戏的。</p><p>简述一下三天面试的经历吧。</p><h5 id="day1"><a href="#day1" class="headerlink" title="day1:"></a>day1:</h5><p>上午还在zk的茶局，跟ljz，nancy他们完了一会，被血虐。下午去tfqz面试。其实那不是我第一次去tfqz，很喜欢那个校园环境，但是教室看起来有点破旧，食堂感觉吃的也不错。考试的时候体育考试还考了一些奇奇怪怪的我从来没没见过的器材，说实话我现在仍然没见过。然后其他的基本上就忘光了。</p><p>放一点之前去访校时拍的照片</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/IMG_0910.JPG" alt="image1"></p><p><img src="https://ohepse.s3.bitiful.net/xcsy/IMG_0911.JPG" alt="image2"></p><p>tfqz的食堂还是蛮不错的。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/IMG_0907.JPG" alt="campus1"></p><p><img src="https://ohepse.s3.bitiful.net/xcsy/IMG_0908.JPG" alt="campus2"></p><p>tfqz的校园也不错</p><h5 id="day2"><a href="#day2" class="headerlink" title="day2:"></a>day2:</h5><p>第二天去的二志愿xczx。教室及其老旧，设备也是。还记得那个200m的超级小操场。只记得学校里的绿化还挺不错的，树木遮天蔽日。</p><h5 id="day3"><a href="#day3" class="headerlink" title="day3:"></a>day3:</h5><p>说实话这是我第一次去xcsy。进来的时候分了组，每组大概30,40个人的样子吧，两个老师带着。那个男老师是海哥，说话挺风趣的所以记得比较深刻，那个女老师就不记得是谁了。然后记得用平板来做了好多题，内容是啥忘完了，但是zlc他们说反正题目挺奇怪的。记得中途被拉出去考体育，记得是那个女的体育老师在上面领操，还有个lsj穿着粉色衣服在旁边巡视。最后回来之后有表演才艺，<del>然后有两个同学也带了魔方我们三个被一起拉上去然后我把他们血虐</del>。感觉还不错，稳了。</p><p>然后确实上了。</p><p>只记得7月初的时候有个四天的信息学集训。当时还是wyy教的我们。记得之前还做了一个小测试，只记得最后一题问你一般用电脑干什么，我还特别离谱的写了个 cube explorer。</p><p>四天的集训大概把语言基础讲了一下。成功地将我拉进了OI这个巨坑。</p><p>还记得tyc那时候还跟我在一起，像我推荐了白鼠。自从我看白鼠之后，他更新的频率越来越低了。</p><p>7.18的样子去领了录取通知书，还记得是sk来给我写的。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/admisson.jpg" alt="admisson"></p><p>（不过u1s1后面的录取通知书越来越还看力！)</p><p>然后嘛我们还去画了一个什么关于我的梦想的陶艺画（？，然后我画了一个超级抽象的魔方，居然还被学校展览出来了。有机会下次回去的时候拍拍。</p><h4 id="2019-9-2020-1"><a href="#2019-9-2020-1" class="headerlink" title="2019.9-2020.1"></a>2019.9-2020.1</h4><p>实际上八月低就开学了。那就还是姑且按九月算吧。当时候忘了因为啥原因，反正军训取消了（太快乐了。</p><p>现在想到某些学校9天的军训就害怕。</p><p>还记得第一次去学校的时候在架空层等着，然后看到了hhy，shq等熟悉的面孔。毕竟是qy那里混的挺熟的。shq写的“到此一游”被我们笑了三年哈哈哈哈。</p><p>然后就被领到了教室，白板上是很普通的迎新的版画。记得zmx先走进来，那天貌似是画了挺浓的装，穿的是白色的衣服，在加上坐的有点远，所以一开始觉得她长得还挺好看的（。</p><p>大概是熟悉的自我介绍时间。大部分人印象都不是很深嘛。然后翻到了那年青涩的crz。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/crz.jpg" alt="crz"></p><p>之后就带着我们逛了逛校园，确实修的很好，但就是不用。反正大概就是在学校里面走一圈。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616333009.jpg" alt=""></p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616335689.jpg" alt=""></p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616339017.jpg" alt=""></p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616342381.jpg" alt=""></p><p>逛完学校又拉到音乐厅里听讲座，讲了什么早就忘了，看公众号上的内容大概就是学习方法，内务常规云云。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616350123.jpg" alt=""></p><p>(语文组的张老师，可惜初二的时候就跳槽走了)</p><p>当天下午就大概是站队做操之类的吧。就当是把军训补上了。</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616385036.png" alt=""></p><p>（猴子当时好可爱）</p><p><img src="https://ohepse.s3.bitiful.net/xcsy/mmexport1687616379867.jpg" alt=""></p><p>大概练完我们就去拍了第一张班级合照。</p><p>记得那天听讲座的时候就有点发烧，又吹着空调，是相当的冷。那天还吃到了一种非常不同寻常的咖喱鸡翅，是三年来唯一一次，听说是主厨没上班。</p><p>那个时候完全没住过学校，所以那天晚上的铺床时间是及其痛苦的。勉强将床单塞到床上，然后我们宿舍几个人就开始聊起来了。lk是最外向的，还有wxq，qzx，lrs我们五个人。lk很友好地给我们取了外号。我叫四眼狗，后面演化成了single；qzx高的离谱，所以他叫社会猪。wxq不知道怎么变成了驼马。lrs叫啥我忘了。当时候食堂也坐在一起，大概我们已经成了一个小团体力。</p><p>上半学期是初中的第一学期。这根小学的那种散漫差距还是不止一点半点的。所以刚进入初中是相当的不适应。我尤其记得我上课睡觉。上啥课都睡。上数学课困到不行。上语文课的时候dyy老是要抽我起来回答问题，因为我上课老是睡觉！后面我不怎么睡觉了，她又偏偏认为我在走神。所以初一初二的时候我最害怕的就是dyy以及她的语文课。当时候感觉6点过就起床，10点才能睡，又是第一次住校，还要上晚自习。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dfs序</title>
      <link href="/2023/04/02/dfs_order/"/>
      <url>/2023/04/02/dfs_order/</url>
      
        <content type="html"><![CDATA[<p>感觉这个也算是个知识点但是到处都没有教程捏</p><p><a href="https://loj.ac/d/1698">这里</a>有一篇写的很好的关于dfs序的教程。</p><p>dfs序就是把树上问题转化为序列问题，从而通过树状数组或线段树进行维护。</p><p>dfs序本身不难理解，难的是与树状数组以及线段树结合，再加上巨大的码量。一下的四个例题码量平均100+。</p><p><strong>多码预警</strong></p><p>下面用一些例题讲解。</p><h2 id="1-单点修改，子树查询"><a href="#1-单点修改，子树查询" class="headerlink" title="1.单点修改，子树查询"></a>1.单点修改，子树查询</h2><p>在dfs序中，$x$ 的子树在两次 $x$ 出现的中间，且是连续的。</p><p>所以问题就转化为序列上单点修改，区间查询。树状数组维护即可。</p><p>code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,r,u,v,opt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll val[maxn],c[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=c[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[maxn],ed[maxn],tim=<span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">st[x]=++tim;vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">ed[x]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;r=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i]=in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">update</span>(st[i],val[i]);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">opt=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">update</span>(st[u],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">u=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(ed[u])-<span class="built_in">query</span>(st[u]<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-子树修改，子树查询"><a href="#2-子树修改，子树查询" class="headerlink" title="2.子树修改，子树查询"></a>2.子树修改，子树查询</h2><p>同理，问题可以转化为区间修改区间查询，很容易想到线段树对伐。然后就有了以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll sum,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n,m,r,u,v,opt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[maxn&lt;&lt;<span class="number">1</span>],val[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].sum=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">t[p].sum=t[p&lt;&lt;<span class="number">1</span>].sum+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum+=t[p].tag*(t[p&lt;&lt;<span class="number">1</span>].r-t[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=t[p].tag*(t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].sum+=val*(t[p].r-t[p].l+<span class="number">1</span>);</span><br><span class="line">t[p].tag+=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].sum=t[p&lt;&lt;<span class="number">1</span>].sum+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].sum;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans+=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;r) ans+=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[maxn],ed[maxn],tim=<span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">st[x]=++tim;vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line">ll v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">ed[x]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;r=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[st[i]]=val[i];</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">opt=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">update</span>(st[u],ed[u],<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">u=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(st[u],ed[u],<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被WA、RE、MLE轮流搞废的线段树。</p><p>为什么呢？一看数据 $1e6$ 。</p><p>还是得转过头来考虑用树状数组维护。</p><p>设原数组为 $a_i$ , 差分数组为 $d_i$ </p><p>则有： $a_x=\sum_{i=1}^x d_i$ </p><p>要求：$\sum_{i=1}^{x}a_i$</p><p>联立得：$ans=\sum_{i=1}^x\sum_{j=1}^id_j=\sum_{i=1}^x(x-i+1)d_i=(x+1)<em>\sum_{i=1}^x-\sum_{i=1}^x i</em>d_i$</p><p>然后用两个树状数组分别维护即可。</p><p>code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">ll n,m,r,u,v,opt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">ll u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u,ll v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll val[maxn],c[maxn&lt;&lt;<span class="number">1</span>][<span class="number">2</span>],sum[maxn];</span><br><span class="line"><span class="function">ll <span class="title">lowbit</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(ll x,ll v,ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x][k]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,ll k)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=c[x][k];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[maxn],ed[maxn],tim=<span class="number">0</span>,dfn[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x,ll fa)</span></span>&#123;</span><br><span class="line">st[x]=++tim;</span><br><span class="line">dfn[tim]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa) <span class="built_in">dfs</span>(v,x);</span><br><span class="line">&#125;</span><br><span class="line">ed[x]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;r=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(r,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=sum[i<span class="number">-1</span>]+val[dfn[i]];</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">opt=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">update</span>(st[u],v,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">update</span>(ed[u]+<span class="number">1</span>,-v,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">update</span>(st[u],st[u]*v,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(ed[u]+<span class="number">1</span>,-v*(ed[u]+<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">u=in;</span><br><span class="line">ll l=st[u],</span><br><span class="line">r=ed[u];</span><br><span class="line">ll ans=sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(r+<span class="number">1</span>)*<span class="built_in">query</span>(r,<span class="number">0</span>)-</span><br><span class="line">l*<span class="built_in">query</span>(l<span class="number">-1</span>,<span class="number">0</span>)-</span><br><span class="line"><span class="built_in">query</span>(r,<span class="number">1</span>)+</span><br><span class="line"><span class="built_in">query</span>(l<span class="number">-1</span>,<span class="number">1</span>)+ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-链上修改，单点查询，子树查询（树上差分）"><a href="#3-链上修改，单点查询，子树查询（树上差分）" class="headerlink" title="3.链上修改，单点查询，子树查询（树上差分）"></a>3.链上修改，单点查询，子树查询（树上差分）</h2><p>单点查询和子树查询前文已经提过了</p><p>对于链上修改，每个点维护一个树上前缀和，那么答案就是 $val_x+val_y-val_{lca}-val_{fa_lca}$，这就是所谓的差分 。可以开两个树状数组，一个用来维护点权 $val_x$ ,一个用来维护前缀和。</p><p>对于单点查询和子树查询也可以用第一个树状数组解决。</p><p>题中还要求 $lca$，这里可以用欧拉序+$ST$ 表来求解，详细在代码中可以看到。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,r,u,v,opt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bittree</span>&#123;</span><br><span class="line">ll c[maxn&lt;&lt;<span class="number">1</span>];<span class="type">int</span> siz;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k,ll v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;=siz)&#123;</span><br><span class="line">c[k]+=v;k+=<span class="built_in">lowbit</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)&#123;</span><br><span class="line">ans+=c[k];k-=<span class="built_in">lowbit</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">bittree A,B;</span><br><span class="line"><span class="type">int</span> st[maxn],ed[maxn],tim=<span class="number">0</span>,dfn[maxn&lt;&lt;<span class="number">1</span>],dep[maxn],fath[maxn];<span class="comment">//dfn is used for getting euler order(?</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">st[x]=++tim;</span><br><span class="line">dfn[tim]=x;</span><br><span class="line">dep[x]=d;</span><br><span class="line">fath[x]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,x,d+<span class="number">1</span>);</span><br><span class="line">dfn[++tim]=x;</span><br><span class="line">&#125;</span><br><span class="line">ed[x]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dep[a]&lt;dep[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">STinit</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) f[i][<span class="number">0</span>]=dfn[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)&lt;len;i++)&#123;</span><br><span class="line">f[i][j]=<span class="built_in">mmin</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">x=st[x];y=st[y];</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;k+<span class="number">1</span>)&lt;=(y-x+<span class="number">1</span>)) k++;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mmin</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;r=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(r,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">A.siz=B.siz=tim;</span><br><span class="line"><span class="built_in">STinit</span>(tim);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">A.<span class="built_in">update</span>(st[i],(ll)val[i]*(dep[i]+<span class="number">1</span>));</span><br><span class="line">        A.<span class="built_in">update</span>(st[fath[i]],(ll)-val[i] *(dep[fath[i]]+<span class="number">1</span>));</span><br><span class="line">        B.<span class="built_in">update</span>(st[i],(ll)val[i]);</span><br><span class="line">        B.<span class="built_in">update</span>(st[fath[i]],(ll)-val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> x=in,y=in;<span class="type">int</span> p=in;</span><br><span class="line"><span class="type">int</span> LCA=<span class="built_in">lca</span>(x,y);</span><br><span class="line">A.<span class="built_in">update</span>(st[x],(ll)p*(dep[x]+<span class="number">1</span>));</span><br><span class="line">A.<span class="built_in">update</span>(st[y],(ll)p*(dep[y]+<span class="number">1</span>));</span><br><span class="line">A.<span class="built_in">update</span>(st[LCA],(ll)-p*(dep[LCA]+<span class="number">1</span>));</span><br><span class="line">A.<span class="built_in">update</span>(st[fath[LCA]],(ll)-p*(dep[fath[LCA]]+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">B.<span class="built_in">update</span>(st[x],(ll)p);</span><br><span class="line">B.<span class="built_in">update</span>(st[y],(ll)p);</span><br><span class="line">B.<span class="built_in">update</span>(st[LCA],(ll)-p);</span><br><span class="line">B.<span class="built_in">update</span>(st[fath[LCA]],(ll)-p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">u=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,B.<span class="built_in">query</span>(ed[u])-B.<span class="built_in">query</span>(st[u]<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">u=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,A.<span class="built_in">query</span>(ed[u])-A.<span class="built_in">query</span>(st[u]<span class="number">-1</span>)-(ll)dep[u]*(B.<span class="built_in">query</span>(ed[u])-B.<span class="built_in">query</span>(st[u]<span class="number">-1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-单点修改，子树修改，链上查询"><a href="#4-单点修改，子树修改，链上查询" class="headerlink" title="4.单点修改，子树修改，链上查询"></a>4.单点修改，子树修改，链上查询</h2><p><strong>解法</strong> ：分开考虑两个修改问题，所以先考虑分成修改点权+查询链和修改子树+查询链两个子问题。</p><p><strong>子问题</strong> <strong>1</strong> ：修改点权+查询链可以通过维护每个点到根这条链的点权和来实现。这样，修改点权相当于修改子树，查询链相当于查询点权，然后通过树上差分实现查询任意链的点权和。如对于修改点 $x$ ,则修改  $st[x]+v$ , $[ed[x]+1]-v$，这样，查询x即得到 $[root,x]$ 的路径值。</p><p><strong>子问题</strong> <strong>2</strong> ：修改子树+查询链，通过维护每个点x 到根这条链的点权和 $v[x]$ 。设 $y$ 在 $x$ 子树中，询问点为 $y$ ，$dep[x]$ 表示 $x$ 的深度，对于 $x$ 点权修改，对 $y$ 的影响为 $w<em>(dep[y]-dep[x]+1)=w</em>dep[y] – w<em>(dep[x]-1)$，发现第二项与 $y$ 无关。$-w</em>(dep[x]-1)$ 用一颗树状数组维护，同时与子问题1一起使用。w值以一颗树状数组维护。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> dep[N],st[N],ed[N],fa[N][<span class="number">22</span>];</span><br><span class="line"><span class="type">int</span> n,m,r,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bit</span>&#123;</span><br><span class="line">    ll c[N];<span class="type">int</span> siz;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Bit</span>(<span class="type">int</span> siz=<span class="number">0</span>):<span class="built_in">siz</span>(siz)&#123;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,ll v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span>(k&lt;=siz)&#123;</span><br><span class="line">c[k]+=v;k+=<span class="built_in">lowbit</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)&#123;</span><br><span class="line">ans+=c[k];k-=<span class="built_in">lowbit</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;w1,w2;<span class="comment">//树状数组 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">&#125;g[N*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> nxt[N*<span class="number">2</span>],first[N],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    g[++tot].u=u;g[tot].v=v;</span><br><span class="line">    nxt[tot]=first[u];first[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[u][i]]&gt;=dep[v])u=fa[u][i];</span><br><span class="line">        <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i])&#123;</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">            v=fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    st[u]=++cnt;</span><br><span class="line">    dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line">        fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=first[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="type">int</span> v=g[i].v;</span><br><span class="line">        <span class="keyword">if</span>(f==v)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> w1.<span class="built_in">sum</span>(st[x])+w2.<span class="built_in">sum</span>(st[x])*dep[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> LCA=<span class="built_in">lca</span>(x,y); </span><br><span class="line">   <span class="comment">// cout&lt;&lt;w1.sum(st[x])&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(x)+<span class="built_in">query</span>(y)-<span class="built_in">query</span>(LCA)-<span class="built_in">query</span>(fa[LCA][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r);</span><br><span class="line">    w1.siz=w2.siz=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(r,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        w1.<span class="built_in">add</span>(st[i],(ll)a[i]);</span><br><span class="line">        w1.<span class="built_in">add</span>(ed[i]+<span class="number">1</span>,(ll)-a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> op,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            w1.<span class="built_in">add</span>(st[x],(ll)y);</span><br><span class="line">            w1.<span class="built_in">add</span>(ed[x]+<span class="number">1</span>,(ll)-y);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            w1.<span class="built_in">add</span>(st[x],(ll)-y*(dep[x]<span class="number">-1</span>));</span><br><span class="line">            w1.<span class="built_in">add</span>(ed[x]+<span class="number">1</span>,(ll)y*(dep[x]<span class="number">-1</span>));</span><br><span class="line">            w2.<span class="built_in">add</span>(st[x],(ll)y);</span><br><span class="line">            w2.<span class="built_in">add</span>(ed[x]+<span class="number">1</span>,(ll)-y);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">ask</span>(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu1712 [NOI2016]区间</title>
      <link href="/2023/04/02/luoguP1712/"/>
      <url>/2023/04/02/luoguP1712/</url>
      
        <content type="html"><![CDATA[<h3 id="D2T1-NOI2016-区间"><a href="#D2T1-NOI2016-区间" class="headerlink" title="D2T1 [NOI2016]区间"></a>D2T1 [NOI2016]区间</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>有 $n$ 个闭区间 $[l_i,r_i]$ ，从中选出 $m$ 个区间，使得存在 $x$ ,使得每个被选择的区间都有 $l_i \leq x \leq r_i$。</p><p>选择一个合法的方案，它的花费为最长的区间长度减去最短区间长度，定义区间长度为 $r_i-l_i$。</p><p>求最小的花费，如果没有合法方案则输出 $-1$ 。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>考虑先将区间按照花费从小到大排序，然后用尺取法加线段树维护即可。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> val,id;</span><br><span class="line">&#125;p[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seg</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,len,id;</span><br><span class="line">&#125;a[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(seg a,seg b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len&lt;b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,tot=<span class="number">0</span>,ll[maxn&lt;&lt;<span class="number">1</span>],rr[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,val,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].val+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;qr||r&lt;ql) <span class="keyword">return</span> ; </span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;</span><br><span class="line">t[p].val+=val;t[p].tag+=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//if(ql&lt;=mid) </span></span><br><span class="line"><span class="built_in">update</span>(l,mid,ql,qr,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="comment">//if(qr&gt;mid) </span></span><br><span class="line"><span class="built_in">update</span>(mid+<span class="number">1</span>,r,ql,qr,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].val=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].val,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].l=in;a[i].r=in;</span><br><span class="line">a[i].len=a[i].r-a[i].l;</span><br><span class="line">a[i].id=i;</span><br><span class="line">p[++tot].val=a[i].l;</span><br><span class="line">p[tot].id=i;</span><br><span class="line">p[++tot].val=a[i].r;</span><br><span class="line">p[tot].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+tot,cmp1);</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>].val=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].val!=p[i<span class="number">-1</span>].val) num++;</span><br><span class="line"><span class="keyword">if</span>(!ll[p[i].id]) ll[p[i].id]=num;</span><br><span class="line"><span class="keyword">else</span> rr[p[i].id]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2);</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0x7fffffff</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(t[<span class="number">1</span>].val&lt;m&amp;&amp;r&lt;=n)&#123;</span><br><span class="line">r++;</span><br><span class="line"><span class="type">int</span> idx=a[r].id;</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,num,ll[idx],rr[idx],<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].val&lt;m) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(t[<span class="number">1</span>].val&gt;=m&amp;&amp;l&lt;=n)&#123;</span><br><span class="line">l++;</span><br><span class="line"><span class="type">int</span> idx=a[l].id;</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,num,ll[idx],rr[idx],<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,a[r].len-a[l].len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0x7fffffff</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu2048 超级钢琴</title>
      <link href="/2023/04/02/luoguP2048/"/>
      <url>/2023/04/02/luoguP2048/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2048">传送门</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>有一个长度为 $n$ 的序列，从中选出 $k$ 个长度为 $l \leq k \leq r$ 的不同的区间，使得区间和最大。</p><h3 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h3><p>前缀和+堆+RMQ</p><p>首先前缀和优化区间和。</p><p>以区间最大值为关键字建立大根堆 ，枚举左端点，查找 $[l,r]$ 区间加入堆中。然后循环 $k$ 次，每次取出堆顶，累加贡献，间 $[l,pos-1]$ 和 $[pos+1,r]$ 加入堆， $pos$ 代表 $[l,r]$ 区间中最大值的位置。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,k,l,r,logn[maxn],f[maxn][<span class="number">24</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">logn[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">logn[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++) logn[i]=logn[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[x]&gt;a[y]?x:y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">f[i][j]=<span class="built_in">mmax</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=logn[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mmax</span>(f[l][k],f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> pos,l,r,id;</span><br><span class="line">ll val;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;k,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+l<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> lmax=i+l<span class="number">-1</span>,rmax=i+r<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(rmax&gt;n) rmax=n;</span><br><span class="line"><span class="type">int</span> ppos=<span class="built_in">query</span>(lmax,rmax);</span><br><span class="line">ll tmp=a[ppos]-a[i<span class="number">-1</span>];</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;i,lmax,rmax,ppos,tmp&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">node x=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">ans+=x.val;</span><br><span class="line"><span class="keyword">if</span>(x.l!=x.id)&#123;</span><br><span class="line"><span class="type">int</span> ppos=<span class="built_in">query</span>(x.l,x.id<span class="number">-1</span>);</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;x.pos,x.l,x.id<span class="number">-1</span>,ppos,a[ppos]-a[x.pos<span class="number">-1</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x.r!=x.id)&#123;</span><br><span class="line"><span class="type">int</span> ppos=<span class="built_in">query</span>(x.id+<span class="number">1</span>,x.r);</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;x.pos,x.id+<span class="number">1</span>,x.r,ppos,a[ppos]-a[x.pos<span class="number">-1</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 堆 </tag>
            
            <tag> RMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu2680 [NOIP2015提高组]运输计划</title>
      <link href="/2023/04/02/luoguP2680/"/>
      <url>/2023/04/02/luoguP2680/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="[P2680 [NOIP2015 提高组\] 运输计划 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn">传送门</a>](<a href="https://www.luogu.com.cn/problem/P2680">https://www.luogu.com.cn/problem/P2680</a>) )</p><p>一道感觉不算很难的紫题</p><p>翻译一下</p><p>给定一棵有边权的树，和 $m$ 组点对，需要选择并清零一条边，使得 $m$ 条边之间的最长路最短。</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>最小化最大值，一眼二分。</p><p>然后考虑 $check$ 函数怎么写。很容易想到一个很暴力的解法：暴力枚举清零每一条边。一算时间复杂度肯定接受不了。</p><p>考虑优化。观察到枚举过程可以进行优化。先预处理出每条路径的长度， $check$ 时统计大于 $mid$ 的边有 $k$ 条，找出被经过 $k$ 次的边且边权最大的一条，判断最长路径 $maxlen$ 减去最长边 $maxd$ 是否小于 $mid$.</p><p>综上所述，先用树上差分+$LCA$ 预处理出每条路径的长度，二分答案，树上差分进行 $check$。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>细节都批注在代码里了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">    h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,u,v,t,l,r,maxlen,tim,st[maxn],val[maxn],dfn[maxn&lt;&lt;<span class="number">1</span>],fa[maxn],dep[maxn],dis[maxn],rot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">    dfn[++tim]=x;</span><br><span class="line">    st[x]=tim;</span><br><span class="line">    fa[x]=father;</span><br><span class="line">    dep[x]=d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="type">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=dis[x]+e[i].w;</span><br><span class="line">        val[v]=e[i].w;</span><br><span class="line">        <span class="built_in">dfs</span>(v,x,d+<span class="number">1</span>);</span><br><span class="line">        dfn[++tim]=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次dfs处理出dep,dis等数组，并求出欧拉序用dfn保存，方便用ST表求LCA</span></span><br><span class="line"><span class="type">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[a]&lt;dep[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">STinit</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) f[i][<span class="number">0</span>]=dfn[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;i++)&#123;</span><br><span class="line">            f[i][j]=<span class="built_in">mmin</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//ST表初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=st[x];y=st[y];</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;k+<span class="number">1</span>)&lt;=(y-x+<span class="number">1</span>)) k++;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mmin</span>(f[x][k],f[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;<span class="comment">//求LCA</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">roads</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,Lca,dis;</span><br><span class="line">&#125;rr[maxn];</span><br><span class="line"><span class="type">int</span> s[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="type">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,x);</span><br><span class="line">        s[x]+=s[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//第二个dfs用来求树上差分，算出每条边经过的次数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rr[i].dis&gt;mid)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            s[rr[i].u]++;</span><br><span class="line">            s[rr[i].v]++;</span><br><span class="line">            s[rr[i].Lca]-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(rot,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==res) maxn=maxn&gt;val[i]?maxn:val[i]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxlen-maxn&lt;=mid;</span><br><span class="line">&#125;<span class="comment">//check函数上问有解释</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxt=<span class="number">0</span>; </span><br><span class="line">    n=in;m=in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        u=in;v=in;t=in;</span><br><span class="line">        <span class="built_in">add</span>(u,v,t);</span><br><span class="line">        <span class="built_in">add</span>(v,u,t);</span><br><span class="line">    &#125;</span><br><span class="line">    rot=<span class="built_in">rand</span>()%n+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(rot,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">STinit</span>(tim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        rr[i].u=in;rr[i].v=in;</span><br><span class="line">        rr[i].Lca=<span class="built_in">lca</span>(rr[i].u,rr[i].v);</span><br><span class="line">        rr[i].dis=dis[rr[i].u]+dis[rr[i].v]<span class="number">-2</span>*dis[rr[i].Lca];</span><br><span class="line">        r=r&gt;rr[i].dis?r:rr[i].dis;</span><br><span class="line">    &#125;</span><br><span class="line">    l=maxlen-maxt;maxlen=r;<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu2839 middle</title>
      <link href="/2023/04/02/luoguP2839/"/>
      <url>/2023/04/02/luoguP2839/</url>
      
        <content type="html"><![CDATA[<h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p><a href="https://www.luogu.com.cn/problem/P2839">传送门</a></p><p>丽洁还是很吊的</p><p>这道题我还尚未完全摸透做法，所以仅作为一道好题放在这里</p><p>代码难度不大，但是思维含量极高</p><p>但我是绝对不会说我的 $queryrmax$ 和 $querylaxm$ 函数因为是复制粘贴的所以 debug 了一个小时（逃</p><p><del>说不定几万年后我 AKIOI 之后再回来看就明白了呢</del></p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>首先对于每一个询问可以进行二分答案。</p><p>然后考虑求中位数。一个小套路：==<strong>将所有大于等于 $mid$ 的设为 1，小于的设为 -1，当区间和为 0 的时候就 $mid$ 就是中位数</strong>==。为了选择更大的中位数，所以要尽可能多选择 1。（why？）那么就要维护一个最长子序列。</p><p>对于每一个询问都要开一个线段树，那么肯定选择主席树啦（why？）。每个节点维护一个区间和，区间最大前缀和区间最大后缀。</p><p>code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">anss</span>&#123;</span><br><span class="line"><span class="type">int</span> val,pos;</span><br><span class="line">&#125;s[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(anss a,anss b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,askk[<span class="number">5</span>],lastans=<span class="number">0</span>,a,b,c,d;</span><br><span class="line"><span class="type">int</span> tot=<span class="number">0</span>,sum[maxn&lt;&lt;<span class="number">5</span>],lmax[maxn&lt;&lt;<span class="number">5</span>],rmax[maxn&lt;&lt;<span class="number">5</span>],ls[maxn&lt;&lt;<span class="number">5</span>],rs[maxn&lt;&lt;<span class="number">5</span>],root[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">sum[p]=sum[ls[p]]+sum[rs[p]];</span><br><span class="line">lmax[p]=<span class="built_in">max</span>(lmax[ls[p]],sum[ls[p]]+lmax[rs[p]]);</span><br><span class="line">    rmax[p]=<span class="built_in">max</span>(rmax[rs[p]],sum[rs[p]]+rmax[ls[p]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">rt=++tot;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">sum[rt]=lmax[rt]=rmax[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(ls[rt],l,mid);</span><br><span class="line"><span class="built_in">build</span>(rs[rt],mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">sum[++tot]=sum[rt],ls[tot]=ls[rt],rs[tot]=rs[rt];rt=tot;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">sum[rt]=<span class="number">-1</span>;</span><br><span class="line">lmax[rt]=<span class="built_in">max</span>(<span class="number">0</span>,sum[rt]);</span><br><span class="line">rmax[rt]=<span class="built_in">max</span>(<span class="number">0</span>,sum[rt]);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(ls[rt],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(rs[rt],mid+<span class="number">1</span>,r,x);</span><br><span class="line"><span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querysum</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> sum[p];</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid) ans+=<span class="built_in">querysum</span>(ls[p],l,mid,ql,qr);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;qr) ans+=<span class="built_in">querysum</span>(rs[p],mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querylmax</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> lmax[p];</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid) ans=<span class="built_in">querylmax</span>(ls[p],l,mid,ql,qr);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;qr) ans=<span class="built_in">max</span>(ans,<span class="built_in">querylmax</span>(rs[p],mid+<span class="number">1</span>,r,ql,qr)+<span class="built_in">querysum</span>(ls[p],l,mid,ql,mid));</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryrmax</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> rmax[p];</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid) ans=<span class="built_in">queryrmax</span>(rs[p],mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">queryrmax</span>(ls[p],l,mid,ql,qr)+<span class="built_in">querysum</span>(rs[p],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr));</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">res=<span class="built_in">queryrmax</span>(root[mid],<span class="number">1</span>,n,a,b<span class="number">-1</span>);</span><br><span class="line">res+=<span class="built_in">querylmax</span>(root[mid],<span class="number">1</span>,n,c+<span class="number">1</span>,d);</span><br><span class="line">res+=<span class="built_in">querysum</span>(root[mid],<span class="number">1</span>,n,b,c);</span><br><span class="line"><span class="keyword">return</span> res&gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i].val);</span><br><span class="line">s[i].pos=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="built_in">build</span>(root[<span class="number">1</span>],<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">root[i]=root[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">update</span>(root[i],<span class="number">1</span>,n,s[i<span class="number">-1</span>].pos);<span class="comment">//为什么是s[i-1]而不是s[i]?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;askk[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) askk[i]=(askk[i]+lastans)%n+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(askk,askk+<span class="number">4</span>);</span><br><span class="line">a=askk[<span class="number">0</span>];b=askk[<span class="number">1</span>];c=askk[<span class="number">2</span>];d=askk[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">ans=mid;</span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">lastans=s[ans].val;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lastans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些启发"><a href="#一些启发" class="headerlink" title="一些启发"></a>一些启发</h2><p>对于主席树，因为它的本质就是线段树。对于操作中下传的 $rt$ 或 $p$ ，本质上就相当于线段树中下传节点的操作。只不过线段树可以直接用 $p&lt;&lt;1$ 和 $p&lt;&lt;1|1$ 的操作完成，而主席树要调用以前保存的数据罢辽。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu2894 Hotel</title>
      <link href="/2023/04/02/luoguP2894/"/>
      <url>/2023/04/02/luoguP2894/</url>
      
        <content type="html"><![CDATA[<h3 id="D1T4-Hotel"><a href="#D1T4-Hotel" class="headerlink" title="D1T4 Hotel"></a>D1T4 Hotel</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>对于一个01序列，维护两个值：</p><p><code>1 x</code> 找出长度为 $x$ 的区间变为 1，并输出最左的一个左端点。</p><p><code>2 l r</code> 将 $[l,r]$ 变成 0。</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>对于操作 1，用线段树维护最长子段和，在 <code>query</code> 函数里的查询操作改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].sum&gt;=length) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>,length);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax&gt;=length) <span class="keyword">return</span> mid-t[p&lt;&lt;<span class="number">1</span>].rmax+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于操作 2，区间赋值操作即可</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,lmax,rmax,sum,tag,len;</span><br><span class="line">&#125;;</span><br><span class="line">tree t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,opt,x,d;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].len==t[p&lt;&lt;<span class="number">1</span>].sum) t[p].lmax=t[p&lt;&lt;<span class="number">1</span>].len+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax;</span><br><span class="line"><span class="keyword">else</span> t[p].lmax=t[p&lt;&lt;<span class="number">1</span>].lmax;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum) t[p].rmax=t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">else</span> t[p].rmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax;</span><br><span class="line">t[p].sum=<span class="built_in">max</span>(<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sum,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].tag=<span class="number">0</span>;t[p].sum=t[p].len=t[p].lmax=t[p].rmax=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">1</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>].rmax=<span class="number">0</span>;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">2</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>].rmax=t[p&lt;&lt;<span class="number">1</span>].len;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> opt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) t[p].sum=t[p].lmax=t[p].rmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> t[p].sum=t[p].lmax=t[p].rmax=t[p].len;</span><br><span class="line">t[p].tag=opt;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,opt);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].sum&gt;=length) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>,length);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax&gt;=length) <span class="keyword">return</span> mid-t[p&lt;&lt;<span class="number">1</span>].rmax+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].sum&lt;d)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">query</span>(<span class="number">1</span>,n,<span class="number">1</span>,d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">update</span>(ans,ans+d<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;d);</span><br><span class="line"><span class="built_in">update</span>(x,x+d<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu3225 [HNOI2012]矿场搭建</title>
      <link href="/2023/04/02/luoguP3225/"/>
      <url>/2023/04/02/luoguP3225/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3225">题目</a></p><p>是一道练习 $tarjan$ 的好题。</p><p>首先读题，很容易想到是要先跑一遍 $tarjan$ 求割点。然后想想每一个连通块，分为几种情况：</p><p>如果没有割点，如果其中一个点断开，那么就会分成两个连通块，所以需要增加两个出口，在其中随便选两种就好， 共$C_n^2$种选择。</p><p>如果有一个割点，无论是否断在割点都需要一个出口，在非割点的地方随机选择即可。</p><p>如果有两个及以上割点，无论断在哪里，图都是联通的，所以不需要建立出口。</p><p>这道题有一些小坑，比如某些数据记得清零。记录最大值的变量没清零： $100pts-&gt;90pts$ （悲</p><p>然后是代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[maxn],low[maxn],vis[maxn],flag[maxn],tot=<span class="number">0</span>,rt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> son=<span class="number">0</span>;</span><br><span class="line">dfn[u]=low[u]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(dfn[v]==<span class="number">0</span>)&#123;</span><br><span class="line">son++;</span><br><span class="line"><span class="built_in">tarjan</span>(v,u);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]) flag[u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v!=fa)&#123;</span><br><span class="line">low[u]=<span class="built_in">min</span>(dfn[v],low[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==rt&amp;&amp;son==<span class="number">1</span>)&#123;</span><br><span class="line">flag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m,u,v,n,num,cut,col,casessss=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ans1,ans2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">cnt=<span class="number">0</span>;tot=<span class="number">0</span>;col=<span class="number">0</span>;n=<span class="number">0</span>;</span><br><span class="line">ans1=<span class="number">0</span>;ans2=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="built_in">sizeof</span>(dfn));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="built_in">sizeof</span>(low));</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="built_in">sizeof</span>(flag));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]=col;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(flag[v]&amp;&amp;vis[v]!=col)&#123;</span><br><span class="line">cut++;</span><br><span class="line">vis[v]=col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m))&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">casessss++;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">n=<span class="built_in">max</span>(n,u);</span><br><span class="line">n=<span class="built_in">max</span>(n,v);</span><br><span class="line">&#125;</span><br><span class="line">rt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i]) rt=i,<span class="built_in">tarjan</span>(rt,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]&amp;&amp;!flag[i])&#123;</span><br><span class="line">col++;</span><br><span class="line">num=cut=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="keyword">if</span>(cut==<span class="number">0</span>)&#123;</span><br><span class="line">ans1+=<span class="number">2</span>;</span><br><span class="line">ans2*=(num<span class="number">-1</span>)*num/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cut==<span class="number">1</span>)&#123;</span><br><span class="line">ans1+=<span class="number">1</span>;</span><br><span class="line">ans2*=num;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case %d: %lld %lld\n&quot;</span>,casessss,ans1,ans2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu3313 [SDOI2014]旅行</title>
      <link href="/2023/04/02/luoguP3313/"/>
      <url>/2023/04/02/luoguP3313/</url>
      
        <content type="html"><![CDATA[<h3 id="D4T1-SDOI2014-旅行"><a href="#D4T1-SDOI2014-旅行" class="headerlink" title="D4T1 [SDOI2014]旅行"></a>D4T1 [SDOI2014]旅行</h3><p><a href="https://www.luogu.com.cn/problem/P3313">传送门</a></p><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>给定一颗 $n$ 个节点的树，每个节点都有一个权值和一种颜色。</p><p>有 $q$ 个询问：</p><p><code>CC x c</code> 将节点 $x$ 的颜色改为 $c$</p><p><code>CW x w</code> 将节点 $x$ 的权值改为 $w$</p><p><code>QS x y</code> 询问 $<x,y>$ 路径上与 $x,y$ 颜色相同的点的权值和</p><p><code>QM x y</code> 询问 $<x,y>$ 路径上与 $x,y$ 颜色相同的点的最大权值</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>首先明确肯定用树剖来维护询问和修改。</p><p>对于每一个宗教我们都要开一颗线段树来维护，所以考虑用主席树。</p><p>主席树+树剖，其他的与线段树+树剖一样。</p><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint:"></a>Hint:</h4><ol><li>查询最大最小值得时候记得加上<code>if(qr&lt;l||ql&gt;r) return 0;</code>，不然不晓得飞到哪里去。</li><li>主席树的空间玄学问题。本题的 $maxn$ 为 $1e^5$ ，理论上要开到 $maxn&lt;&lt;7$ 的范围才保险，但是 SLOJ上 $maxn&lt;&lt;6$ 才能过。</li></ol><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll vall;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],c[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>,len=<span class="number">0</span>,root[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,sum;</span><br><span class="line">&#125;t[<span class="number">20000110</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> w,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt=++len;</span><br><span class="line">t[rt].max=<span class="built_in">max</span>(t[rt].max,w);</span><br><span class="line">t[rt].sum=t[rt].sum+w;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">upd</span>(t[rt].l,w,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">upd</span>(t[rt].r,w,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cls</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[rt].max=t[rt].sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">cls</span>(t[rt].l,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cls</span>(t[rt].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">t[rt].max=<span class="built_in">max</span>(t[t[rt].l].max,t[t[rt].r].max);</span><br><span class="line">t[rt].sum=t[t[rt].l].sum+t[t[rt].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr&lt;l||ql&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> t[rt].max;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">querymax</span>(t[rt].l,l,mid,ql,qr),<span class="built_in">querymax</span>(t[rt].r,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querysum</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr&lt;l||ql&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> t[rt].sum;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">querysum</span>(t[rt].l,l,mid,ql,qr)+<span class="built_in">querysum</span>(t[rt].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> reli)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(root[reli],<span class="number">1</span>,n,num[top[x]],num[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(root[reli],<span class="number">1</span>,n,num[y],num[x]));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> reli)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans+=<span class="built_in">querysum</span>(root[reli],<span class="number">1</span>,n,num[top[x]],num[x]);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);<span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">ans+=<span class="built_in">querysum</span>(root[reli],<span class="number">1</span>,n,num[y],num[x]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">w[i]=in;c[i]=in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> x=in,y=in;</span><br><span class="line"><span class="built_in">add</span>(x,y);<span class="built_in">add</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">upd</span>(root[c[i]],w[i],<span class="number">1</span>,n,num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="type">int</span> x=in,y=in;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cls</span>(root[c[x]],<span class="number">1</span>,n,num[x]);</span><br><span class="line"><span class="built_in">upd</span>(root[y],w[x],<span class="number">1</span>,n,num[x]);</span><br><span class="line">c[x]=y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cls</span>(root[c[x]],<span class="number">1</span>,n,num[x]);</span><br><span class="line"><span class="built_in">upd</span>(root[c[x]],y,<span class="number">1</span>,n,num[x]);</span><br><span class="line">w[x]=y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;S&#x27;</span>)&#123;<span class="comment">//cout&lt;&lt;&quot;debug&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getsum</span>(x,y,c[x]));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getmax</span>(x,y,c[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu3569 Cards</title>
      <link href="/2023/04/02/luoguP3569/"/>
      <url>/2023/04/02/luoguP3569/</url>
      
        <content type="html"><![CDATA[<h3 id="D2T3-Cards"><a href="#D2T3-Cards" class="headerlink" title="D2T3 Cards"></a>D2T3 Cards</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>每个卡片有 $a_i$ 和 $b_i$ 两个数。交换 $c_i$ 和 $d_i$ 两个位置上的卡片，判断能否将任意卡片翻转，保证卡片正面的数单调不减。</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>考虑线段树维护区间能否单调不减。合并时判断即可。但是常数巨大还在 $T$ 着呢。</p><p>对于合并的<code>pushup</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//t[p].f[0][0]=t[p].f[1][0]=t[p].f[0][1]=t[p].f[1][1]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">t[p].f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">1</span>;l++)&#123;</span><br><span class="line">t[p].f[i][j]|=t[p&lt;&lt;<span class="number">1</span>].f[i][k]&amp;t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].f[l][j]&amp;(val[mid][k]&lt;=val[mid+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><p>改了一下维度降了一下，时间复杂度要优秀一点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a,b,val[maxn][<span class="number">2</span>],t[maxn&lt;&lt;<span class="number">2</span>][<span class="number">2</span>]; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">0</span>]) t[p][<span class="number">0</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">1</span>]) t[p][<span class="number">0</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> t[p][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> t[p][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">0</span>]) t[p][<span class="number">1</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">1</span>]) t[p][<span class="number">1</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> t[p][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> t[p][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p][<span class="number">0</span>]=val[l][<span class="number">0</span>];</span><br><span class="line">t[p][<span class="number">1</span>]=val[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p][<span class="number">0</span>]=val[l][<span class="number">0</span>];</span><br><span class="line">t[p][<span class="number">1</span>]=val[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i][<span class="number">0</span>]=in;val[i][<span class="number">1</span>]=in;</span><br><span class="line"><span class="keyword">if</span>(val[i][<span class="number">0</span>]&gt;val[i][<span class="number">1</span>]) <span class="built_in">swap</span>(val[i][<span class="number">0</span>],val[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">a=in;b=in;</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">0</span>],val[b][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">1</span>],val[b][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,a);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,b);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>][<span class="number">0</span>]!=<span class="number">-1</span>||t[<span class="number">1</span>][<span class="number">1</span>]!=<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$TLE$ 的代码： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a,b,val[maxn][<span class="number">2</span>]; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//t[p].f[0][0]=t[p].f[1][0]=t[p].f[0][1]=t[p].f[1][1]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">t[p].f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">1</span>;l++)&#123;</span><br><span class="line">t[p].f[i][j]|=t[p&lt;&lt;<span class="number">1</span>].f[i][k]&amp;t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].f[l][j]&amp;(val[mid][k]&lt;=val[mid+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].f[<span class="number">0</span>][<span class="number">0</span>]=t[p].f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].f[<span class="number">0</span>][<span class="number">0</span>]=t[p].f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i][<span class="number">0</span>]=in;val[i][<span class="number">1</span>]=in;</span><br><span class="line"><span class="comment">//if(val[i][0]&lt;val[i][1]) swap(val[i][0],val[i][0]);</span></span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">a=in;b=in;</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">0</span>],val[b][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">1</span>],val[b][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,a);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,b);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].f[<span class="number">0</span>][<span class="number">0</span>]|t[<span class="number">1</span>].f[<span class="number">0</span>][<span class="number">1</span>]|t[<span class="number">1</span>].f[<span class="number">1</span>][<span class="number">0</span>]|t[<span class="number">1</span>].f[<span class="number">1</span>][<span class="number">1</span>]) <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 线段树合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu3852 Kinoman</title>
      <link href="/2023/04/02/luoguP3852/"/>
      <url>/2023/04/02/luoguP3852/</url>
      
        <content type="html"><![CDATA[<h3 id="D1T3-Kinoman"><a href="#D1T3-Kinoman" class="headerlink" title="D1T3 Kinoman"></a>D1T3 Kinoman</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h4><p>共有 $m$ 部电影，第 $i$ 部电影的好看值为 $w_i$。</p><p>在 $n$ 天之中,每天会放映一部电影，第 $i$ 天放映的是第 $f_i$ 部。</p><p>你可以选择 $l,r(1&lt;=l&lt;=r&lt;=n)$，并观看第 $l,l+1,\dots,r$ 天内所有的电影。如果同一部电影你观看多于一次，你会感到无聊，于是无法获得这部电影的好看值。所以你希望最大化观看且仅观看过一次的电影的好看值的总和。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>第 $i$ 部电影对 $[pre_i+1,i]$ 区间有贡献。用线段树维护区间最大值。每次枚举右端点，每次操作时，将 $[pre_i+1,i]$ 加上 $w_i$ ,但是前面的贡献要减去，所以$[pre_{pre_i},pre_i]$ 减去 $w_i$ 。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,f[maxn],nxt[maxn],pre[maxn];</span><br><span class="line">ll ans=<span class="number">0</span>,w[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll tag,sum;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].sum=t[p].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].sum=t[p].sum+x;t[p].tag=t[p].tag+x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line">t[p].sum=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sum,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].sum;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pre[i]=nxt[f[i]],nxt[f[i]]=i;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,t[<span class="number">1</span>].sum);</span><br><span class="line"><span class="built_in">update</span>(pre[i]+<span class="number">1</span>,i,<span class="number">1</span>,w[f[i]]);</span><br><span class="line"><span class="keyword">if</span>(pre[i]) <span class="built_in">update</span>(pre[pre[i]]+<span class="number">1</span>,pre[i],<span class="number">1</span>,-w[f[i]]);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,i,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu4041 [AHOI2014]奇怪的计算器</title>
      <link href="/2023/04/02/luoguP4041/"/>
      <url>/2023/04/02/luoguP4041/</url>
      
        <content type="html"><![CDATA[<h3 id="D2T3-「AHOI2014」奇怪的计算器"><a href="#D2T3-「AHOI2014」奇怪的计算器" class="headerlink" title="D2T3 「AHOI2014」奇怪的计算器"></a>D2T3 「AHOI2014」奇怪的计算器</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption:"></a>Desciption:</h4><p><a href="https://www.luogu.com.cn/problem/P4041">传送门</a></p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>如果我们先抛去 $L,R$ 的限制，很容易联想到这是个线段树的板子。</p><p>然后如果加上限制，考虑如何修改。如果我们将序列排序，操作也不hi影响序列的单调性。所以我们可以二分出一个位置，及恰好到达边界的位置。对于没超过限制的部分直接修改，超过限制区间直接覆盖即可。因为线段树<code>query</code> 操作的本质就就是二分，所以不需要额外二分。对于区间覆盖，维护一个最大最小值即可判断。</p><p>代码中有两个细节需要注意：</p><ol><li>注意几个运算有优先级，覆盖操作&gt;乘法操作&gt;加减和那个奇怪的操作。</li><li>在运算时因为是给整个序列更改，所以直接俄打标记即可。</li></ol><p>但其实对于所有的操作都可以化成一个操作，仍然是<a href="https://ldxkelkel.blog.luogu.org/solution-p4041">idx巨佬的文章</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ask</span>&#123;</span><br><span class="line"><span class="type">int</span> opt,num;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">number</span>&#123;</span><br><span class="line">ll num;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">int</span> n,m,L,R;</span><br><span class="line">ll ans[maxn];</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(number a,number b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num&lt;b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll max,min,add,mul,at,cover;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].mul=<span class="number">1</span>;</span><br><span class="line">t[p].add=t[p].at=t[p].cover=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=a[l].num;</span><br><span class="line">t[p].min=a[l].num;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushadd</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max+=val;</span><br><span class="line">t[p].min+=val;</span><br><span class="line">t[p].add+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushmul</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max*=val;</span><br><span class="line">t[p].min*=val;</span><br><span class="line">t[p].mul*=val;</span><br><span class="line">t[p].add*=val;</span><br><span class="line">t[p].at*=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushat</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max+=a[t[p].r].num*val;</span><br><span class="line">t[p].min+=a[t[p].l].num*val;</span><br><span class="line">t[p].at+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushcover</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max=val;</span><br><span class="line">t[p].min=val;</span><br><span class="line">t[p].cover=val;</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">t[p].at=<span class="number">0</span>;</span><br><span class="line">t[p].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].cover)&#123;</span><br><span class="line"><span class="built_in">pushcover</span>(p&lt;&lt;<span class="number">1</span>,t[p].cover);</span><br><span class="line"><span class="built_in">pushcover</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].cover);</span><br><span class="line">t[p].cover=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].mul!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">pushmul</span>(p&lt;&lt;<span class="number">1</span>,t[p].mul);</span><br><span class="line"><span class="built_in">pushmul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].mul);</span><br><span class="line">t[p].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].add)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>,t[p].add);</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].add);</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].at)&#123;</span><br><span class="line"><span class="built_in">pushat</span>(p&lt;&lt;<span class="number">1</span>,t[p].at);</span><br><span class="line"><span class="built_in">pushat</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].at);</span><br><span class="line">t[p].at=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updmin</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].max&lt;L) <span class="built_in">pushcover</span>(p,L);</span><br><span class="line"><span class="keyword">if</span>(t[p].min&gt;R) <span class="built_in">pushcover</span>(p,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">updmin</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min&lt;L)<span class="built_in">updmin</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updmax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].max&lt;L) <span class="built_in">pushcover</span>(p,L);</span><br><span class="line"><span class="keyword">if</span>(t[p].min&gt;R) <span class="built_in">pushcover</span>(p,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].max&gt;R) <span class="built_in">updmax</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">updmax</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">ans[a[l].id]=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">query</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">query</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;calc1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">n=in;L=in;R=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>) q[i].opt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;-&#x27;</span>) q[i].opt=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>) q[i].opt=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;@&#x27;</span>) q[i].opt=<span class="number">4</span>;</span><br><span class="line">q[i].num=(ll)in;</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i].num=in,a[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">1</span>) <span class="built_in">pushadd</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">2</span>) <span class="built_in">pushadd</span>(<span class="number">1</span>,-q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">3</span>) <span class="built_in">pushmul</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">4</span>) <span class="built_in">pushat</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="built_in">updmax</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">updmin</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">query</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu4180 严格次小生成树</title>
      <link href="/2023/04/02/luoguP4180/"/>
      <url>/2023/04/02/luoguP4180/</url>
      
        <content type="html"><![CDATA[<h3 id="D4T3-严格次小生成树"><a href="#D4T3-严格次小生成树" class="headerlink" title="D4T3 严格次小生成树"></a>D4T3 严格次小生成树</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>给定一张 $n$ 个点 $m$ 条边的无向图，求无向图的严格次小生成树。</p><p>设最小生成树的边权之和为 $val$ ，严格次小生成树指边权之和大于 $val$ 的生成树的最小的一个。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>首先严格次小生成树根最小生成树只有一条边不同。 </p><p>所以我们可以枚举所有边，如果这条边不在生成树上，那么加入生成树后一定会构成一个环，这时候将边上最大值删去即可。但考虑到严格次小生成树的最大边权与当前边权相同，所以还要记录次大值。</p><p>用树剖维护次大值和最大值即可。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line"><span class="type">bool</span> vis;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;e[cnt].vis=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll vall;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],id[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">w[v]=e[i].w;</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fat[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=fat[x]) fat[x]=<span class="built_in">find</span>(fat[x]);</span><br><span class="line"><span class="keyword">return</span> fat[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fat[i]=i;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,fu,fv,u,v;<span class="comment">//for(int i=1;i&lt;=m;i++) cout&lt;&lt;e[i].u&lt;&lt;&quot; &quot;&lt;&lt;e[i].v&lt;&lt;&quot; &quot;&lt;&lt;e[i].w&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=e[i].u,v=e[i].v;</span><br><span class="line">fu=<span class="built_in">find</span>(u),fv=<span class="built_in">find</span>(v);</span><br><span class="line"><span class="comment">//cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;fu&lt;&lt;&quot; &quot;&lt;&lt;fv&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line"><span class="built_in">add</span>(u,v,e[i].w);<span class="built_in">add</span>(v,u,e[i].w);</span><br><span class="line">fat[fu]=fv;</span><br><span class="line">vall+=e[i].w;</span><br><span class="line">++sum;</span><br><span class="line">e[i].vis=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,sec;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].max==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max) t[p].sec=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sec,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sec);</span><br><span class="line"><span class="keyword">else</span> t[p].sec=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=w[dfn[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> -inf;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(key==t[p].max) <span class="keyword">return</span> t[p].sec;</span><br><span class="line"><span class="keyword">return</span> t[p].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>,key);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> <span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,key);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">querymax</span>(l,mid,p&lt;&lt;<span class="number">1</span>,key),<span class="built_in">querymax</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=-inf;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[top[x]],num[x],<span class="number">1</span>,key));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,key));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">e[i].u=in;</span><br><span class="line">e[i].v=in;</span><br><span class="line">e[i].w=in;</span><br><span class="line">&#125;</span><br><span class="line">cnt=m;</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ll ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!e[i].vis) ans=<span class="built_in">min</span>(ans,vall+e[i].w-<span class="built_in">getmax</span>(e[i].u,e[i].v,e[i].w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu4315 月下毛景树</title>
      <link href="/2023/04/02/luoguP4315/"/>
      <url>/2023/04/02/luoguP4315/</url>
      
        <content type="html"><![CDATA[<h3 id="D3T4-月下毛景树"><a href="#D3T4-月下毛景树" class="headerlink" title="D3T4 月下毛景树"></a>D3T4 月下毛景树</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>给定一颗 $n$ 个节点有边权的树，维护以下四个操作：</p><p><code>Change k w</code> 将第 $k$ 条边的边权改为 $w$</p><p><code>Cover u v w</code> 将 $<u,v>$ 路径上的所有边权都改为 $w$</p><p><code>Add u v w</code> 将 $<u,v>$ 路径上的所有边权都加上 $w$</p><p><code>Max u v</code> 询问 $<u,v>$ 路径上边权最大值</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>将边权转化为深度更大的点的点权，然后变成树剖的模板。</p><p>需要注意的是，改变路径上的边权时要去掉 $lca$ 的点权。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x],num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要变为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,u,v;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],id[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">w[v]=e[i].w;</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,add,cov;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=w[dfn[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushcov</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">t[p].max=val;</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">t[p].cov=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushadd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">t[p].max+=val;</span><br><span class="line">t[p].add+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].cov)&#123;</span><br><span class="line"><span class="built_in">pushcov</span>(p&lt;&lt;<span class="number">1</span>,t[p].cov);</span><br><span class="line"><span class="built_in">pushcov</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].cov);</span><br><span class="line">t[p].cov=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].add)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>,t[p].add);</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].add);</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcover</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="built_in">pushcov</span>(p,val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updcover</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updcover</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updadd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p,val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updadd</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updadd</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].max;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(mid&lt;r) ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cover</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updcover</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updcover</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[top[x]],num[x],<span class="number">1</span>));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;P4315_1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;ans.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;<span class="type">int</span> w=in;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span><span class="number">-2</span>;i+=<span class="number">2</span>) id[i/<span class="number">2</span>+<span class="number">1</span>]=dep[e[i].u]&gt;dep[e[i].v]?e[i].u:e[i].v;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> x=in,y=in,z;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;h&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">updcover</span>(num[id[x]],num[id[x]],<span class="number">1</span>,y);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;o&#x27;</span>)&#123;</span><br><span class="line">z=in;</span><br><span class="line"><span class="built_in">cover</span>(x,y,z);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">z=in;</span><br><span class="line"><span class="built_in">modify</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getmax</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>警 钟 敲 得 稀 烂</title>
      <link href="/2023/04/02/oi_warning/"/>
      <url>/2023/04/02/oi_warning/</url>
      
        <content type="html"><![CDATA[<p>简称：OI备忘录</p><hr><p>upd 2023.1.10 </p><p>对于普通莫队，块长设为 <a href="http://www.luogu.com.cn/record/99245948">$\sqrt n$</a> 即可。但对于带修莫队，最好设置为 <a href="https://www.luogu.com.cn/record/99246691">$n^{\frac{2}{3}}$</a> 。效果极为显著,快了将近2s。</p><hr><p>upd 2022.12.24 </p><p>并查集啊并查集，记得初始化啊。今天四个代码三个没有初始化（恼） </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br></pre></td></tr></table></figure><hr><p>upd 2022.11.20 </p><p>不能算是个注意事项，只是觉得 1145141919这个模数挺好的 </p><hr><p>upd 2022.11.12 </p><p>逻辑运算 ‘！’的优先级是高于位运算的，就是这么个小东西我调了一上午（哭）。</p><p>形如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!exp)</span><br></pre></td></tr></table></figure></p><p>最好写作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(exp))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从乡土社会视角看游民文化</title>
      <link href="/2023/04/02/paper1/"/>
      <url>/2023/04/02/paper1/</url>
      
        <content type="html"><![CDATA[<h2 id="从乡土社会视角看游民文化"><a href="#从乡土社会视角看游民文化" class="headerlink" title="从乡土社会视角看游民文化"></a>从乡土社会视角看游民文化</h2><p><strong>摘要：</strong> 游民文化作为脱胎于乡土社会的一种文化形式，也是中国传统文化的一部分，是乡土社会的传统背景下产生的文化。它反映了游民群体独特的心理、思维方式、行为方式和社会关系，以及折射出来的一切活动。文章以费孝通的《乡土中国》中的知识，探究游民文化的产生、发展与特点等等。</p><p><strong>关键词：</strong> 游民；游民文化；乡土社会</p><h3 id="一、游民文化的产生与发展"><a href="#一、游民文化的产生与发展" class="headerlink" title="一、游民文化的产生与发展"></a><strong>一、游民文化的产生与发展</strong></h3><p>​        游民文化诞生自古代的中国乡土社会。三千年以来古代中国乡土社会的是一个按照父系血缘系统组建起来的乡土社会。乡土社会以农业为主，发展小农经济，依土为生的农民们大都一辈子守在一块土地上。乡土社会的不流动性也使得人们以小家族为基本社群，形成以村落为单位的生活劳作。古时候地少人多，每个家族都由自己的耕作范围，但是人口增长、自然灾害、战乱等原因，都可以使得一些人从乡土社会系统中流离出来。这些宣泄外出的人有些可以找到一个新的土地生存，又形成一个个新的家族殖民地；但还有一部分人在各式各样的命运下脱离了主流社会认可的社会秩序，他们游荡于乡镇之间，没有固定的居所，没有稳定的收入，没有确定的职业，久而久之就变成了游民了。</p><p>​        古代封建社会的各个时代都有游民的存在，但在宋朝以前很少有游民进入城市。一是因为城市很少，而且城市规划和建筑布局井然有序。以唐朝的长安城为例，东市和西市是主要的商业区，坊是居民区，市坊分明。同时城市还有如宵禁的政策。二是因为商业手工不发达，就业机会少。作为没有正当职业的游民，在城市中定然难以生存。以上两点使得游民很难有进入城市形成规模的机会。但是随着宋朝以后有更多的商业城市兴起，城市突破时间和空间的限制，有了早市和夜市，逐渐打破了市坊的限制，游民进入城市就会有更多的机会生存。于是在城市中就形成了颇具规模的游民团体。</p><p>​        加以宋之后，教育普及，文化生活丰富，很多的文人加入游民团体，他们所著的通俗文艺作品在某种程度上反映了游民团体的面貌与价值取向。这些作品中冒险生涯和传奇经历可以吸引大量普通百姓的关注，对生活平庸的人们或者满腔壮志的年轻人更是如此。在传统社会中，老百姓的许多认识和价值取向都是从通俗文学中来的，这也使得游民文化在很大程度上已经深入每个中国人的意识之中。 宋代和宋代以后的社会风气是崇文抑武，普通的老百姓对于战争武备很陌生。因此，走投无路的人们一旦铤而走险，·那些具有游民意识的通俗文学作品就能给他们提供思想上、道路上的启发、指导和帮助。因此我们可以看到戏剧化、小说化的独特情景出现在底层人民从事武装反抗统治阶级活动中。如天地会的组织模仿《水浒传》、《三国志演义》等小说；义和团的斗争生活模仿通俗戏曲等等。 可以说。游民、游民文化的发展与传播，与通俗文艺作品的发展与繁荣有着密切的联系。</p><h3 id="二-游民文化中的“类血缘”关系"><a href="#二-游民文化中的“类血缘”关系" class="headerlink" title="二.游民文化中的“类血缘”关系"></a><strong>二.游民文化中的“类血缘”关系</strong></h3><p>​        费孝通先生认为，中国乡土社会的基层结构是一种他所谓的“差序格局”，是一个“一根根私人联系所构成的网络”。每个人都是这个网络中的一个点，整个网络系统对于每个人都可以进行控制和保护。为了维护这种网络的，就需要被一种道德所维系。众多的网络系统构成了乡土社会。于是从宏观来看，中国乡土社会就成了一种礼治社会。</p><p>​        游民是来自中国乡土社会的，但当时没有新的组织形式和独立于礼俗宗法制度之外的思想意识，所以游民只能模仿家族制度建立起一种关系。类比于乡土社会中以血缘关系组建起的家庭，游民们通过一种”类血缘“的关系组建起帮派。由于长时间的处于家族之中，人们的独立性普遍较差，成为游民之后更倾向于与命运志向相同的人结拜为兄弟。结拜分为两种：一种是年纪相仿的结拜称为兄弟；另一种是年纪差距较大称为父子。与“差序格局”相似，这种类血缘的关系也以每个人为中心点向外延伸。</p><p>​        乡土社会中，人们用传统的儒家思想来作为维系私人的道德。为了维系这种网络所组成的帮派，游民们也有自己的道德取向，概括起来可以是来源于墨家思想的义气和平等。</p><p>​        所谓义气，即游民们靠行走江湖的“义字当头”和“仗义疏财”，通过拉帮结派、有福同享、有难共当的兄弟义气组织在一起，称兄结弟，抱团取暖。游民把“义”理解为“交相利”、“兼相爱”，正反映了他们对于低层次的需求的渴望——生理上温饱的需求、安全需求。大部分时候时候游民们所指的“义”和“义气”更为明确，也就是指金钱和物质上的义气。比如“仗义”往往与“疏财”联系在一起，以“义气”闻名的英雄好汉都是慷慨大方、不吝惜金钱的。义气也是游民帮派够聚集在一起的关键因素与核心的信念力量。游民们对义气的理解可能非常初级、粗糙甚至感性、朦胧，这是他们文化水平低下造成的。但这仍不妨碍他们通过义气组建起帮派。“义气相投”就是用来形容这种帮派成员间的强烈的联系纽带。在通俗小说中描述这种关系时，一是用“上应星辰”或者“理想”甚至“幻想”来神秘化，二是用“义气相投”来说明，更加强化了义气的作用效果。如果一旦这种对义气的共同认识产生了偏差，帮派在瞬间就将会分崩离析。</p><p>​        所谓平等，墨子提出兼爱交利的理想社会是以人人平等，有财相分，有利相交，彼此互爱为基本目的的。他认为说在“天”之下，长幼贵贱平等。同样，游民们不重血缘，用“四海之内皆兄弟”实现身份平等，用“大口吃肉，大碗喝酒，大秤分金银”的快意人生去实现经济平等，通过反抗社会，出人头地，来实现政治平等。平等是帮派强大效率和凝聚力的来源。但平等这种抽象概念落实到实施的层面，不平等随处可见，梁山泊的座次、帮派中老大喽啰的阶级划分都是不平等的体现。不过在帮派中首先应该强化的是，即或有不平等，那只是无奈而不是天然正当。其次，例如由于先在资源的而导致的不平等，也应该说明是为了帮派的共同利益而造成的，因为总得有分工。再次，如有分配不平等，那也是按照帮派成员认同原因造成的，是大家一致同意的，而不是靠“强竞争”取得的。在帮派中应该弱化竞争的概念，尤其是强竞争的概念。这样，即使是看起来“虚假”的平等也可以增加团体的凝聚力。</p><h3 id="三-游民文化的特征"><a href="#三-游民文化的特征" class="headerlink" title="三.游民文化的特征"></a><strong>三.游民文化的特征</strong></h3><p>​        虽然游民文化起源于传统的乡土社会，但是其特征于乡土社会大相径庭。总体来说，游民文化的特征就是将中国传统文化的弊端推到了极点。具体来讲，游民文化主要有以下四个特征。</p><p>​        一是反社会性，即反对当时占主流地位的社会秩序。人们要生存，必须按照一定的社会秩序和规范生活，否则连最简单的生产也不能维持，连续不断的冲突耗费掉人们的所有精力。然而，如果社会秩序出现了当时人们公认的极不公正的现象，在忍无可忍的情况下，习惯于遵守社会秩序的人们也会勇敢地起来用暴力的手段反抗和破坏既定的社会秩序，有时在反对旧的社会秩序的同时，还向往或力图建立一个全新的更合理的社会秩序。游民们会从主流社会中脱离出来就足以说明他们不适应主流社会的秩序以及宗法群体大排外性。所以他们形成了游民文化。但他们决不能被称为“游民社会”，这只能称作一个与主流社会不同的隐形社会。他们所反对的是传统的儒家文化，也就是宗法制在意识形态上的表现形式。乡土社会的特征就是保守，甚至退缩。到了明清时期，游民团体的组成越来越复杂，所有脱离主流社会秩序的人都被算入游民团体中，有些人虽然还接受一定的社会礼俗道德的约束，但是仍不服管教、具有明显的反动倾向。</p><p>​        二是反文明性。因为缺乏文明约束，脱离了主流社会所认识的儒家道德取向，在普通人开来游民把野蛮发展到极致。相比于农民们老老实实地靠泥土为生，游民们更倾向于一种非生产性的生产方式为生。游民没有财产权的观念。他们说抢的是“不义之财”，不过是一种自我安慰。游民认为性对他们是一种祸害，阻碍了他们办大事的道路，因而敌视妇女。但由于本能需要，他们一旦有机会就会占有女性，搞“三宫六院”。</p><p>​        三是有主动进攻精神。游民没有家庭的，也没有过多的身外之物，他们与乡土社会中的农民不同，他们没有负担，敢打敢拼，失败了无非烂命一条，但成功了就成了人上人。作为社会的最底层，他们常年受到统治阶级的欺压，于是形成了对平等生活的渴望；但是由于生产力水平低下、文化普及度低等等原因，愚昧野蛮的游民常用暴力和落后的手段来反抗以求平等。</p><p>​        四是帮派性。正如上文所说，游民们通过类血缘的关系组建起只讲敌我，不论是非的帮派。从“桃园三结义”到梁山泊等等都是游民为了生存和发展所组建起来的方式。最早的帮派组建是由于游民们游手好闲、四处流浪产生了对金钱的需求，于是他们抱团取暖形成帮派互帮互助，逐渐形成帮派。即使这样，游民团体更大程度上呈现出来的仍然是一种散乱、无序、随意的特征。</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a><strong>结束语</strong></h3><p>​        王学泰对游民文化有这样的解释：“愚昧―——因为生产力发展水平低下，人的认识能力很低，缺少理性和分析；愚昧―——因为生产力发展水平低下，人的认识能力很低，缺少理性和分析能力;野蛮———因为文化普及程度很，所以想事情、做事情往往凭动物性本能;拉帮结派，党同伐异———这是由宗法群体的排外性所造成的，非我族类，其心必异；注重眼前功利—―—这是由小农生产决定的，眼光只到鼻子尖，不能看得更远。”作为脱胎于乡土文化的一种非主流文化，它为世人展现出了封建农耕时代宗法制度与乡土文化的缺点。游民文化明显具有不理性、不计后果、不看长远、不顾全局、冲动行事的特点，而这些特点也使得游民文化很难完全取代主流文化，登上大雅之堂。但游民文化作为一种历史传统，有着深厚的历史沉淀，我们不能仅仅停留在对它道德谴责的层面上也不能简简单单地将其贴上特定群体的罪恶标签，而要将其视作一种社会发展的客观现象。在揭示其破坏机理的同时要理性审查它的文化实质，才能更有效地化解游民文化给社会带来的副作用。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>龟速乘</title>
      <link href="/2023/04/02/quick_plus/"/>
      <url>/2023/04/02/quick_plus/</url>
      
        <content type="html"><![CDATA[<h2 id="background："><a href="#background：" class="headerlink" title="background："></a>background：</h2><p>当两个 $long long$ 相乘时，很容易爆，但是如果直接写高精度那就亏大发了。</p><h2 id="solution-1："><a href="#solution-1：" class="headerlink" title="solution 1："></a>solution 1：</h2><p>可以使用一种类似快速幂的方法，只是吧乘法操作变成加法操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">quickmul</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%mod;</span><br><span class="line">a=(a+a)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution 2:"></a>solution 2:</h2><p>有一种 $O(1)$ 的做法。</p><p>实际上，并不建议在比赛中使用 $O(1)$ 快速乘，除非题目非常需要卡常，毕竟浮点的精度不能保证。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">llquckmul</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a*b-(ll)((<span class="type">long</span> <span class="type">double</span>)a/mod*b)*mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>关于原理：</p><p>首先，$long long$ 的溢出相当于自动取反和自动取模。而此方法的正确性就是取模的时候模数是一定的。</p><p>这里 $longdouble$ 计算出了 $a <em> b/mod$ ，同时避免了本来可能的一次溢出的 $a</em> b$ ，这次溢出的可能导致计算错误的（因为后面又除法，所以不能保证正确性），显然 $a/mod$ 与 $b$ 相乘任可能导致溢出，但这次溢出无关紧要。因为在取模可以进行除法。</p><p>而转会 $longlong$ 就是为了最后能够取模。</p><p>而由于两边可能有或没有溢出，而溢出时取的模数时一定的，所以我们将它们相减后可能得到的答案一定在64位带符号长整型范围内，并且只可能是正确的余数 remainder 或 remainder—mod 。</p><p>—摘自LDW的学案</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单数论</title>
      <link href="/2023/04/02/simple_number_theory/"/>
      <url>/2023/04/02/simple_number_theory/</url>
      
        <content type="html"><![CDATA[<h3 id="四中不教数论，只好用九中的进度来学习了"><a href="#四中不教数论，只好用九中的进度来学习了" class="headerlink" title="四中不教数论，只好用九中的进度来学习了"></a>四中不教数论，只好用九中的进度来学习了</h3><hr><h2 id="upd-11-18-终于开始教数论力！！！！"><a href="#upd-11-18-终于开始教数论力！！！！" class="headerlink" title="upd 11.18 终于开始教数论力！！！！"></a>upd 11.18 终于开始教数论力！！！！</h2><h2 id="1-数论基础"><a href="#1-数论基础" class="headerlink" title="1.数论基础"></a>1.数论基础</h2><h2 id="2-质数"><a href="#2-质数" class="headerlink" title="2.质数"></a>2.质数</h2><h3 id="2-1-质数的判定"><a href="#2-1-质数的判定" class="headerlink" title="2.1 质数的判定"></a>2.1 质数的判定</h3><p>没什么好说的，幼儿园大班的知识。</p><p>什么？你说你不知道什么是质数？<br><del>赶紧滚回去上幼儿园</del></p><p>kdw听了都要连夜跑过来打你</p><h3 id="2-2-质数筛"><a href="#2-2-质数筛" class="headerlink" title="2.2 质数筛"></a>2.2 质数筛</h3><h4 id="2-2-1-埃氏筛"><a href="#2-2-1-埃氏筛" class="headerlink" title="2.2.1 埃氏筛"></a>2.2.1 埃氏筛</h4><p>也不知道 $when how$ 老师 怎么教的，我一直以为这个叫欧拉筛。</p><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>原理很简单，就是质数的倍数一定不是质数。所以我们就可以这样子求质数。</p><p>时间复杂度大概是 $O(nlog(log n))$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> isprime[maxn];</span><br><span class="line"><span class="built_in">memset</span>(isprime,<span class="number">1</span>,<span class="built_in">sizeof</span>(isprime));<span class="comment">//初始全为1，素数标记为0，合数标记为1</span></span><br><span class="line">isprime[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isprime[i])&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j*i&lt;=maxn;j++) isprime[i*j]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h4 id="2-2-2-欧拉筛"><a href="#2-2-2-欧拉筛" class="headerlink" title="2.2.2 欧拉筛"></a>2.2.2 欧拉筛</h4><p>这才是正统欧拉筛</p><h5 id="2-2-2-1-原理："><a href="#2-2-2-1-原理：" class="headerlink" title="2.2.2.1 原理："></a>2.2.2.1 原理：</h5><p>跟埃氏筛原理相似。但是埃氏筛有个问题：一个数可能被筛了很多次。欧拉筛保证了每个数只被筛一次，从而降低了时间复杂度。</p><p>时间复杂度趋近于 $O(n)$ 。</p><p>先贴代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> isprime[maxn],a[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(isprime,<span class="number">0</span>,<span class="built_in">sizeof</span>(isprime));<span class="comment">//初始全为0，素数标记为1，合数标记为0</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">isprime[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isprime[i]) a[++cnt]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*a[j]&lt;=n;j++)&#123;</span><br><span class="line">        isprime[i*a[j]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%a[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-2-2-欧拉筛的正确性："><a href="#2-2-2-2-欧拉筛的正确性：" class="headerlink" title="2.2.2.2 欧拉筛的正确性："></a>2.2.2.2 欧拉筛的正确性：</h5><p>对于 <code>if(i%a[j]==0) break;</code> 这句话，设 $i=t<em>a[j]$ ,如果没有<code>break</code> 句，那么下一次循环会执行到 $i</em>a[j+1]$,可以化成 $t<em>a[j]</em>a[j+1]$ ，这个数已经是 $a[j]$ 的倍数，已经被筛过了，所以应该 <code>break</code> 。这句话确保了每个数不会被筛第二遍。</p><p>通过下文约数的知识我们可以知道，任意正整数 $n$ 可以写为 $n=\prod_{i = 1}^{s}pi^{ki}$ ( $pi$ 为质数，$ki$ 为 $pi$ 的个数) , 同时筛数的时候表达式为 $i*a[j]$  ,所以不用担心漏筛。</p><h1 id="3-约数"><a href="#3-约数" class="headerlink" title="3.约数"></a>3.约数</h1><p>我们知道任意一个数 $n$ 都可以被表示为<br>$n=\prod_{i = 1}^{s}pi^{ki}$ ( $pi$ 为质数，$ki$ 为 $pi$ 的个数)，然后我们就可以解决绝大部分关于约数的问题。</p><h2 id="3-1-gcd-与-lcm"><a href="#3-1-gcd-与-lcm" class="headerlink" title="3.1 $gcd$ 与 $lcm$"></a>3.1 $gcd$ 与 $lcm$</h2><p>我们幼儿园大班就学过，$gcd(a,b)<em>lcm(a,b)=a</em>b$ ，所以我们只需要用欧几里得求出 $gcd$ 便可以知道 $lcm$ 的值。</p><p> $gcd$ 的 <code>?:</code> 三目运算符 写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了防止爆 $long long$ ,要写成 $lcm(a,b)=a/gcd(a,b)*b$</p><h3 id="3-1-1-二进制算法"><a href="#3-1-1-二进制算法" class="headerlink" title="3.1.1 二进制算法"></a>3.1.1 二进制算法</h3><p>当 $gcd$ 的两个参数过大时，可以考虑通过不断除2来降低常数,这种方法又被称为更相减损术。</p><p>case 1：$a$ 是偶数且 $b$ 是偶数，$gcd(a,b)=gcd(a/2,b/2)$ ;</p><p>case 2：$a$ 是偶数且 $b$ 是奇数，$gcd(a,b)=gcd(a/2,b)$ ;</p><p>case 3：$a$ 是奇数且 $b$ 是偶数，$gcd(a,b)=gcd(a,b/2)$ ;</p><p>case 4：$a$ 是奇数且 $b$ 是奇数，$gcd(a,b)=gcd(a-b,b)$ ;</p><p>由于很好理解，代码就先不贴了</p><hr><p>upd 2022.10.7</p><p>昨天某个初一的小朋友帮我debug的时候看到我的 $gcd$ 并加以嘲笑，说这么写三目一看就是在压行装逼没没有什么用，还是他的非递归写法好。然后不知道为什么把我的约分函数当做 $gcd$ ，并再次痛斥 $gcd$ 不应该是取模吗为什么要除。</p><p>发现自从上了初中接触了玄学竞赛以来，都是喊得 $gcd$ 或者 $lcm$ ，那位小盆友一口一个最大公约数差点把我听蒙了（悲）</p><hr><p>有什么还会回来补充的</p><h2 id="4-欧拉定理"><a href="#4-欧拉定理" class="headerlink" title="4. 欧拉定理"></a>4. 欧拉定理</h2><h3 id="4-1-欧拉函数以及求法"><a href="#4-1-欧拉函数以及求法" class="headerlink" title="4.1 欧拉函数以及求法"></a>4.1 欧拉函数以及求法</h3><h4 id="4-1-1-欧拉函数-varphi-n-的定义"><a href="#4-1-1-欧拉函数-varphi-n-的定义" class="headerlink" title="4.1.1 欧拉函数 $\varphi(n)$ 的定义"></a>4.1.1 欧拉函数 $\varphi(n)$ 的定义</h4><p>$\varphi(n)$ 表示小于 $n$ 且与 $n$ 互质的正整数的个数。</p><p>数学语言表达为为 $\varphi(n)=|S|,S=$ { $m|1\leq m &lt; n,gcd(m,n)=1$}。</p><p>计算式为 $\varphi(n)=n*\prod_{i=1}^{s}\frac{pi-1}{pi}$ ($pi$为$n$的质因数，$s$为$n$的质因数个数)。</p><p>特别的，$\varphi(1)=1$。</p><h4 id="4-1-2-欧拉函数的性质"><a href="#4-1-2-欧拉函数的性质" class="headerlink" title="4.1.2 欧拉函数的性质"></a>4.1.2 欧拉函数的性质</h4><p>1.当 $n$ 为质数时，$\varphi(n)=n-1$</p><p>2.欧拉函数是积性函数，但不是完全积性函数。所以当 $gcd(a,b)=1$ 时, $\varphi(ab)=\varphi(a)\varphi(b)$</p><p>3.当 $n$ 为奇数时，$\varphi(2n)=\varphi(n)$</p><p>4.当 $a$ % $b$ == $0$ 时，$\varphi(ab)=a\varphi(b)$  (这条定理个人没想明白怎么证的)</p><p>5.当 $p$ 为质数时，$\varphi(p^k)=p^k-p^{k-1}$</p><p><a href="https://blog.csdn.net/bcr_233/article/details/92227105">一些证明</a></p><h3 id="4-1-3-欧拉函数的计算方法"><a href="#4-1-3-欧拉函数的计算方法" class="headerlink" title="4.1.3 欧拉函数的计算方法"></a>4.1.3 欧拉函数的计算方法</h3><h4 id="4-1-3-1-根据展开式，可以写出最简单的代码用来求单个数的-varphi-代码来源于oi-wiki"><a href="#4-1-3-1-根据展开式，可以写出最简单的代码用来求单个数的-varphi-代码来源于oi-wiki" class="headerlink" title="4.1.3.1 根据展开式，可以写出最简单的代码用来求单个数的  $\varphi$ (代码来源于oi-wiki)"></a>4.1.3.1 根据展开式，可以写出最简单的代码用来求单个数的  $\varphi$ (代码来源于oi-wiki)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">      ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-3-2-筛法求欧拉函数"><a href="#4-1-3-2-筛法求欧拉函数" class="headerlink" title="4.1.3.2 筛法求欧拉函数"></a>4.1.3.2 筛法求欧拉函数</h5><p>我们可以通过欧拉筛同时求出欧拉函数值</p><p>需要用到的三个性质：</p><p>①当 $i$ 为质数时，$\varphi(i)=i-1$</p><p>②当 $a$ % $b$ == $0$ 时，$\varphi(ab)=a\varphi(b)$</p><p>③当 $a$ % $b \neq 0$ 时，$\varphi(ab)=\varphi(a)\varphi(b)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prime[maxn],phi[maxn],p[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getphi</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[i])&#123;</span><br><span class="line">p[++cnt]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*p[j]&lt;maxn;j++)&#123;</span><br><span class="line">prime[i*p[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!(i%p[j]))&#123;</span><br><span class="line">phi[i*p[j]]=phi[i]*p[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*p[j]]=phi[i]*phi[p[j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-欧拉定理-amp-费马小定理"><a href="#4-2-欧拉定理-amp-费马小定理" class="headerlink" title="4.2 欧拉定理&amp;费马小定理"></a>4.2 欧拉定理&amp;费马小定理</h3><h4 id="4-2-1-欧拉定理："><a href="#4-2-1-欧拉定理：" class="headerlink" title="4.2.1 欧拉定理："></a>4.2.1 欧拉定理：</h4><p>$a^{\varphi(n)} \equiv 1 \pmod n $ ,满足 $gcd(a,n)=1$ 。</p><h4 id="4-2-2-费马小定理"><a href="#4-2-2-费马小定理" class="headerlink" title="4.2.2 费马小定理"></a>4.2.2 费马小定理</h4><p>特别地，在 $n$ 为素数的时候满足 $a^{n-1} \equiv 1 \pmod n$,为费马小定理</p><h4 id="4-2-3-扩展欧拉定理"><a href="#4-2-3-扩展欧拉定理" class="headerlink" title="4.2.3 扩展欧拉定理"></a>4.2.3 扩展欧拉定理</h4><p>用来解决 $a^b$ % $m$ 过大的问题，进行降幂操作</p><script type="math/tex; mode=display">a^b \equiv\begin{cases}a^{b \text{ mod } \varphi(p)},\quad gcd(a,p)=1\\a^b ,\quad gcd(a,p) \neq 1 , b< \varphi(p) \text{  (mod p) }\\a^{b \text{ mod } \varphi(p) +\varphi(p)},\quad gcd(a,p) \neq 1,b \geq \varphi(p)\\\end{cases}</script><p>其中最重要的一条：</p><script type="math/tex; mode=display">\forall a,m\text{ 若 }gcd(a,m)=1 \text{ , } a^b \equiv a^{b \text{ mod }\varphi(m)+\varphi(m) } (\text{ mod } m)</script><p>若 $m$ 是质数时，可以直接使用费马小定理。</p><hr><p>比如这道题：<a href="https://www.luogu.com.cn/problem/P4139">Luogu P4139 上帝与集合的正确用法</a> 是一道模板题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> phi[maxn],prime[maxn],p[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!prime[i])&#123;</span><br><span class="line">p[++cnt]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*p[j]&lt;maxn;j++)&#123;</span><br><span class="line">prime[i*p[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*p[j]]=phi[i]*p[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> phi[i*p[j]]=phi[i]*(p[j]<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%mod;</span><br><span class="line">a=(a+a)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qukpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=<span class="built_in">mul</span>(res,a,mod);</span><br><span class="line">a=<span class="built_in">mul</span>(a,a,mod);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">qukpow</span>(<span class="number">2</span>,<span class="built_in">solve</span>(phi[p])+phi[p],p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t,pp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;pp;</span><br><span class="line">cout&lt;&lt;<span class="built_in">solve</span>(pp)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是听说用展开式求 $\varphi$ 在加个记搜比线性筛更快。</p><h2 id="5-欧几里得"><a href="#5-欧几里得" class="headerlink" title="5.欧几里得"></a>5.欧几里得</h2><h3 id="5-1-欧几里得算法"><a href="#5-1-欧几里得算法" class="headerlink" title="5.1 欧几里得算法"></a>5.1 欧几里得算法</h3><p>主要用于求解两个数 $a$ 和 $b$ 的最大公约数,我们不妨设 $(a&gt;b)$ ,其公式为 $gcd(a,b)=gcd(b,a \text{ mod } b)=gcd(a \text{ mod } b,b \text{ mod } (a \text{ mod } b))= \ldots =gcd(x,0)$ ,这里的 $x$ 即为最大公约数</p><p>可用于求上文 约数 章节所提到的 $gcd$ 和 $lcm$ 。 </p><p>注意：欧几里得算法的一点要求是 $a&gt;b$ 。</p><h3 id="5-2裴蜀定理"><a href="#5-2裴蜀定理" class="headerlink" title="5.2裴蜀定理"></a>5.2裴蜀定理</h3><p>又称贝祖定理。</p><p><strong>定义</strong>：对于整数 $a$ 和 $b$ 以及它们的 $gcd(a,b)=d$ ,可以得出存在任意的整数 $x$ 和 $y$ ,使得 $ax+by=m$ , $m$ 一定是 $d$ 的整数倍，且存在 $ax+by=d$ 。当 $gcd(a,b)=1$ 时，存在唯一的一组 $ax+by=1$。</p><p>不想写证明了。</p><h3 id="5-3扩展欧几里得算法（扩欧）"><a href="#5-3扩展欧几里得算法（扩欧）" class="headerlink" title="5.3扩展欧几里得算法（扩欧）"></a>5.3扩展欧几里得算法（扩欧）</h3><p>应用1：此算法用来求解 $ax+by=gcd(a,b)$ 的一组可行解。</p><p>根据裴蜀定理，该方程一定有解。</p><p>①：$ax_0+by_0=gcd(a,b)$</p><p>②：$bx_1+(a \text{ mod } b)y_1=gcd(b,a \text{ mod } b)$</p><p>$\because gcd(a,b)=gcd(b,a \text{ mod } b)$ </p><p>$\therefore ax_0+by_0=bx_1+(a \text{ mod } b)y_1$  ③</p><p>$a \text{ mod }b=a- \lfloor a/b \rfloor* b$ ④</p><p>将④代入③中可得：</p><p>$ax_0+by_0=bx_1+(a-\lfloor a/b\rfloor*b)y_1$</p><p>解得：</p><p>$x_0=y_1,y_0=x_1-\lfloor a/b \rfloor *y_1$</p><p>不难发现，$x_0,y_0$ 的 值由$x_1,y_1$ 的值迭代而来。</p><p>所以可以通过递归的方式求出可行解</p><p>对于递归出口 , 当 $ax+by=gcd(a,0), ax+ by=a$ ,此时的子解为 $x=1,y=0$</p><p>用代码实现就是：</p>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)&#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, x, y);</span><br><span class="line">    <span class="type">int</span> temp=y;    </span><br><span class="line">    y=x-(a/b)*y;</span><br><span class="line">    x=temp;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设 $x_1$ , $y_1$ , $x_2$ , $y_2$ 是方程的两组解，则：</p><p>$ax_1+by_1=c$</p><p>$ax_2+by_2=c$</p><p>两式子相减得 $a(x_1-x_2)+b(y_1-y_2)=0$ </p><p>令 $d=gcd(a,b)$</p><p>有：$(a/d)(x_1-x_2)+(b/d)(y_1-y_2)=0$</p><p>此时，$a/d$ 与 $b/d$ 互质，则 $x_1-x_2=(b/d)(y_2-y_1)/(a/d)=k*(b/d)$</p><p>则通解可以表示为为：$x=x_0+k*(b/d)$ 。</p><p>所以，最小整数解 $x=(x_0 \text{ mod }(b/d)+b/d)\text{ mod }(b/d)$</p><p>其中 $x_0$ 是任意解</p><h2 id="6-逆元"><a href="#6-逆元" class="headerlink" title="6.逆元"></a>6.逆元</h2><h3 id="6-1-逆元的定义"><a href="#6-1-逆元的定义" class="headerlink" title="6.1 逆元的定义"></a>6.1 逆元的定义</h3><p>即线性同余方程 $ax \equiv 1 (\text{ mod } b)$ 的一组解，称 $x$ 为 $a \mod b$  的逆元，记作 $a^{-1}$ 。</p><h3 id="6-2-逆元的计算"><a href="#6-2-逆元的计算" class="headerlink" title="6.2 逆元的计算"></a>6.2 逆元的计算</h3><p><strong>方法1：</strong></p><p>对于线性同余方程 $ax \equiv 1 (\text{ mod } b)$ </p><p>我们可以转化为 $ax-1=b*(-y)$ </p><p>移项得 $ax+by=1$ ，即可用扩欧求解。</p><p><strong>方法二：</strong></p><p>根据费马小定理，原方程可以转化为 $ax \equiv a^{b-1}(\mod b)$</p><p>得 $x=a^{b-2}(\mod b)$</p><p>于是可以用快速幂求解，但需要保证 $b$ 是一个质数。</p><p><strong>方法三：</strong> 线性递推求逆元</p><p>很明显，1的逆元为1</p><p>对于 $p$ 的逆元 $p^{-1}$ ，设 $p=i*k+j$ ，其中 $0\leq i&lt;p,j&lt;i$ 。</p><p>那么转化为同余形式，就有 $i*k+j \equiv 0 (mod\text{ } p)$，</p><p>两边同乘 $i^{-1}<em>j^{-1}$ ，得 $k</em>j^{-1}+i^{-1}=0 (mod \text{ }p)$</p><p>移项，得 $i^{-1} \equiv -k*j^{-1} (mod \text{ }p)$</p><p>因为 $k=\lfloor \frac{p}{i} \rfloor$ ，所以 $i^{-1} \equiv -\lfloor \frac{p}{i} \rfloor*j^{-1} (mod \text{ }p)$</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">inv[i]=(-p/i*inv[p%i]%p+p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆元的使用"><a href="#逆元的使用" class="headerlink" title="逆元的使用"></a>逆元的使用</h3><p>逆元的一个重要用途是用于除法的取模。即 $a/b \mod p$ 当 $a$ 和 $b$ 过大时，容易导致溢出导致取模出错。</p><p>可以将其转化为 $a*b^{-1} \mod p$ 进行计算。</p><h2 id="7-同余方程组"><a href="#7-同余方程组" class="headerlink" title="7.同余方程组"></a>7.同余方程组</h2><p>即求以下同余方程组的解</p><script type="math/tex; mode=display">y=\begin{cases}x \equiv a_1 \text{ }(mod \text{ }m_1)\\x \equiv a_2 \text{ }(mod \text{ }m_2)\\x \equiv a_3 \text{ }(mod \text{ }m_3)\\\dots\\x \equiv a_r \text{ }(mod \text{ }m_r)\end{cases}</script><h3 id="7-1-中国剩余定理（CRT）"><a href="#7-1-中国剩余定理（CRT）" class="headerlink" title="7.1 中国剩余定理（CRT）"></a>7.1 中国剩余定理（CRT）</h3><p>设 $m_1,m_2,\dots,m_i$ 是两两互质的正整数，则同余方程有整数解，且模 $M=m_1<em>m_2</em>\dots*m_r$唯一，解为 $x \equiv \sum_{i=1}^ra_iM_iM_i^{-1}\text{ }(mod \text{ }M)$ ，其中 $M_i=M/m_i$，$M_i^{-1}$ 为 $M_i$ 模 $m_i$ 的逆元。</p><p><del>因为这玩意实在太难证就不证了吧，就当结论背好了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;</span><br><span class="line">x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">ll temp=x;</span><br><span class="line">x=y;</span><br><span class="line">y=temp-a/b*y;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">ll n,a[<span class="number">15</span>],m[<span class="number">15</span>],M=<span class="number">1</span>,ans=<span class="number">0</span>,mi,mi_1;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;m[i]&gt;&gt;a[i];</span><br><span class="line">M*=m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ll x,y;</span><br><span class="line">mi=M/m[i];</span><br><span class="line">ll d=<span class="built_in">exgcd</span>(mi,m[i],mi_1,y);</span><br><span class="line">ans=(ans+a[i]*mi*mi_1)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;<span class="number">0</span>) ans+=M;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-扩展中国剩余定理（EXCRT）"><a href="#7-2-扩展中国剩余定理（EXCRT）" class="headerlink" title="7.2 扩展中国剩余定理（EXCRT）"></a>7.2 扩展中国剩余定理（EXCRT）</h3><p>又叫迭代法。</p><p>顾名思义，每次合并两个同余式。</p><p><strong>计算推导：</strong></p><script type="math/tex; mode=display">\begin{cases}x \equiv a_1 \text{ }(mod \text{ }m_1)\\x \equiv a_2 \text{ }(mod \text{ }m_2)\\\end{cases}</script><script type="math/tex; mode=display">\begin{cases}x = a_1+k_1m_1(1)\\x = a_2+k_2m_2(2)\\\end{cases}</script><script type="math/tex; mode=display">(1)-(2):k_1m_1-k_2m_2=a_2-a_1(3)</script><p>$(3)$ 式可以用扩欧求出 $k_1$,同时判断是否有解，将 $k_1$ 带入$(1)$ ，得出 $x’=a_1+k_1m_1$</p><p>可以得出，方程组的通解为 $x=x’+k*lcm(m_1,m_2)$ ，$x \equiv x’\text{ } (mod \text{ }p)$。</p><p>再以此方式迭代即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;</span><br><span class="line">x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">ll d=<span class="built_in">exgcd</span>(b,a%b,x,y),temp;</span><br><span class="line">temp=x;</span><br><span class="line">x=y;</span><br><span class="line">y=temp-a/b*y;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%mod;</span><br><span class="line">a=(a+a)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll k,n,a,b,d,lcm,now,x,y;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">lcm=a;now=b;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">b=(b-now%a+a)%a;</span><br><span class="line">d=<span class="built_in">exgcd</span>(lcm,a,x,y); </span><br><span class="line"><span class="keyword">if</span>(b%d)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">k=<span class="built_in">mul</span>(x,b/d,a);</span><br><span class="line">now+=lcm*k;</span><br><span class="line">lcm=lcm/d*a;</span><br><span class="line">now=(now%lcm+lcm)%lcm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;now&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-结语"><a href="#8-结语" class="headerlink" title="8 结语"></a>8 结语</h2><p>2023.1.15 终于更完这个史前巨坑了。纪念。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多叉树转二叉树</title>
      <link href="/2023/04/02/tree_transform/"/>
      <url>/2023/04/02/tree_transform/</url>
      
        <content type="html"><![CDATA[<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>在解决很多树形问题的时候会遇到多叉树，但是多叉树在很多时候解决起来很麻烦。根据数学家烧水的思想可以将多叉树转化为二叉树求解。同时该方法也可以将森林转化为一棵二叉树，非常实用。</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>把多叉树的第一个儿子放在左儿子，其他兄弟放在右儿子，称为“左兄弟右儿子”。</p><p>至于代码实现，输入一条边 $(u,v)$ ，表示 $v$ 是  $u$ 的孩子，如果 $u$ 的左儿子为空，就将 $v$ 放在左儿子，否则循环知道右儿子不为空放进去。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">    <span class="keyword">if</span>(ch[v][<span class="number">0</span>]==<span class="number">0</span>) ch[v][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp=ch[v][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(ch[temp][<span class="number">1</span>]!=<span class="number">0</span>) temp=ch[temp][<span class="number">1</span>];     </span><br><span class="line">        ch[temp][<span class="number">1</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    c[i]=w;</span><br><span class="line">    in[ch[i][<span class="number">0</span>]]++;</span><br><span class="line">    in[ch[i][<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>但是当 $n$ 的范围很大时，这个预处理的时间复杂度也会增大，很不划算。所以对于这种还有一个优化操作，我们还可以用类似储存链式前向星的方法，让父亲的左孩子为读入的孩子，然后这个孩子的右孩子是父亲的之前第一个左孩子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b     <span class="comment">//a是b的孩子</span></span><br><span class="line">    tree[a].r=tree[b].l;    <span class="comment">//把b的左孩子给a的右孩子</span></span><br><span class="line">    tree[b].l=a;     <span class="comment">//把a给b的左孩子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>但是吧，我对这种方法还是没有研究得很透</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构dp专练（汇总版）</title>
      <link href="/2023/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84dp%E4%B8%93%E7%BB%83/"/>
      <url>/2023/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84dp%E4%B8%93%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>2.6~2.9 数据结构与 $dp$ 专练，每天4题，难度不小，深蓝到深紫之间的难度。</p><p>绝大部分题来自bzoj，洛谷上只收录了一小部分。</p><ul><li>D1T1 与或 ：线段树维护二进制操作</li><li>D1T2 排队计划：推导性质+线段树维护</li><li>D1T3 <a href="https://www.luogu.com.cn/problem/p3582">Kinoman</a>： 权值线段树</li><li>D1T4 <a href="https://www.luogu.com.cn/problem/p2894">Hotel</a>：线段树+最长子序列</li><li>D2T1 <a href="https://www.luogu.com.cn/problem/p1712">[NOI2016]区间</a>：双指针+线段树</li><li>D2T2 跳伞求生：贪心/线段树模拟费用流</li><li>D2T3 <a href="https://www.luogu.com.cn/problem/p3569">Cards</a>：线段树合并</li><li>D2T4 <a href="https://www.luogu.com.cn/problem/p4041">[AHOI2014/JSOI2014]奇怪的计算器</a>：线段树</li><li>D3T1 层流：树剖+树上染色</li><li>D3T2 Graph：树剖/dfs序+树状数组</li><li>D3T3 three：长链剖分维护 $dp$</li><li>D3T4 <a href="https://www.luogu.com.cn/problem/p4315">月下“毛景树”</a>：树剖裸题</li><li>D4T1 <a href="https://www.luogu.com.cn/problem/P3313">[SDOI2014]旅行</a>：树剖+主席树</li><li>D4T2 <a href="https://www.luogu.com.cn/problem/P1973">[NOI2011]嘉年华</a>：单调队列优化 $dp$</li><li>D4T3 <a href="https://www.luogu.com.cn/problem/P4180">[BJWC2010]严格次小生成树</a>：树剖+最小生成树</li><li>D4T4 路径的交：dfs序</li></ul><h2 id="Day1-线段树专题（确信"><a href="#Day1-线段树专题（确信" class="headerlink" title="Day1 线段树专题（确信"></a>Day1 线段树专题（确信</h2><h3 id="D1T1-与或"><a href="#D1T1-与或" class="headerlink" title="D1T1 与或"></a>D1T1 与或</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>对于一个长度为 $n$ 的序列，维护一下三个信息：</p><p><code>1 l r v</code> ：将 $a_i,l\leq i \leq r$ 变为 $a_i \text{ and } v$</p><p><code>2 l r v</code> ：将 $a_i,l\leq i \leq r$ 变为 $a_i \text{ or } v$</p><p><code>3 l r</code> ：求 $a_i,l\leq i \leq r$ 的最大值</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>不会（逃</p><p>正解参考<a href="https://blog.csdn.net/dreaming__ldx/article/details/80850136?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167575663516782428622687%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167575663516782428622687&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-80850136-null-null.142^v73^control,201^v4^add_ask,239^v1^control&amp;utm_term=%E4%B8%8E%E6%88%96%E7%BA%BF%E6%AE%B5%E6%A0%91&amp;spm=1018.2226.3001.4187">idx巨佬的文章</a></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><p>这里使用的是暴力解法，可以过掉随机数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">ll l,r;</span><br><span class="line">ll max,min,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll n,q,a[maxn],opt,l,r,x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].max=t[p].min=<span class="number">0</span>;t[p].tag=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=t[p].min=t[p].tag=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="comment">//t[p].tag=t[p].max;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag!=<span class="number">-1</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].max=t[p&lt;&lt;<span class="number">1</span>].min=t[p&lt;&lt;<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updand</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r&amp;&amp;t[p].max==t[p].min)&#123;</span><br><span class="line">t[p].max&amp;=x;t[p].min&amp;=x;</span><br><span class="line">t[p].tag=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updand</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updand</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updor</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r&amp;&amp;t[p].max==t[p].min)&#123;</span><br><span class="line">t[p].max|=x;t[p].min|=x;</span><br><span class="line">t[p].tag=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updor</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updor</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].max;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line">ll mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;q=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">opt=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">l=in;r=in;x=in;</span><br><span class="line"><span class="built_in">updand</span>(l,r,<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">l=in;r=in;x=in;</span><br><span class="line"><span class="built_in">updor</span>(l,r,<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">l=in;r=in;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(l,r,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D1T2-排队计划"><a href="#D1T2-排队计划" class="headerlink" title="D1T2 排队计划"></a>D1T2 排队计划</h3><h4 id="Description：-1"><a href="#Description：-1" class="headerlink" title="Description："></a>Description：</h4><p>对于一个序列 $h$，有 $m$ 次操作，每次操作 $j$ ，将 $p_j\le i\le n$中，小于等于第 $h_j$ 的元素取出并重排后插入。求每次操作后的逆序对的数量。</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p><del>一开始以为是个三维偏序</del></p><p>首先考虑暴力解法。对于每次询问重新求逆序对即可，预计时间复杂度为 $O(mnlogn)$ ，而且常数巨大。</p><p>然后考虑优化。可以观察到这次询问的答案可以从上一次的答案更新。易得对于每个取出的数 $h_i$ ，减少的逆序对的数量就是 $h_i$ 后比它小的数的个数。因为每次操作后序列都趋向有序，所以逆序对的数量会减少，单点暴力修改的时间复杂度是有保证的。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,h[maxn],hsh[maxn],tot=<span class="number">0</span>,x;</span><br><span class="line">ll val[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> pos,val;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">ll t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=tot)&#123;</span><br><span class="line">t[x]+=val;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;bit;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(a.val==b.val) return a.pos&lt;b.pos;</span></span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,pos;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hsh[t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].pos]&lt;=hsh[t[p&lt;&lt;<span class="number">1</span>].pos]) t[p].pos=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].pos;</span><br><span class="line">    <span class="keyword">else</span> t[p].pos=t[p&lt;&lt;<span class="number">1</span>].pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].pos=l;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">hsh[l]=inf;</span><br><span class="line">val[l]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t);</span><br><span class="line"><span class="built_in">pushup</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hsh[y]&lt;=hsh[x]) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].pos;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!ans) ans=t; </span><br><span class="line"><span class="keyword">else</span> ans=<span class="built_in">pd</span>(ans,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].pos=i;a[i].val=in;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].val!=a[i<span class="number">-1</span>].val) hsh[a[i].pos]=++tot;</span><br><span class="line"><span class="keyword">else</span> hsh[a[i].pos]=tot;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">bit.<span class="built_in">update</span>(hsh[i],<span class="number">1</span>);</span><br><span class="line">val[i]=bit.<span class="built_in">query</span>(hsh[i]<span class="number">-1</span>);</span><br><span class="line">ans+=val[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=in;</span><br><span class="line"><span class="keyword">while</span>(hsh[x]!=inf)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">query</span>(x,n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;#debug &quot;&lt;&lt;t&lt;&lt;endl;</span></span><br><span class="line">ans-=val[t];</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,t);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D1T3-Kinoman"><a href="#D1T3-Kinoman" class="headerlink" title="D1T3 Kinoman"></a>D1T3 Kinoman</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h4><p>共有 $m$ 部电影，第 $i$ 部电影的好看值为 $w_i$。</p><p>在 $n$ 天之中,每天会放映一部电影，第 $i$ 天放映的是第 $f_i$ 部。</p><p>你可以选择 $l,r(1&lt;=l&lt;=r&lt;=n)$，并观看第 $l,l+1,\dots,r$ 天内所有的电影。如果同一部电影你观看多于一次，你会感到无聊，于是无法获得这部电影的好看值。所以你希望最大化观看且仅观看过一次的电影的好看值的总和。</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><p>第 $i$ 部电影对 $[pre_i+1,i]$ 区间有贡献。用线段树维护区间最大值。每次枚举右端点，每次操作时，将 $[pre_i+1,i]$ 加上 $w_i$ ,但是前面的贡献要减去，所以$[pre_{pre_i},pre_i]$ 减去 $w_i$ 。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,f[maxn],nxt[maxn],pre[maxn];</span><br><span class="line">ll ans=<span class="number">0</span>,w[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll tag,sum;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].sum=t[p].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].sum=t[p].sum+x;t[p].tag=t[p].tag+x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line">t[p].sum=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sum,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].sum;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res=<span class="built_in">max</span>(<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pre[i]=nxt[f[i]],nxt[f[i]]=i;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,t[<span class="number">1</span>].sum);</span><br><span class="line"><span class="built_in">update</span>(pre[i]+<span class="number">1</span>,i,<span class="number">1</span>,w[f[i]]);</span><br><span class="line"><span class="keyword">if</span>(pre[i]) <span class="built_in">update</span>(pre[pre[i]]+<span class="number">1</span>,pre[i],<span class="number">1</span>,-w[f[i]]);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,i,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D1T4-Hotel"><a href="#D1T4-Hotel" class="headerlink" title="D1T4 Hotel"></a>D1T4 Hotel</h3><h4 id="Description：-2"><a href="#Description：-2" class="headerlink" title="Description："></a>Description：</h4><p>对于一个01序列，维护两个值：</p><p><code>1 x</code> 找出长度为 $x$ 的区间变为 1，并输出最左的一个左端点。</p><p><code>2 l r</code> 将 $[l,r]$ 变成 0。</p><h4 id="Solution：-1"><a href="#Solution：-1" class="headerlink" title="Solution："></a>Solution：</h4><p>对于操作 1，用线段树维护最长子段和，在 <code>query</code> 函数里的查询操作改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].sum&gt;=length) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>,length);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax&gt;=length) <span class="keyword">return</span> mid-t[p&lt;&lt;<span class="number">1</span>].rmax+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于操作 2，区间赋值操作即可</p><h4 id="Code：-1"><a href="#Code：-1" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,lmax,rmax,sum,tag,len;</span><br><span class="line">&#125;;</span><br><span class="line">tree t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,opt,x,d;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].len==t[p&lt;&lt;<span class="number">1</span>].sum) t[p].lmax=t[p&lt;&lt;<span class="number">1</span>].len+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax;</span><br><span class="line"><span class="keyword">else</span> t[p].lmax=t[p&lt;&lt;<span class="number">1</span>].lmax;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum) t[p].rmax=t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">else</span> t[p].rmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax;</span><br><span class="line">t[p].sum=<span class="built_in">max</span>(<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sum,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].tag=<span class="number">0</span>;t[p].sum=t[p].len=t[p].lmax=t[p].rmax=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">1</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>].rmax=<span class="number">0</span>;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag==<span class="number">2</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>].rmax=t[p&lt;&lt;<span class="number">1</span>].len;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> opt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) t[p].sum=t[p].lmax=t[p].rmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> t[p].sum=t[p].lmax=t[p].rmax=t[p].len;</span><br><span class="line">t[p].tag=opt;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,opt);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].sum&gt;=length) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>,length);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rmax+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax&gt;=length) <span class="keyword">return</span> mid-t[p&lt;&lt;<span class="number">1</span>].rmax+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].sum&lt;d)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">query</span>(<span class="number">1</span>,n,<span class="number">1</span>,d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">update</span>(ans,ans+d<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;d);</span><br><span class="line"><span class="built_in">update</span>(x,x+d<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Day2-仍然是线段树专题（悲"><a href="#Day2-仍然是线段树专题（悲" class="headerlink" title="Day2 仍然是线段树专题（悲"></a>Day2 仍然是线段树专题（悲</h2><h3 id="D2T1-NOI2016-区间"><a href="#D2T1-NOI2016-区间" class="headerlink" title="D2T1 [NOI2016]区间"></a>D2T1 [NOI2016]区间</h3><h4 id="Desciption-1"><a href="#Desciption-1" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>有 $n$ 个闭区间 $[l_i,r_i]$ ，从中选出 $m$ 个区间，使得存在 $x$ ,使得每个被选择的区间都有 $l_i \leq x \leq r_i$。</p><p>选择一个合法的方案，它的花费为最长的区间长度减去最短区间长度，定义区间长度为 $r_i-l_i$。</p><p>求最小的花费，如果没有合法方案则输出 $-1$ 。</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution:"></a>Solution:</h4><p>考虑先将区间按照花费从小到大排序，然后用尺取法加线段树维护即可。</p><h4 id="Code：-2"><a href="#Code：-2" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> val,id;</span><br><span class="line">&#125;p[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seg</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,len,id;</span><br><span class="line">&#125;a[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(seg a,seg b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len&lt;b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,tot=<span class="number">0</span>,ll[maxn&lt;&lt;<span class="number">1</span>],rr[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,val,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].val+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;qr||r&lt;ql) <span class="keyword">return</span> ; </span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;</span><br><span class="line">t[p].val+=val;t[p].tag+=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//if(ql&lt;=mid) </span></span><br><span class="line"><span class="built_in">update</span>(l,mid,ql,qr,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="comment">//if(qr&gt;mid) </span></span><br><span class="line"><span class="built_in">update</span>(mid+<span class="number">1</span>,r,ql,qr,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].val=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].val,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].l=in;a[i].r=in;</span><br><span class="line">a[i].len=a[i].r-a[i].l;</span><br><span class="line">a[i].id=i;</span><br><span class="line">p[++tot].val=a[i].l;</span><br><span class="line">p[tot].id=i;</span><br><span class="line">p[++tot].val=a[i].r;</span><br><span class="line">p[tot].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+tot,cmp1);</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>].val=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].val!=p[i<span class="number">-1</span>].val) num++;</span><br><span class="line"><span class="keyword">if</span>(!ll[p[i].id]) ll[p[i].id]=num;</span><br><span class="line"><span class="keyword">else</span> rr[p[i].id]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2);</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0x7fffffff</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(t[<span class="number">1</span>].val&lt;m&amp;&amp;r&lt;=n)&#123;</span><br><span class="line">r++;</span><br><span class="line"><span class="type">int</span> idx=a[r].id;</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,num,ll[idx],rr[idx],<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].val&lt;m) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(t[<span class="number">1</span>].val&gt;=m&amp;&amp;l&lt;=n)&#123;</span><br><span class="line">l++;</span><br><span class="line"><span class="type">int</span> idx=a[l].id;</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,num,ll[idx],rr[idx],<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,a[r].len-a[l].len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0x7fffffff</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D2T2-跳伞求生"><a href="#D2T2-跳伞求生" class="headerlink" title="D2T2 跳伞求生"></a>D2T2 跳伞求生</h3><p><a href="http://192.168.101.115/p/1725?tid=63df53a1913b4d038e91609d">传送门</a></p><h4 id="Description：-3"><a href="#Description：-3" class="headerlink" title="Description："></a>Description：</h4><p> 小Q最近沉迷于《跳伞求生》游戏。他组建了一支由 $n$ 名玩家（包括他自己）组成的战队，编号依次为$1,2,\dots,n$ 。这个游 戏中，每局游戏开始时，所有玩家都会从飞机上跳伞，选择一个目的地降落，跳伞和降落的时间有早有晚。在某局 游戏降落前，他们在空中观察发现地面上一共有 $m$ 间房子，编号依次为 $1$ 到 $m$ 。其中每间房子恰好有一名敌人早于他 们到达。小Q战队的第 $i$ 名玩家拥有 $a_i$发子弹，地面上第i间房子里的敌人拥有 $b_i$ 发子弹，消灭他可以获得 $c_i$ 点积 分。每名玩家必须且只能选择一间房子降落，然后去消灭里面的敌人。若第i名玩家选择了第j间房子，如果 $a_i&gt;b_ j$ ，那么他就可以消灭该敌人，获得 $a_i-b_j+c_j$ 的团队奖励积分，否则他会被敌人消灭。为了防止团灭，小Q不允 许多名玩家选择同一间房子，因此如果某位玩家毫无利用价值，你可以选择让他退出游戏。因为房子之间的距离过长，你可以认为每名玩家在降落之后不能再去消灭其它房间里的敌人。作为小Q战队的指挥，请制定一套最优的降 落方案，使得最后获得的团队奖励总积分最大 </p><h4 id="Solution：-2"><a href="#Solution：-2" class="headerlink" title="Solution："></a>Solution：</h4><p>对于人的贡献为 $a_i$ ，房子的贡献为 $c_j-b_j$ 。 将 $c_j-b_j$ 从大到小排序。对于贡献大的房子，也要用 $a_i$ 大的取消除。用一个 $multiset$ 维护 $a$ ，如果有能消灭敌人的人，并更新答案。</p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">room</span>&#123;</span><br><span class="line"><span class="type">int</span> b,c,val;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="type">int</span> n,m,a[maxn];</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(room a,room b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in,s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">p[i].b=in;p[i].c=in;</span><br><span class="line">p[i].val=p[i].c-p[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp1);</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+m,cmp2);</span><br><span class="line">ll ans=<span class="number">0</span>,tot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator it=s.<span class="built_in">lower_bound</span>(p[i].b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(it!=s.<span class="built_in">end</span>())&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,tot+=a[++cnt]+p[i].val);</span><br><span class="line">s.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>诶难道不是线段树专题吗？<del>因为这道题还可以用线段树模拟费用流来做</del></strong></p><hr><h3 id="D2T3-Cards"><a href="#D2T3-Cards" class="headerlink" title="D2T3 Cards"></a>D2T3 Cards</h3><h4 id="Description：-4"><a href="#Description：-4" class="headerlink" title="Description："></a>Description：</h4><p>每个卡片有 $a_i$ 和 $b_i$ 两个数。交换 $c_i$ 和 $d_i$ 两个位置上的卡片，判断能否将任意卡片翻转，保证卡片正面的数单调不减。</p><h4 id="Solution：-3"><a href="#Solution：-3" class="headerlink" title="Solution："></a>Solution：</h4><p>考虑线段树维护区间能否单调不减。合并时判断即可。但是常数巨大还在 $T$ 着呢。</p><p>对于合并的<code>pushup</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//t[p].f[0][0]=t[p].f[1][0]=t[p].f[0][1]=t[p].f[1][1]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">t[p].f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">1</span>;l++)&#123;</span><br><span class="line">t[p].f[i][j]|=t[p&lt;&lt;<span class="number">1</span>].f[i][k]&amp;t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].f[l][j]&amp;(val[mid][k]&lt;=val[mid+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code:"></a>Code:</h4><p>改了一下维度降了一下，时间复杂度要优秀一点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a,b,val[maxn][<span class="number">2</span>],t[maxn&lt;&lt;<span class="number">2</span>][<span class="number">2</span>]; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">0</span>]) t[p][<span class="number">0</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">0</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">1</span>]) t[p][<span class="number">0</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> t[p][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> t[p][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">0</span>]) t[p][<span class="number">1</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>][<span class="number">1</span>]&lt;=val[mid+<span class="number">1</span>][<span class="number">1</span>]) t[p][<span class="number">1</span>]=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> t[p][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> t[p][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p][<span class="number">0</span>]=val[l][<span class="number">0</span>];</span><br><span class="line">t[p][<span class="number">1</span>]=val[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p][<span class="number">0</span>]=val[l][<span class="number">0</span>];</span><br><span class="line">t[p][<span class="number">1</span>]=val[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i][<span class="number">0</span>]=in;val[i][<span class="number">1</span>]=in;</span><br><span class="line"><span class="keyword">if</span>(val[i][<span class="number">0</span>]&gt;val[i][<span class="number">1</span>]) <span class="built_in">swap</span>(val[i][<span class="number">0</span>],val[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">a=in;b=in;</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">0</span>],val[b][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">1</span>],val[b][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,a);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,b);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>][<span class="number">0</span>]!=<span class="number">-1</span>||t[<span class="number">1</span>][<span class="number">1</span>]!=<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$TLE$ 的代码： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a,b,val[maxn][<span class="number">2</span>]; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//t[p].f[0][0]=t[p].f[1][0]=t[p].f[0][1]=t[p].f[1][1]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">t[p].f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">1</span>;l++)&#123;</span><br><span class="line">t[p].f[i][j]|=t[p&lt;&lt;<span class="number">1</span>].f[i][k]&amp;t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].f[l][j]&amp;(val[mid][k]&lt;=val[mid+<span class="number">1</span>][l]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].f[<span class="number">0</span>][<span class="number">0</span>]=t[p].f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].f[<span class="number">0</span>][<span class="number">0</span>]=t[p].f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i][<span class="number">0</span>]=in;val[i][<span class="number">1</span>]=in;</span><br><span class="line"><span class="comment">//if(val[i][0]&lt;val[i][1]) swap(val[i][0],val[i][0]);</span></span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">a=in;b=in;</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">0</span>],val[b][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">swap</span>(val[a][<span class="number">1</span>],val[b][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,a);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,b);</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>].f[<span class="number">0</span>][<span class="number">0</span>]|t[<span class="number">1</span>].f[<span class="number">0</span>][<span class="number">1</span>]|t[<span class="number">1</span>].f[<span class="number">1</span>][<span class="number">0</span>]|t[<span class="number">1</span>].f[<span class="number">1</span>][<span class="number">1</span>]) <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D2T3-「AHOI2014」奇怪的计算器"><a href="#D2T3-「AHOI2014」奇怪的计算器" class="headerlink" title="D2T3 「AHOI2014」奇怪的计算器"></a>D2T3 「AHOI2014」奇怪的计算器</h3><h4 id="Desciption-2"><a href="#Desciption-2" class="headerlink" title="Desciption:"></a>Desciption:</h4><p><a href="https://www.luogu.com.cn/problem/P4041">传送门</a></p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution:"></a>Solution:</h4><p>如果我们先抛去 $L,R$ 的限制，很容易联想到这是个线段树的板子。</p><p>然后如果加上限制，考虑如何修改。如果我们将序列排序，操作也不hi影响序列的单调性。所以我们可以二分出一个位置，及恰好到达边界的位置。对于没超过限制的部分直接修改，超过限制区间直接覆盖即可。因为线段树<code>query</code> 操作的本质就就是二分，所以不需要额外二分。对于区间覆盖，维护一个最大最小值即可判断。</p><p>代码中有两个细节需要注意：</p><ol><li>注意几个运算有优先级，覆盖操作&gt;乘法操作&gt;加减和那个奇怪的操作。</li><li>在运算时因为是给整个序列更改，所以直接俄打标记即可。</li></ol><p>但其实对于所有的操作都可以化成一个操作，仍然是<a href="https://ldxkelkel.blog.luogu.org/solution-p4041">idx巨佬的文章</a></p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ask</span>&#123;</span><br><span class="line"><span class="type">int</span> opt,num;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">number</span>&#123;</span><br><span class="line">ll num;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">int</span> n,m,L,R;</span><br><span class="line">ll ans[maxn];</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(number a,number b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num&lt;b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll max,min,add,mul,at,cover;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].mul=<span class="number">1</span>;</span><br><span class="line">t[p].add=t[p].at=t[p].cover=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=a[l].num;</span><br><span class="line">t[p].min=a[l].num;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushadd</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max+=val;</span><br><span class="line">t[p].min+=val;</span><br><span class="line">t[p].add+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushmul</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max*=val;</span><br><span class="line">t[p].min*=val;</span><br><span class="line">t[p].mul*=val;</span><br><span class="line">t[p].add*=val;</span><br><span class="line">t[p].at*=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushat</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max+=a[t[p].r].num*val;</span><br><span class="line">t[p].min+=a[t[p].l].num*val;</span><br><span class="line">t[p].at+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushcover</span><span class="params">(<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line">t[p].max=val;</span><br><span class="line">t[p].min=val;</span><br><span class="line">t[p].cover=val;</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">t[p].at=<span class="number">0</span>;</span><br><span class="line">t[p].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].cover)&#123;</span><br><span class="line"><span class="built_in">pushcover</span>(p&lt;&lt;<span class="number">1</span>,t[p].cover);</span><br><span class="line"><span class="built_in">pushcover</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].cover);</span><br><span class="line">t[p].cover=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].mul!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">pushmul</span>(p&lt;&lt;<span class="number">1</span>,t[p].mul);</span><br><span class="line"><span class="built_in">pushmul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].mul);</span><br><span class="line">t[p].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].add)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>,t[p].add);</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].add);</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].at)&#123;</span><br><span class="line"><span class="built_in">pushat</span>(p&lt;&lt;<span class="number">1</span>,t[p].at);</span><br><span class="line"><span class="built_in">pushat</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].at);</span><br><span class="line">t[p].at=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updmin</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].max&lt;L) <span class="built_in">pushcover</span>(p,L);</span><br><span class="line"><span class="keyword">if</span>(t[p].min&gt;R) <span class="built_in">pushcover</span>(p,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">updmin</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min&lt;L)<span class="built_in">updmin</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updmax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].max&lt;L) <span class="built_in">pushcover</span>(p,L);</span><br><span class="line"><span class="keyword">if</span>(t[p].min&gt;R) <span class="built_in">pushcover</span>(p,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].max&gt;R) <span class="built_in">updmax</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">updmax</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">ans[a[l].id]=t[p].max;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">query</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">query</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;calc1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">n=in;L=in;R=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>) q[i].opt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;-&#x27;</span>) q[i].opt=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>) q[i].opt=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;@&#x27;</span>) q[i].opt=<span class="number">4</span>;</span><br><span class="line">q[i].num=(ll)in;</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) a[i].num=in,a[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">1</span>) <span class="built_in">pushadd</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">2</span>) <span class="built_in">pushadd</span>(<span class="number">1</span>,-q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">3</span>) <span class="built_in">pushmul</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">4</span>) <span class="built_in">pushat</span>(<span class="number">1</span>,q[i].num);</span><br><span class="line"><span class="built_in">updmax</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">updmin</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">query</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Day3-今天是树剖专题了嗨嗨嗨"><a href="#Day3-今天是树剖专题了嗨嗨嗨" class="headerlink" title="Day3 今天是树剖专题了嗨嗨嗨"></a>Day3 今天是树剖专题了嗨嗨嗨</h2><h3 id="D3T1-层流"><a href="#D3T1-层流" class="headerlink" title="D3T1 层流"></a>D3T1 层流</h3><h4 id="Description：-5"><a href="#Description：-5" class="headerlink" title="Description："></a>Description：</h4><p>对于一个全集 $U$ ，$A,B$ 是它的两个子集，如果 $A \subseteq B$ 或 $B \subseteq A$ 或 $A \cap B = \emptyset$ ，则称 $A,B$ 是 $U$ 的两个层流集。</p><p>给定一棵树，$U$ 为树上所有点构成的集合。将两点间的简单路径 $<u,v>$ 经过的点视作一个集合，求给出的 $m$ 对 $<u,v>$ 判断是否满足任意两个集合都是 $U$ 的层流集。  </p><h4 id="Solution：-4"><a href="#Solution：-4" class="headerlink" title="Solution："></a>Solution：</h4><p>考虑染色。先将询问按集合大小从大到小排序，这样可以将问题转化为小区间包含大区间的问题。对于每个集合染色前，判断 $<u,v>$ 上如果有2种及以上的颜色，那么就不符合。</p><p>染色过程与<a href="https://www.luogu.com.cn/problem/P2486">[SDOI2011]染色</a>相同。<del>早知道就直接复制这个代码了</del></p><h4 id="Code：-3"><a href="#Code：-3" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,tag,cnt,lc,rc;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dep[maxn],num[maxn],fa[maxn],siz[maxn],hson[maxn],top[maxn],pred[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">pred[tot]=x; </span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> LC,RC,n,m,u,v,tt,w[maxn];</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].cnt=t[p&lt;&lt;<span class="number">1</span>].cnt+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt;</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rc==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc) t[p].cnt--;</span><br><span class="line">t[p].lc=t[p&lt;&lt;<span class="number">1</span>].lc;t[p].rc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].lc=t[p].rc=w[pred[l]];</span><br><span class="line">t[p].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].lc=t[p&lt;&lt;<span class="number">1</span>].rc=t[p&lt;&lt;<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].cnt=<span class="number">1</span>;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rc=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt=<span class="number">1</span>;</span><br><span class="line">t[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].lc=t[p].rc=t[p].tag=val;</span><br><span class="line">t[p].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line"><span class="built_in">pushup</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l==l) LC=t[p].lc;</span><br><span class="line"><span class="keyword">if</span>(t[p].r==r) RC=t[p].rc;</span><br><span class="line"><span class="keyword">return</span> t[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>)+<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].rc==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc) ans--;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(num[x],num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,ansl=<span class="number">0</span>,ansr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(ansl,ansr);</span><br><span class="line">res+=<span class="built_in">query</span>(num[top[x]],num[x],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(RC==ansl) res--;</span><br><span class="line">ansl=LC;</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y),<span class="built_in">swap</span>(ansl,ansr);</span><br><span class="line">res+=<span class="built_in">query</span>(num[x],num[y],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ansl==LC) res--;</span><br><span class="line"><span class="keyword">if</span>(ansr==RC) res--;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sett</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,lcaa,len;</span><br><span class="line">&#125;s[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(sett a,sett b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len&gt;b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">s[i].u=in;s[i].v=in;</span><br><span class="line">s[i].lcaa=<span class="built_in">lca</span>(s[i].u,s[i].v);</span><br><span class="line">s[i].len=dep[s[i].u]+dep[s[i].v]<span class="number">-2</span>*dep[s[i].lcaa]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="type">int</span> col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getsum</span>(s[i].u,s[i].v)&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">col++;</span><br><span class="line"><span class="built_in">upd</span>(s[i].u,s[i].v,col);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D3T2-Graph"><a href="#D3T2-Graph" class="headerlink" title="D3T2 Graph"></a>D3T2 Graph</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>给一个 $n$ 个点的图，有 $2<em>n-2$ 条<em>*有向边</em></em>。边目录按两部分给出：</p><ol><li><p>开始的 $n-1$ 条边描述了一颗以1号点为根的生成树，每个点都可以由1号点到达。</p></li><li><p>接下来的 $n-1$ 条边一定是 $<i,1>$ 的有向边，保证每个点都能到达1号点。</p></li></ol><p>有 $q$ 次询问：</p><p><code>1 x w</code> 将第 $x$条边的边权修改为 $w$ </p><p><code>2 u v</code> 询问 $u$ 到 $v$ 的最短距离</p><h4 id="Solution：-5"><a href="#Solution：-5" class="headerlink" title="Solution："></a>Solution：</h4><p><del>我是绝对不会说我因为没看见有向边导致样例玩了1个小时</del></p><p>讨论一下 $u$ 和 $v$ 的关系。</p><p>如果 $u$ 是 $lca$ ，直接求链就可以了。不然查询以 $u$ 为根的子树返回根的最优值就好了。</p><p>然后用树剖维护 $dis_i+w_i$ 的最小值，$dis_i$ 表示 $i$ 到根的距离，$w_i$ 表示 $i$ 回到根的距离。</p><p>至于为什么觉得 <a href="https://blog.csdn.net/sslz_fsy/article/details/82557256?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=graph%20%E7%BA%BF%E6%AE%B5%E6%A0%91&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-82557256.142^v73^control_1,201^v4^add_ask,239^v1^insert_chatgpt&amp;spm=1018.2226.3001.4187">FSYo的题解</a> 写的很清楚。</p><h4 id="Code：-4"><a href="#Code：-4" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">ll w;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> h[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">e[++cnt].v=v;e[cnt].nxt=h[u];e[cnt].w=w;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">ll min,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,q,tot=<span class="number">0</span>,siz[maxn],rec[maxn],top[maxn],num[maxn],fa[maxn],dep[maxn],pred[maxn],hson[maxn];</span><br><span class="line">ll a[maxn],dis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line">a[v]=a[x]+e[i].w;</span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;siz[hson[x]]) hson[x]=v; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;num[x]=++tot;pred[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(!hson[x]) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=hson[x]) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].min=a[pred[l]]+dis[pred[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].min+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;t[p].r||t[p].l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].tag+=val;</span><br><span class="line">t[p].min+=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">update</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,val),<span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].min=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].min,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;t[p].r||t[p].l&gt;r) <span class="keyword">return</span> <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].min;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">query</span>(l,mid,p&lt;&lt;<span class="number">1</span>),<span class="built_in">query</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;q=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u=in,v=in;ll w=in;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u=in,v=in;ll w=in;</span><br><span class="line">rec[i]=u;dis[u]=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="type">int</span> opt=in;ll x=in,y=in;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=n<span class="number">-1</span>) <span class="built_in">update</span>(num[e[x].v],num[e[x].v]+siz[e[x].v]<span class="number">-1</span>,<span class="number">1</span>,y-e[x].w),e[x].w=y;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(num[rec[x-n+<span class="number">1</span>]],num[rec[x-n+<span class="number">1</span>]],<span class="number">1</span>,y-dis[rec[x-n+<span class="number">1</span>]]),dis[rec[x-n+<span class="number">1</span>]]=y;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">lca</span>(x,y)==x) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(num[y],num[y],<span class="number">1</span>)-dis[y]-<span class="built_in">query</span>(num[x],num[x],<span class="number">1</span>)+dis[x]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(num[y],num[y],<span class="number">1</span>)+<span class="built_in">query</span>(num[x],num[x]+siz[x]<span class="number">-1</span>,<span class="number">1</span>)-<span class="built_in">query</span>(num[x],num[x],<span class="number">1</span>)+dis[x]-dis[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D3T3-Three"><a href="#D3T3-Three" class="headerlink" title="D3T3 Three"></a>D3T3 Three</h3><h4 id="Desciption-3"><a href="#Desciption-3" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>给定一颗 $n$ 个节点的无根树，在树上选三个互不相同的节点，使得三个节点两两之间距离相等，输出方案数。</p><h4 id="Solution：-6"><a href="#Solution：-6" class="headerlink" title="Solution："></a>Solution：</h4><p>首先，我不是很会 $dp$ </p><p>其次，我完全不会长链剖分优化 $dp$ </p><p>最后，我<em> </em> <em> </em> <em> </em></p><p>其实 $dp$ 部分还是听懂了。</p><p>设 $f_{i,j}$ 表示以 $i$ 为根的子树中距离 $i$ 为 $j$ 的点数，$g_{i,j}$ 表示 $i$ 的子树中有多少两个点的 $lca$ 到 $i$ 的距离为 $d-j$ ，两个点到他们 $lca$ 的距离是 $d$ 。</p><p>很容易发现这两个状态可以互补（？</p><p>因此对于一对父子 $(p,v)$ 有如下转移式：</p><script type="math/tex; mode=display">ans+=g_{v,i+1}*f_{p,i}+g_{p,i}*f_{v,i-1}</script><script type="math/tex; mode=display">g_{p,i}+=g_{v,i-1}+f_{v,i-1}*f_{p,i}</script><script type="math/tex; mode=display">f_{p,i}+=f_{v,i-1}</script><p>但是代码就完全就看不懂了，什么指针转移力（哭</p><h4 id="Code：-5"><a href="#Code：-5" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[maxn];</span><br><span class="line"><span class="type">int</span> n,u,v;</span><br><span class="line">ll pool[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line">ll* top=pool;</span><br><span class="line">ll *f[maxn],*g[maxn];</span><br><span class="line"><span class="function">ll* <span class="title">get</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">ll* t=top;top+=len;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dep[maxn],hson[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dep[x]=<span class="number">0</span>;hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">dep[x]=<span class="built_in">max</span>(dep[x],dep[v]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(dep[v]&gt;dep[hson[x]]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;maxlen,<span class="type">int</span> blank)</span></span>&#123;</span><br><span class="line">maxlen=<span class="built_in">max</span>(maxlen,dep[x]);</span><br><span class="line"><span class="keyword">if</span>(hson[x])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[x],x,maxlen,blank+<span class="number">1</span>);</span><br><span class="line">ans+=g[hson[x]][<span class="number">1</span>];</span><br><span class="line">f[x]=f[hson[x]]<span class="number">-1</span>;</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">g[x]=g[hson[x]]+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">f[x]=<span class="built_in">get</span>(maxlen+<span class="number">5</span>+blank)+blank;</span><br><span class="line">g[x]=<span class="built_in">get</span>(maxlen+<span class="number">5</span>+blank);</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v=e[x][i],mlen=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==fa||v==hson[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,x,mlen,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;dep[v];j++) ans+=f[x][j]*g[v][j+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v]+<span class="number">1</span>;j++) ans+=g[x][j]*f[v][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v]+<span class="number">1</span>;j++) g[x][j]+=f[x][j]*f[v][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=dep[v];j++) f[x][j+<span class="number">1</span>]+=f[v][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dep[v];j++) g[x][j<span class="number">-1</span>]+=g[v][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(pool,<span class="number">0</span>,<span class="built_in">sizeof</span>(pool));</span><br><span class="line"><span class="built_in">memset</span>(hson,<span class="number">0</span>,<span class="built_in">sizeof</span>(hson));</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line">e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mxlen=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,mxlen,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D3T4-月下毛景树"><a href="#D3T4-月下毛景树" class="headerlink" title="D3T4 月下毛景树"></a>D3T4 月下毛景树</h3><h4 id="Description：-6"><a href="#Description：-6" class="headerlink" title="Description："></a>Description：</h4><p>给定一颗 $n$ 个节点有边权的树，维护以下四个操作：</p><p><code>Change k w</code> 将第 $k$ 条边的边权改为 $w$</p><p><code>Cover u v w</code> 将 $<u,v>$ 路径上的所有边权都改为 $w$</p><p><code>Add u v w</code> 将 $<u,v>$ 路径上的所有边权都加上 $w$</p><p><code>Max u v</code> 询问 $<u,v>$ 路径上边权最大值</p><h4 id="Solution：-7"><a href="#Solution：-7" class="headerlink" title="Solution："></a>Solution：</h4><p>将边权转化为深度更大的点的点权，然后变成树剖的模板。</p><p>需要注意的是，改变路径上的边权时要去掉 $lca$ 的点权。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x],num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要变为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,u,v;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],id[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">w[v]=e[i].w;</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,add,cov;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=w[dfn[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushcov</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">t[p].max=val;</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">t[p].cov=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushadd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">t[p].max+=val;</span><br><span class="line">t[p].add+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].cov)&#123;</span><br><span class="line"><span class="built_in">pushcov</span>(p&lt;&lt;<span class="number">1</span>,t[p].cov);</span><br><span class="line"><span class="built_in">pushcov</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].cov);</span><br><span class="line">t[p].cov=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[p].add)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>,t[p].add);</span><br><span class="line"><span class="built_in">pushadd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[p].add);</span><br><span class="line">t[p].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updcover</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="built_in">pushcov</span>(p,val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updcover</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updcover</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updadd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="built_in">pushadd</span>(p,val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">updadd</span>(l,r,p&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">updadd</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].max;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(mid&lt;r) ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cover</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updcover</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updcover</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[top[x]],num[x],<span class="number">1</span>,val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">updadd</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[top[x]],num[x],<span class="number">1</span>));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;P4315_1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;ans.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;<span class="type">int</span> w=in;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span><span class="number">-2</span>;i+=<span class="number">2</span>) id[i/<span class="number">2</span>+<span class="number">1</span>]=dep[e[i].u]&gt;dep[e[i].v]?e[i].u:e[i].v;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> x=in,y=in,z;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;h&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">updcover</span>(num[id[x]],num[id[x]],<span class="number">1</span>,y);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;o&#x27;</span>)&#123;</span><br><span class="line">z=in;</span><br><span class="line"><span class="built_in">cover</span>(x,y,z);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">z=in;</span><br><span class="line"><span class="built_in">modify</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getmax</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><h3 id="D4T1-SDOI2014-旅行"><a href="#D4T1-SDOI2014-旅行" class="headerlink" title="D4T1 [SDOI2014]旅行"></a>D4T1 [SDOI2014]旅行</h3><p><a href="https://www.luogu.com.cn/problem/P3313">传送门</a></p><h4 id="Desciption-4"><a href="#Desciption-4" class="headerlink" title="Desciption:"></a>Desciption:</h4><p>给定一颗 $n$ 个节点的树，每个节点都有一个权值和一种颜色。</p><p>有 $q$ 个询问：</p><p><code>CC x c</code> 将节点 $x$ 的颜色改为 $c$</p><p><code>CW x w</code> 将节点 $x$ 的权值改为 $w$</p><p><code>QS x y</code> 询问 $<x,y>$ 路径上与 $x,y$ 颜色相同的点的权值和</p><p><code>QM x y</code> 询问 $<x,y>$ 路径上与 $x,y$ 颜色相同的点的最大权值</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution:"></a>Solution:</h4><p>首先明确肯定用树剖来维护询问和修改。</p><p>对于每一个宗教我们都要开一颗线段树来维护，所以考虑用主席树。</p><p>主席树+树剖，其他的与线段树+树剖一样。</p><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint:"></a>Hint:</h4><ol><li>查询最大最小值得时候记得加上<code>if(qr&lt;l||ql&gt;r) return 0;</code>，不然不晓得飞到哪里去。</li><li>主席树的空间玄学问题。本题的 $maxn$ 为 $1e^5$ ，理论上要开到 $maxn&lt;&lt;7$ 的范围才保险，但是 SLOJ上 $maxn&lt;&lt;6$ 才能过。</li></ol><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll vall;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],c[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>,len=<span class="number">0</span>,root[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,sum;</span><br><span class="line">&#125;t[<span class="number">20000110</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> w,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt=++len;</span><br><span class="line">t[rt].max=<span class="built_in">max</span>(t[rt].max,w);</span><br><span class="line">t[rt].sum=t[rt].sum+w;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">upd</span>(t[rt].l,w,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">upd</span>(t[rt].r,w,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cls</span><span class="params">(<span class="type">int</span> &amp;rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[rt].max=t[rt].sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">cls</span>(t[rt].l,l,mid,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cls</span>(t[rt].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">t[rt].max=<span class="built_in">max</span>(t[t[rt].l].max,t[t[rt].r].max);</span><br><span class="line">t[rt].sum=t[t[rt].l].sum+t[t[rt].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr&lt;l||ql&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> t[rt].max;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">querymax</span>(t[rt].l,l,mid,ql,qr),<span class="built_in">querymax</span>(t[rt].r,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querysum</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr&lt;l||ql&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> t[rt].sum;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">querysum</span>(t[rt].l,l,mid,ql,qr)+<span class="built_in">querysum</span>(t[rt].r,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> reli)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(root[reli],<span class="number">1</span>,n,num[top[x]],num[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(root[reli],<span class="number">1</span>,n,num[y],num[x]));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> reli)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans+=<span class="built_in">querysum</span>(root[reli],<span class="number">1</span>,n,num[top[x]],num[x]);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);<span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">ans+=<span class="built_in">querysum</span>(root[reli],<span class="number">1</span>,n,num[y],num[x]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">w[i]=in;c[i]=in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> x=in,y=in;</span><br><span class="line"><span class="built_in">add</span>(x,y);<span class="built_in">add</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">upd</span>(root[c[i]],w[i],<span class="number">1</span>,n,num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="type">int</span> x=in,y=in;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cls</span>(root[c[x]],<span class="number">1</span>,n,num[x]);</span><br><span class="line"><span class="built_in">upd</span>(root[y],w[x],<span class="number">1</span>,n,num[x]);</span><br><span class="line">c[x]=y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cls</span>(root[c[x]],<span class="number">1</span>,n,num[x]);</span><br><span class="line"><span class="built_in">upd</span>(root[c[x]],y,<span class="number">1</span>,n,num[x]);</span><br><span class="line">w[x]=y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>&amp;&amp;opt[<span class="number">1</span>]==<span class="string">&#x27;S&#x27;</span>)&#123;<span class="comment">//cout&lt;&lt;&quot;debug&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getsum</span>(x,y,c[x]));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">getmax</span>(x,y,c[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D4T2-NOI嘉年华"><a href="#D4T2-NOI嘉年华" class="headerlink" title="D4T2 NOI嘉年华"></a>D4T2 NOI嘉年华</h3><p><a href="https://www.luogu.com.cn/problem/P1973">传送门</a></p><p>一道完全没看懂的 $dp$,还被luogu×了。后面慢慢来改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m=<span class="number">0</span>,f[maxn][maxn],tot[maxn][maxn],suf[maxn][maxn],pre[maxn][maxn],s[maxn],t[maxn],hsh[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">hsh[++m]=s[i]=in;</span><br><span class="line">t[i]=in;</span><br><span class="line">hsh[++m]=t[i]=t[i]+s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(hsh+<span class="number">1</span>,hsh+<span class="number">1</span>+m);</span><br><span class="line">m=<span class="built_in">unique</span>(hsh+<span class="number">1</span>,hsh+<span class="number">1</span>+m)-hsh<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">s[i]=<span class="built_in">lower_bound</span>(hsh+<span class="number">1</span>,hsh+<span class="number">1</span>+m,s[i])-hsh;</span><br><span class="line">t[i]=<span class="built_in">lower_bound</span>(hsh+<span class="number">1</span>,hsh+<span class="number">1</span>+m,t[i])-hsh;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=s[i];l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=m;r&gt;=t[i];r--) tot[l][r]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) pre[i][j]=suf[i][j]=-inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=tot[<span class="number">1</span>][i];j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=i;k++)&#123;</span><br><span class="line">pre[i][j]=<span class="built_in">max</span>(pre[i][j],pre[k][j]+tot[k][i]);</span><br><span class="line"><span class="keyword">if</span>(j&gt;=tot[k][i]) pre[i][j]=<span class="built_in">max</span>(pre[i][j],pre[k][j-tot[k][i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=tot[i][m];j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line">suf[i][j]=<span class="built_in">max</span>(suf[i][j],suf[k][j]+tot[i][k]);</span><br><span class="line"><span class="keyword">if</span>(j&gt;=tot[i][k]) suf[i][j]=<span class="built_in">max</span>(suf[i][j],suf[k][j-tot[i][k]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> p0,p1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=m;l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=l+<span class="number">1</span>;r&lt;=m;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y=n,x=<span class="number">0</span>;x&lt;=n;x++)&#123;</span><br><span class="line">p0=<span class="built_in">min</span>(x+tot[l][r]+y,pre[l][x]+suf[r][y]);</span><br><span class="line"><span class="keyword">while</span>(y&amp;&amp;p0&lt;=(p1=<span class="built_in">min</span>(x+tot[l][r]+y<span class="number">-1</span>,pre[l][x]+suf[r][y<span class="number">-1</span>]))) p0=p1,--y;</span><br><span class="line">f[l][r]=<span class="built_in">max</span>(f[l][r],<span class="built_in">min</span>(x+tot[l][r]+y,pre[l][x]+suf[r][y]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=<span class="built_in">max</span>(ans,<span class="built_in">min</span>(pre[m][i],i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=s[i];l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=m;r&gt;=t[i];r--) ans=<span class="built_in">max</span>(ans,f[l][r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D4T3-严格次小生成树"><a href="#D4T3-严格次小生成树" class="headerlink" title="D4T3 严格次小生成树"></a>D4T3 严格次小生成树</h3><h4 id="Description：-7"><a href="#Description：-7" class="headerlink" title="Description："></a>Description：</h4><p>给定一张 $n$ 个点 $m$ 条边的无向图，求无向图的严格次小生成树。</p><p>设最小生成树的边权之和为 $val$ ，严格次小生成树指边权之和大于 $val$ 的生成树的最小的一个。</p><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution:"></a>Solution:</h4><p>首先严格次小生成树根最小生成树只有一条边不同。 </p><p>所以我们可以枚举所有边，如果这条边不在生成树上，那么加入生成树后一定会构成一个环，这时候将边上最大值删去即可。但考虑到严格次小生成树的最大边权与当前边权相同，所以还要记录次大值。</p><p>用树剖维护次大值和最大值即可。</p><h4 id="Code：-6"><a href="#Code：-6" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line"><span class="type">bool</span> vis;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;e[cnt].vis=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll vall;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> dep[maxn],siz[maxn],hson[maxn],fa[maxn],w[maxn],id[maxn];</span><br><span class="line"><span class="type">int</span> dfn[maxn],num[maxn],top[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line">hson[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father) <span class="keyword">continue</span>; </span><br><span class="line">dep[v]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[v]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x);</span><br><span class="line">w[v]=e[i].w;</span><br><span class="line">siz[x]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[x]]&lt;siz[v]) hson[x]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp;</span><br><span class="line">num[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(hson[x]) <span class="built_in">dfs2</span>(hson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[x]&amp;&amp;hson[x]!=v) <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fat[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=fat[x]) fat[x]=<span class="built_in">find</span>(fat[x]);</span><br><span class="line"><span class="keyword">return</span> fat[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fat[i]=i;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,fu,fv,u,v;<span class="comment">//for(int i=1;i&lt;=m;i++) cout&lt;&lt;e[i].u&lt;&lt;&quot; &quot;&lt;&lt;e[i].v&lt;&lt;&quot; &quot;&lt;&lt;e[i].w&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=e[i].u,v=e[i].v;</span><br><span class="line">fu=<span class="built_in">find</span>(u),fv=<span class="built_in">find</span>(v);</span><br><span class="line"><span class="comment">//cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;fu&lt;&lt;&quot; &quot;&lt;&lt;fv&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line"><span class="built_in">add</span>(u,v,e[i].w);<span class="built_in">add</span>(v,u,e[i].w);</span><br><span class="line">fat[fu]=fv;</span><br><span class="line">vall+=e[i].w;</span><br><span class="line">++sum;</span><br><span class="line">e[i].vis=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,max,sec;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].max=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line"><span class="keyword">if</span>(t[p&lt;&lt;<span class="number">1</span>].max==t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max) t[p].sec=<span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].sec,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sec);</span><br><span class="line"><span class="keyword">else</span> t[p].sec=<span class="built_in">min</span>(t[p&lt;&lt;<span class="number">1</span>].max,t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].max=w[dfn[l]];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">querymax</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l&gt;r||t[p].r&lt;l) <span class="keyword">return</span> -inf;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(key==t[p].max) <span class="keyword">return</span> t[p].sec;</span><br><span class="line"><span class="keyword">return</span> t[p].max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>,key);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span> <span class="built_in">querymax</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,key);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">querymax</span>(l,mid,p&lt;&lt;<span class="number">1</span>,key),<span class="built_in">querymax</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=-inf;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[top[x]],num[x],<span class="number">1</span>,key));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[x]&gt;num[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">querymax</span>(num[x]+<span class="number">1</span>,num[y],<span class="number">1</span>,key));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">e[i].u=in;</span><br><span class="line">e[i].v=in;</span><br><span class="line">e[i].w=in;</span><br><span class="line">&#125;</span><br><span class="line">cnt=m;</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ll ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!e[i].vis) ans=<span class="built_in">min</span>(ans,vall+e[i].w-<span class="built_in">getmax</span>(e[i].u,e[i].v,e[i].w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D4T4-路径的交"><a href="#D4T4-路径的交" class="headerlink" title="D4T4 路径的交"></a>D4T4 路径的交</h3><h4 id="Desciption："><a href="#Desciption：" class="headerlink" title="Desciption："></a>Desciption：</h4><p>给定一颗 $n$ 个节点的树，以及 $m$ 条路径，第 $i$ 条路径与前 $i-1$ 条有多少相交的（点相交即视为路径相交）</p><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution:"></a>Solution:</h4><p>现在有两条路径 $a$ 和 $b$ ，有两种情况，一种是 $a$ 的 $lca$ 在 $b$ 上，另一种是 $b$ 的 $lca$ 在 $a$ 上。</p><p>所以就转化成了两个问题：</p><ol><li><p>当前路径上有几个之前的 $lca$</p></li><li><p>之前的路径有几个经过当前的 $lca$ </p></li></ol><p>可以用两个树状数组来维护，一个支持单点修改、链上查询，另一个支持链上修改、单点查询。</p><h4 id="Code：-7"><a href="#Code：-7" class="headerlink" title="Code："></a>Code：</h4><p>目前只能用倍增来跳 $lca$ ，用欧拉序跳的有点奇怪（悲</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,u,v;</span><br><span class="line"><span class="type">int</span> val[maxn],st[maxn],ed[maxn],tim=<span class="number">0</span>,dfn[maxn&lt;&lt;<span class="number">1</span>],dep[maxn],fath[maxn];</span><br><span class="line"><span class="type">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[a]&lt;dep[b]?a:b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">st[u]=++tim;</span><br><span class="line">f[u][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">19</span>;++i) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">ed[u]=tim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">  <span class="keyword">if</span>(dep[f[x][i]]&gt;=dep[y]) x=f[x][i];   </span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">  <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];    </span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bittree</span>&#123;</span><br><span class="line"><span class="type">int</span> t[maxn],siz;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">t[x]+=val;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;t1,t2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">clac</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> lca)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">ans+=t1.<span class="built_in">query</span>(ed[lca])-t1.<span class="built_in">query</span>(st[lca]<span class="number">-1</span>);</span><br><span class="line">ans+=t2.<span class="built_in">query</span>(st[x])+t2.<span class="built_in">query</span>(st[y])-t2.<span class="built_in">query</span>(st[lca])*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">m=in;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">u=in;v=in;</span><br><span class="line"><span class="type">int</span> lcaa=<span class="built_in">lca</span>(u,v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">clac</span>(u,v,lcaa)+val[lcaa]);</span><br><span class="line">val[lcaa]++;</span><br><span class="line">t1.<span class="built_in">update</span>(st[u],<span class="number">1</span>);</span><br><span class="line">t1.<span class="built_in">update</span>(st[v],<span class="number">1</span>);</span><br><span class="line">t1.<span class="built_in">update</span>(st[lcaa],<span class="number">-2</span>);</span><br><span class="line">t2.<span class="built_in">update</span>(st[lcaa],<span class="number">1</span>);</span><br><span class="line">t2.<span class="built_in">update</span>(ed[lcaa]+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> dp </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ2259 [Ohib] 新型计算机</title>
      <link href="/2023/02/12/bzoj2259/"/>
      <url>/2023/02/12/bzoj2259/</url>
      
        <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>Tim 正在摆弄着他设计的“计算机”，他认为这台计算机原理很独特，因此利用它可以解决许多难题。<br>但是，有一个难题他却解决不了，是这台计算机的输入问题。新型计算机的输入也很独特，假设输入序列中有一些数字（都是自然数 —— 自然数包括0），计算机先读取第一个数字 $S1$ ，然后顺序向后读入 $S1$ 个数字。接着再读一个数字 $S2$ ，顺序向后读 入 $S2$ 个数字 …… 依此类推。不过只有计算机正好将输入序列中的数字读完，它才能正确处理数据，否则计算机就会进行自毁性 操作！<br>Tim 现在有一串输入序列。但可能不是合法的，也就是可能会对计算机造成破坏。于是他想对序列中的每一个数字做一些更改，加上一个数或者减去一个数，当然，仍然保持其为自然数。使得更改后的序列为一个新型计算机可以接受的合法序列。<br>不过 Tim 还希望更改的总代价最小，所谓总代价，就是对序列中每一个数操作的参数的绝对值之和。<br>写一个程序：<br>从文件中读入原始的输入序列； 计算将输入序列改变为合法序列需要的最小代价；<br>向输出文件打印结果。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入文件包含两行，第一行一个正整数 $N$ ， $N&lt;1e^6+1$ 。<br>输入文件第二行包含 $4$ 个自然数，表示输入序列。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>仅一个整数，表示把输入序列改变为合法序列需要的最小代价，保证最小代价小于 $1e^9$ 。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>4<br>2 2 2 2</p><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>1</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>这道题居然是个图论最短路。</p><p>以修改的代价为边权建图，显然 $<i,i+a_i+1>$ 的边权为0。</p><p>当 $i+a_i+1&gt;n+1$ 时 $<i,n+1>$ 的边权为 $a_i+i-n$ 。</p><p>同时可以将 $<i+1,i>$ 和 $<i,i+1>$ 的边权为1。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> cnt,h[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,a[maxn],dis[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> v,w;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijstra</span><span class="params">(<span class="type">int</span> be)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) dis[i]=inf;</span><br><span class="line">dis[be]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;be,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">top</span>().v,dist=q.<span class="built_in">top</span>().w;q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(dist!=dis[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">dis[v]=dis[u]+e[i].w;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;v,dis[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="type">int</span> minn=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">minn=<span class="built_in">min</span>(minn,i+a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(i+a[i]&lt;=n) <span class="built_in">add</span>(i,i+a[i]+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(i,n+<span class="number">1</span>,i+a[i]-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=minn;i&lt;=n;i++) <span class="built_in">add</span>(i,i+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">add</span>(i+<span class="number">1</span>,i,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dijstra</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> Dijstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.10夏令营测试</title>
      <link href="/2023/02/11/8.10_summer_camp/"/>
      <url>/2023/02/11/8.10_summer_camp/</url>
      
        <content type="html"><![CDATA[<h1 id="1-赛后感言（？）"><a href="#1-赛后感言（？）" class="headerlink" title="1. 赛后感言（？）"></a>1. 赛后感言（？）</h1><p>T1-T3 属于比较简单的一眼题，J组第一题难度</p><p>T4 T6 有思路，没写完</p><p>T4 二分 + $BFS$  </p><p>T6 $Tarjan$求环+$Dijstra$最短路</p><p>T5 完全没思路,并查集的做法还是比较新奇</p><p>4个小时的题只写了不到三个小时，有点可惜 </p><hr><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h1><h3 id="1-猴子识数"><a href="#1-猴子识数" class="headerlink" title="1. 猴子识数"></a>1. 猴子识数</h3><h4 id="题意简化："><a href="#题意简化：" class="headerlink" title="题意简化："></a>题意简化：</h4><p>给出一个数$X$，如果是回文数，输出是第几个回文数，否则输出“NO！”。</p><p> 1&lt;=$X$&lt;1e5</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p> 简单枚举</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">int</span> d[<span class="number">2000</span>];</span><br><span class="line">   <span class="type">int</span> i,j,n,sum,b; </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) <span class="comment">//一位 </span></span><br><span class="line">     d[i]=i;</span><br><span class="line">   i=<span class="number">10</span>; </span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;<span class="comment">//二位</span></span><br><span class="line">   d[i]=j*<span class="number">10</span>+j;</span><br><span class="line">   i++;</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">for</span> (j=<span class="number">10</span>;j&lt;=<span class="number">99</span>;j++)&#123;<span class="comment">//三位 </span></span><br><span class="line">   d[i]=j*<span class="number">10</span>+j/<span class="number">10</span>;</span><br><span class="line">   i++;</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">for</span> (j=<span class="number">10</span>;j&lt;=<span class="number">99</span>;j++)&#123;<span class="comment">//四位 </span></span><br><span class="line">   d[i]=j*<span class="number">100</span>+j%<span class="number">10</span>*<span class="number">10</span>+j/<span class="number">10</span>;</span><br><span class="line">   i++;</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">for</span> (j=<span class="number">100</span>;j&lt;=<span class="number">999</span>;j++)&#123;<span class="comment">//五位    d[i]=j*100+j/10%10*10+j/100;</span></span><br><span class="line">   i++;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">   sum=i<span class="number">-1</span>; </span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   b=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">     <span class="keyword">if</span>(n==d[i])</span><br><span class="line">       &#123; b=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">   <span class="keyword">if</span>(b==<span class="number">1</span>) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO!&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-神奇宝贝"><a href="#2-神奇宝贝" class="headerlink" title="2.神奇宝贝"></a>2.神奇宝贝</h3><h4 id="题意简化（我也不会）："><a href="#题意简化（我也不会）：" class="headerlink" title="题意简化（我也不会）："></a>题意简化（我也不会）：</h4><p>L一共有$N$种神奇宝贝，对于第$Pi$种神奇宝贝,第i个神奇宝贝L必须提供$Ki$</p><p> 个他喜欢的糖果才能让它进化一次，每个神奇宝贝进化成功后，会返回22个</p><p> 糖果，神奇宝贝只能接受自己喜欢的糖果。现在L已经知道了每个糖果进化</p><p> 一次需要的糖果数量，并且为每个宝贝准备了一定数量他们喜欢的糖果，现</p><p> 在L想知道，所有的宝贝的进化次数之和，同时也想知道哪个神奇宝贝的进</p><p> 化次数最多，如果有一样的进化次数，输出编号小的。</p><p>1&lt;=$N$&lt;=70 ，12&lt;=$Ki$&lt;=400 ， 1&lt;=$Mi$&lt;=10000</p><p>Pi的长度不超过20</p><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>小学数学青蛙爬井问题（？）</p><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s,name;</span><br><span class="line"><span class="type">int</span> n,k,m,t,sum=<span class="number">0</span>,maxn=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;k,&amp;m);</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m&gt;=k)&#123;</span><br><span class="line">m-=k;</span><br><span class="line">t++;</span><br><span class="line">m+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum+=t;</span><br><span class="line"><span class="keyword">if</span>(t&gt;maxn)&#123;</span><br><span class="line">maxn=t;</span><br><span class="line">name=s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;name&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-冲泡咖啡"><a href="#3-冲泡咖啡" class="headerlink" title="3.冲泡咖啡"></a>3.冲泡咖啡</h3><h4 id="题意简化：-1"><a href="#题意简化：-1" class="headerlink" title="题意简化："></a>题意简化：</h4><p>有$B$个物品，每个物品都有一个体积$Bi$，输出能组合出最大的不超过$C$的数</p><p>10 &lt;=$C$&lt;=35,000  ， 1 &lt;=$B$&lt;= 21 ， 1&lt;=$Bi$&lt;=35000</p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>01背包模板题，其实就是<a href="https://www.luogu.com.cn/problem/P1049">luogu P1049 [NOIP2001 普及组] 装箱问题</a></p><p>因为 $B$&lt;=21, 所以还有一个质朴思路：$DFS$</p><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> v,n,w[<span class="number">25</span>],c[<span class="number">25</span>],f[<span class="number">35010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;v,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">c[i]=w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=v;j&gt;=w[i];j--)&#123;</span><br><span class="line">f[j]=<span class="built_in">max</span>(f[j],f[j-w[i]]+c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[v]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-紧急撤离"><a href="#4-紧急撤离" class="headerlink" title="4.紧急撤离"></a>4.紧急撤离</h3><h4 id="题意简化：-2"><a href="#题意简化：-2" class="headerlink" title="题意简化："></a>题意简化：</h4><p>一个$n * m$的矩阵， 其中有p个火源，从 （$x1$，$y1$）走到（$x2$，$y2$），只能</p><p>向上下左右走，的过程中，要求离火源的曼哈顿距离的最小值最大，求出这</p><p>个最大值以及在这个最大值的限制下的最短距离。 </p><p>1 ≤$q$≤ 10000 , 1 ≤ $n,m$≤ 1000 , 0 ≤ $x1,y1,x2,y2$&lt; $n,m$</p><h4 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h4><p>很容易可以想到这是道bfs的题。</p><p>每个点的距火源的最小距离可以通过$BFS$求出</p><p>然后考虑求路程。如果直接一次$BFS$或$BFS$搜索坑定会$TLE$。因为是最小化一个最大值很容易想到用二分，$check$函数用$BFS$,用来求此最大值下的最短路径，问题不大。</p><p>思路还是很好想的，只是有些搜索的小细节要注意一下。</p><h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,dist;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line"><span class="type">int</span> qu,n,m,sx,sy,fx,fy,firex,firey,mp[<span class="number">1005</span>][<span class="number">1005</span>],ans1,ans2;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> u[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> v[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> dist)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">queue&lt;point&gt; a;</span><br><span class="line">a.<span class="built_in">push</span>((point)&#123;sx,sy,<span class="number">0</span>&#125;);</span><br><span class="line">vis[sx][sy]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!a.<span class="built_in">empty</span>())&#123;</span><br><span class="line">point t=a.<span class="built_in">front</span>();</span><br><span class="line">a.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(t.x==fx&amp;&amp;t.y==fy)&#123;</span><br><span class="line"><span class="keyword">return</span> t.dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> xx=t.x+u[i],yy=t.y+v[i];</span><br><span class="line"><span class="keyword">if</span>(xx&gt;=<span class="number">1</span>&amp;&amp;xx&lt;=n&amp;&amp;yy&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=m&amp;&amp;mp[xx][yy]&gt;=dist&amp;&amp;!vis[xx][yy])&#123;</span><br><span class="line">a.<span class="built_in">push</span>((point)&#123;xx,yy,t.dist+<span class="number">1</span>&#125;);</span><br><span class="line">vis[xx][yy]=<span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;qu,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) mp[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;sx,&amp;sy,&amp;fx,&amp;fy);</span><br><span class="line">sx++;sy++;fx++;fy++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=qu;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;firex,&amp;firey);</span><br><span class="line">firex++;firey++;</span><br><span class="line">q.<span class="built_in">push</span>((point)&#123;firex,firey,<span class="number">0</span>&#125;);</span><br><span class="line">mp[firex][firey]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">point t=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> xx=t.x+u[i],yy=t.y+v[i];</span><br><span class="line"><span class="keyword">if</span>(xx&gt;=<span class="number">1</span>&amp;&amp;xx&lt;=n&amp;&amp;yy&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=m&amp;&amp;mp[xx][yy]==<span class="number">-1</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>((point)&#123;xx,yy,t.dist+<span class="number">1</span>&#125;);</span><br><span class="line">mp[xx][yy]=t.dist+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=mp[sx][sy];</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">bfs</span>(mid);</span><br><span class="line"><span class="keyword">if</span>(t!=<span class="number">-1</span>)&#123;</span><br><span class="line">ans1=mid;</span><br><span class="line">ans2=t;</span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans1,ans2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-边权最小值"><a href="#5-边权最小值" class="headerlink" title="5.边权最小值"></a>5.边权最小值</h3><h4 id="题目简化（已经很简化了）："><a href="#题目简化（已经很简化了）：" class="headerlink" title="题目简化（已经很简化了）："></a>题目简化（已经很简化了）：</h4><p>给定一颗$N$个节点的树，定义两点距离为他们之间路径中边权最小值。</p><p>$Q$次询问$K,V$，询问到$V$距离&gt;=$K$的点有多少（不含V）</p><p>对于30%的数据，1≤$N,Q$≤1000 , 1≤$N,Q$≤1000。</p><p>对于70%的数据，1≤$N$≤2000 , $Q$≤10^5 , 1≤$N$≤2000 , $Q$≤10^5。</p><p>对于100%的数据，1≤$N,Q$≤10^5 , 1≤$w,K$≤10^9 , 1≤$N,Q$≤10^5 , 1≤$w,K$≤10^9。</p><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p><del>有部分分了好耶！</del></p><h4 id="30-pts-："><a href="#30-pts-：" class="headerlink" title="30$pts$："></a>30$pts$：</h4><p>可以考虑floyd求任意两点间的距离。</p><h4 id="70-pts-："><a href="#70-pts-：" class="headerlink" title="70$pts$："></a>70$pts$：</h4><p>对于每一次询问，可以通过dfs搜索，加点优化，问题不大。</p><h4 id="100-pts-："><a href="#100-pts-：" class="headerlink" title="100$pts$："></a>100$pts$：</h4><p>离线+并查集</p><p>将每次询问保存进行离线查询。将边和k值进行降序排列。可以到达的边放在一个集合。</p><p>因为具有单调性，所以在$k$值减小的过程中只需要不断合并就可以了</p><h4 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> u,v,w,k,n,q,cnt=<span class="number">0</span>,h[maxn],fa[maxn],sz[maxn],ans[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpe</span><span class="params">(edge a,edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span>&#123;</span><br><span class="line"><span class="type">int</span> id,k,v;</span><br><span class="line">&#125;qst[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpq</span><span class="params">(que a,que b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.k&gt;b.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=fa[x]) fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x!=y) fa[x]=y;sz[y]+=sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="comment">//add(v,u,w);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;qst[i].k,&amp;qst[i].v);</span><br><span class="line">qst[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(e+<span class="number">1</span>,e+n,cmpe);</span><br><span class="line"><span class="built_in">sort</span>(qst+<span class="number">1</span>,qst+<span class="number">1</span>+q,cmpq);</span><br><span class="line"><span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(num&lt;n&amp;&amp;qst[i].k&lt;=e[num].w)&#123;</span><br><span class="line"><span class="built_in">merge</span>(e[num].u,e[num].v);</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">ans[qst[i].id]=sz[<span class="built_in">find</span>(qst[i].v)]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-军队调遣"><a href="#6-军队调遣" class="headerlink" title="6.军队调遣"></a>6.军队调遣</h3><h4 id="题目简化："><a href="#题目简化：" class="headerlink" title="题目简化："></a>题目简化：</h4><p>一有向图，$ai,bi$ 间有条权值为$ti$的有向边。对于一条边$(u,v)$，如果$v$可以到达$u$, 那么经过这条边是就会产生一个单位的疲劳值。求每个点（除1）到点1的最小疲劳值和对应的最短路，如果不能到达，则输出$-1$。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这是个有向图。所以只有存在环的时候才会产生疲劳值。所以先用$Tarjan$求出图中所有的环，然后再跑一边$Dijtstra$。</p><p>$Tarjan$就是普通的有向图模板。因为每条边有两个权值，所以要对$Dijstra$进行改进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> v=e[i].v,cost=(scc[u]==scc[v])?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(len[v]&gt;len[u]+cost)&#123;</span><br><span class="line">len[v]=len[u]+cost;</span><br><span class="line">dis[v]=dis[u]+e[i].w;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;v,dis[v],len[v]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$len$表示疲劳值，$dis$指所对应的权值和。以疲劳值为第一关键字进行松弛操作。</p><p>特别的，当疲劳值相同的时候我们还要可能更新$dis$数组。<br>所以要特别加一句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(len[v]==len[u]+cost)&#123;</span><br><span class="line">dis[v]=<span class="built_in">min</span>(dis[v],dis[u]+e[i].w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题的思维难度不大，只是码量稍微有点大。</p><p>还有一点需要注意：因为是$1$点是重点，又是有向图，所以建图的时候要反向建图。改代码的时候吃了个大亏。</p><h4 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">ll u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll n,m,u,v,w,cnt=<span class="number">0</span>,h[maxn],dis[maxn],len[maxn];</span><br><span class="line">ll tcnt=<span class="number">0</span>,low[maxn],dfn[maxn],col=<span class="number">0</span>,scc[maxn],vis[maxn];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,w,h[u]&#125;;</span><br><span class="line">h[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">low[u]=dfn[u]=++tcnt;</span><br><span class="line">vis[u]=<span class="number">1</span>;stk.<span class="built_in">push</span>(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line"><span class="type">int</span> t;++col;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">t=stk.<span class="built_in">top</span>();</span><br><span class="line">stk.<span class="built_in">pop</span>();</span><br><span class="line">scc[t]=col;</span><br><span class="line">vis[t]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(t!=u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">ll v,d,t;<span class="comment">//distance&amp;tired</span></span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.t==b.t) <span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line"><span class="keyword">return</span> a.t&gt;b.t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijstra</span><span class="params">(<span class="type">int</span> be)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=len[i]=inf;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;be,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">dis[be]=len[be]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">top</span>().v;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> v=e[i].v,cost=(scc[u]==scc[v])?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(len[v]&gt;len[u]+cost)&#123;</span><br><span class="line">len[v]=len[u]+cost;</span><br><span class="line">dis[v]=dis[u]+e[i].w;</span><br><span class="line">q.<span class="built_in">push</span>((node)&#123;v,dis[v],len[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len[v]==len[u]+cost)&#123;</span><br><span class="line">dis[v]=<span class="built_in">min</span>(dis[v],dis[u]+e[i].w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line"><span class="built_in">dijstra</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(len[i]==inf)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,len[i],dis[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4977 跳伞求生</title>
      <link href="/2023/02/10/bzoj4977/"/>
      <url>/2023/02/10/bzoj4977/</url>
      
        <content type="html"><![CDATA[<h3 id="D2T2-跳伞求生"><a href="#D2T2-跳伞求生" class="headerlink" title="D2T2 跳伞求生"></a>D2T2 跳伞求生</h3><p><a href="http://192.168.101.115/p/1725?tid=63df53a1913b4d038e91609d">传送门</a></p><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>小Q最近沉迷于《跳伞求生》游戏。他组建了一支由 $n$ 名玩家（包括他自己）组成的战队，编号依次为$1,2,\dots,n$ 。这个游 戏中，每局游戏开始时，所有玩家都会从飞机上跳伞，选择一个目的地降落，跳伞和降落的时间有早有晚。在某局 游戏降落前，他们在空中观察发现地面上一共有 $m$ 间房子，编号依次为 $1$ 到 $m$ 。其中每间房子恰好有一名敌人早于他 们到达。小Q战队的第 $i$ 名玩家拥有 $a_i$发子弹，地面上第i间房子里的敌人拥有 $b_i$ 发子弹，消灭他可以获得 $c_i$ 点积 分。每名玩家必须且只能选择一间房子降落，然后去消灭里面的敌人。若第i名玩家选择了第j间房子，如果 $a_i&gt;b_ j$ ，那么他就可以消灭该敌人，获得 $a_i-b_j+c_j$ 的团队奖励积分，否则他会被敌人消灭。为了防止团灭，小Q不允 许多名玩家选择同一间房子，因此如果某位玩家毫无利用价值，你可以选择让他退出游戏。因为房子之间的距离过长，你可以认为每名玩家在降落之后不能再去消灭其它房间里的敌人。作为小Q战队的指挥，请制定一套最优的降 落方案，使得最后获得的团队奖励总积分最大 </p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>对于人的贡献为 $a_i$ ，房子的贡献为 $c_j-b_j$ 。 将 $c_j-b_j$ 从大到小排序。对于贡献大的房子，也要用 $a_i$ 大的取消除。用一个 $multiset$ 维护 $a$ ，如果有能消灭敌人的人，并更新答案。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">room</span>&#123;</span><br><span class="line"><span class="type">int</span> b,c,val;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="type">int</span> n,m,a[maxn];</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(room a,room b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in,s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">p[i].b=in;p[i].c=in;</span><br><span class="line">p[i].val=p[i].c-p[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp1);</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+m,cmp2);</span><br><span class="line">ll ans=<span class="number">0</span>,tot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator it=s.<span class="built_in">lower_bound</span>(p[i].b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(it!=s.<span class="built_in">end</span>())&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,tot+=a[++cnt]+p[i].val);</span><br><span class="line">s.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>诶难道不是线段树专题吗？<del>因为这道题还可以用线段树模拟费用流来做</del></strong></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3333 排队计划</title>
      <link href="/2023/02/10/bzoj3333/"/>
      <url>/2023/02/10/bzoj3333/</url>
      
        <content type="html"><![CDATA[<h3 id="D1T2-排队计划"><a href="#D1T2-排队计划" class="headerlink" title="D1T2 排队计划"></a>D1T2 排队计划</h3><h4 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h4><p>对于一个序列 $h$，有 $m$ 次操作，每次操作 $j$ ，将 $p_j\le i\le n$中，小于等于第 $h_j$ 的元素取出并重排后插入。求每次操作后的逆序对的数量。</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p><del>一开始以为是个三维偏序</del></p><p>首先考虑暴力解法。对于每次询问重新求逆序对即可，预计时间复杂度为 $O(mnlogn)$ ，而且常数巨大。</p><p>然后考虑优化。可以观察到这次询问的答案可以从上一次的答案更新。易得对于每个取出的数 $h_i$ ，减少的逆序对的数量就是 $h_i$ 后比它小的数的个数。因为每次操作后序列都趋向有序，所以逆序对的数量会减少，单点暴力修改的时间复杂度是有保证的。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,h[maxn],hsh[maxn],tot=<span class="number">0</span>,x;</span><br><span class="line">ll val[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> pos,val;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">ll t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=tot)&#123;</span><br><span class="line">t[x]+=val;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;bit;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(a.val==b.val) return a.pos&lt;b.pos;</span></span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,pos;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hsh[t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].pos]&lt;=hsh[t[p&lt;&lt;<span class="number">1</span>].pos]) t[p].pos=t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].pos;</span><br><span class="line">    <span class="keyword">else</span> t[p].pos=t[p&lt;&lt;<span class="number">1</span>].pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].pos=l;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">hsh[l]=inf;</span><br><span class="line">val[l]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t&lt;=mid) <span class="built_in">update</span>(l,mid,p&lt;&lt;<span class="number">1</span>,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t);</span><br><span class="line"><span class="built_in">pushup</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hsh[y]&lt;=hsh[x]) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].pos;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!ans) ans=t; </span><br><span class="line"><span class="keyword">else</span> ans=<span class="built_in">pd</span>(ans,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=in;m=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].pos=i;a[i].val=in;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].val!=a[i<span class="number">-1</span>].val) hsh[a[i].pos]=++tot;</span><br><span class="line"><span class="keyword">else</span> hsh[a[i].pos]=tot;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">bit.<span class="built_in">update</span>(hsh[i],<span class="number">1</span>);</span><br><span class="line">val[i]=bit.<span class="built_in">query</span>(hsh[i]<span class="number">-1</span>);</span><br><span class="line">ans+=val[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x=in;</span><br><span class="line"><span class="keyword">while</span>(hsh[x]!=inf)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">query</span>(x,n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;#debug &quot;&lt;&lt;t&lt;&lt;endl;</span></span><br><span class="line">ans-=val[t];</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>,t);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.25 CSP-J模拟</title>
      <link href="/2023/01/11/10.22_practice/"/>
      <url>/2023/01/11/10.22_practice/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>难度不算特别大，但是<del>我是傻逼</del></p><p>T1 一眼贪心</p><p>T2 无脑暴力</p><p>T3 毫无头绪</p><p>T4 写不出来</p><p><del>（没有押好韵）</del></p><h2 id="T1-地鼠游戏"><a href="#T1-地鼠游戏" class="headerlink" title="T1 地鼠游戏"></a>T1 地鼠游戏</h2><p><strong>题意：</strong> 有 $n$ 个物品 $a_i$,在 $t_i$ 秒之内选中 $a_i$ 个物品会获得 $v_i$ 的权值，求最大权值。</p><p>一眼贪心，跟那道 <a href="https://www.luogu.com.cn/problem/P1230">智力大冲浪</a> 完全是一回事。把每个物品以 $v_i$ 为关键字排一遍顺序，然后枚举每一个 $a_i$ 找到一个时间点放进去，然后累加就完了。</p><p><del>然后我就写错了</del>，特此贴出来警示自己。<del>还没开 freopen(寄</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ele</span>&#123;</span><br><span class="line"><span class="type">int</span> t,v;</span><br><span class="line"><span class="type">double</span> p;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(ele a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.t==b.t) <span class="keyword">return</span> a.v&gt;b.v;</span><br><span class="line"><span class="keyword">return</span> a.t&lt;b.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,Time[<span class="number">5005</span>],ans=<span class="number">0</span>,cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;game.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;game.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].v);</span><br><span class="line">a[i].p=a[i].v*<span class="number">1.0</span>/a[i].t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].t&lt;cnt) <span class="keyword">continue</span>;</span><br><span class="line">Time[cnt]=i;</span><br><span class="line">ans+=a[i].v; </span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>鬼知道我这个贪心怎么写的</p><h3 id="code"><a href="#code" class="headerlink" title="code:"></a><strong>code:</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ele</span>&#123;</span><br><span class="line"><span class="type">int</span> t,v;</span><br><span class="line"><span class="type">double</span> p;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(ele a,ele b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.v&gt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,Time[<span class="number">5005</span>],ans=<span class="number">0</span>,cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;game.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;game.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].v),ans+=a[i].v;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">bool</span> flg=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!Time[a[i].t])&#123;</span><br><span class="line">Time[a[i].t]=<span class="number">1</span>;</span><br><span class="line">flg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=a[i].t;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(Time[j]==<span class="number">0</span>)&#123;</span><br><span class="line">flg=<span class="literal">true</span>;</span><br><span class="line">Time[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(flg==<span class="literal">false</span>) ans-=a[i].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考完之后就文思泉涌两分钟就写出来了</p><h2 id="T2-数字加密"><a href="#T2-数字加密" class="headerlink" title="T2 数字加密"></a>T2 数字加密</h2><p><strong>题意：</strong> 输入一个 $n$ ,找出所有使得 $x^{2}$ 后九位等于 $n$ 的 $x$ ，且 $x,n&lt;1e^9$ ， $x$ 的个数不超过4000</p><p>一看 $1e^9$ 就知道挨个枚举没戏，又去推了10分钟发现没什么好方法。作罢，只有打暴力，然后考虑剪个枝。</p><h3 id="solution-1："><a href="#solution-1：" class="headerlink" title="solution 1："></a>solution 1：</h3><p>我在考场上写的解法，用了一点 $meet$ $in$ $middle$ 的想法，先考虑枚举前五位，将满足条件的记录下来，再拼凑后面四位 。</p><h4 id="code-1"><a href="#code-1" class="headerlink" title="code:"></a>code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> mul[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>&#125;,tmp=<span class="number">0</span>,cnt=<span class="number">0</span>,t[<span class="number">4005</span>];</span><br><span class="line"><span class="type">char</span> n[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">n[i]=x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">1</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,n[i]);</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;num.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;num.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">tmp=(tmp&lt;&lt;<span class="number">1</span>)+(tmp&lt;&lt;<span class="number">3</span>)+n[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//if(n[1]==&#x27;0&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//int ans=sqrt(tmp);</span></span><br><span class="line"><span class="comment">//if(ans*ans==tmp) cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">99999</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mul[i%<span class="number">10</span>]!=tmp%<span class="number">10</span>) <span class="keyword">continue</span>;</span><br><span class="line">ll ans=(ll)i*i%<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">if</span>(ans==tmp%<span class="number">100000</span>) t[++cnt]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9999</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> k=i,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">x=k*<span class="number">100000</span>+t[j];</span><br><span class="line">ll ans=(ll)x*x%<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">if</span>(ans==tmp) <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>看到中间注释掉的那个特判了吗？</p><p>加了特判：100-&gt;70 (悲</p><h3 id="solution-2："><a href="#solution-2：" class="headerlink" title="solution 2："></a>solution 2：</h3><p>利用 $DFS$ 暴力搜索枚举每一位数字，然后写一个小剪枝：搜到第k位时，保证前k位的平方取前 $k$ 位和目标的前 $k$ 位相同即可。</p><h4 id="code-2"><a href="#code-2" class="headerlink" title="code:"></a>code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> read(x) scanf(<span class="string">&quot;%d&quot;</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> ans[<span class="number">4010</span>],tot=<span class="number">0</span>,key;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="comment">//now当前大小，k系数 </span></span><br><span class="line"><span class="keyword">if</span>((ll)now*now % k != (ll)key % k ) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> == p) &#123;</span><br><span class="line">ans[++tot] = now;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="comment">//枚举高位 </span></span><br><span class="line"><span class="built_in">dfs</span>(k*i + now ,k*<span class="number">10</span> ,p+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">int2str</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">string ret=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++,s=s/<span class="number">10</span>)</span><br><span class="line">ret= (<span class="type">char</span>)(s%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>)+ret;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(key);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(ans+<span class="number">1</span>,ans+tot+<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">cout&lt;&lt; <span class="built_in">int2str</span>(ans[i])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution 3:"></a>solution 3:</h3><p>听说还有种很玄学的做法</p><p>通过完全平方公式可以知道 $n$ 和 $1e^9-n$ 的最后几位事相同的，所以只需要枚举一半就可以了。</p><h4 id="code："><a href="#code：" class="headerlink" title="code："></a>code：</h4><p><del>不写了</del></p><p><del>因为过于玄学和暴力，所以说明测试数据太水了。</del></p><h2 id="T3-回文子串"><a href="#T3-回文子串" class="headerlink" title="T3 回文子串"></a>T3 回文子串</h2><p><strong>题意：</strong> 给出 $k$ 条变换规则，其中 $x-&gt;y$ 且 $y-&gt;x$，求一个长度为 $n$ ，每个元素不超过 $m$ 的序列最长非连续回文子串的长度。</p><p><strong>注意：$x-&gt;y$ 且 $y-&gt;x$</strong>，<del>然后考场上就妹啥思路了</del></p><p>几个数可以看作一个联通块，然后用一个区间$dp$就完事了。状态转移方程：</p><script type="math/tex; mode=display">f_{i,j}=\begin{cases}f_{i+1,j-1}+2,\quad a_i=a_j\\max{f_{i+1,j},f_{i,j-1}}, \quad a_i!=a_j\end{cases}</script><h3 id="code-3"><a href="#code-3" class="headerlink" title="code:"></a>code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,k,n,x,y,a[<span class="number">1005</span>],fa[<span class="number">100005</span>],f[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]!=x) fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(f[l][r]!=<span class="number">-1</span>) <span class="keyword">return</span> f[l][r];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(a[l])==<span class="built_in">find</span>(a[r])) f[l][r]=<span class="built_in">max</span>(f[l][r],<span class="built_in">dfs</span>(l+<span class="number">1</span>,r<span class="number">-1</span>)+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> f[l][r]=<span class="built_in">max</span>(<span class="built_in">dfs</span>(l,r<span class="number">-1</span>),<span class="built_in">dfs</span>(l+<span class="number">1</span>,r));</span><br><span class="line"><span class="keyword">return</span> f[l][r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;string.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;string.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;k,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="type">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx!=fy) fa[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">cout&lt;&lt;<span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="T4-黑白图"><a href="#T4-黑白图" class="headerlink" title="T4 黑白图"></a>T4 黑白图</h2><p>一个 $n$ 个点 $m$ 条边构成的无向带权图。由一些黑点与白点构成。现在每个白点都要与他距离最近的黑点通过最短路连接，求这个最小代价。</p><p>很明显可以建立一个超级源点连接所有黑点，然后跑一遍最短路就可以求出到每个白点的最短路径。然后重建图跑一遍最小生成树，然后100-&gt;70。</p><p>正解应该是记录下每一个点的前驱边，将所有前驱边加在一起。</p><p>不知道为什么系统一直说我代码 $RE$ ，就先不贴代码了。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.22 CSP-J模拟</title>
      <link href="/2023/01/11/10.25_practice/"/>
      <url>/2023/01/11/10.25_practice/</url>
      
        <content type="html"><![CDATA[<h2 id="“这是一场难度约为-CSP-J-的模拟赛”"><a href="#“这是一场难度约为-CSP-J-的模拟赛”" class="headerlink" title="“这是一场难度约为 $CSP-J$ 的模拟赛”"></a>“这是一场难度约为 $CSP-J$ 的模拟赛”</h2><p>正确的，一针见血的。这么说我都不晓得当年怎么拿的2=（悲</p><p>T1 考场上想到了前缀和这么个鬼东西，也在考虑是不是该旋转矩阵，<del>然后发现自己完全转不来</del>，只能随手敲个 $O(n^2k)$ 的暴力前缀和，然后 $n \leq 400$ 的数据硬是越界了8个点。高低也算个黄题吧。</p><p>T2 只记得以前做过一道类似的，但是看到超级大的 $k$ 是在想不吃什么不超时的揭解法了，随手敲了个优先队列交上去准备骗点分。黄题水准罢。</p><p>T3 一眼线段树模板题，<del>然后我用字符串操作写了30行的代码直接跑路</del>，要不是那个数据太坑说不准还能骗点分。可能有个绿题。</p><p>T4 是真的没头绪，大概猜出来是个 $dp$ 但是完全不知道方程怎么推，然后完全没动（悲。绿到蓝吧。</p><h2 id="T1-sum"><a href="#T1-sum" class="headerlink" title="T1 sum"></a>T1 sum</h2><p><strong>题意：</strong> 给定一个 $n * m$ 的矩阵，可以随意选一个点向上下左右走 $k$ 步，求取得的和的最大值。</p><p><strong>solution：</strong><br>把矩阵旋转45度后利用前缀和求解。<br>这个旋转的方法确实有点骚。</p><p><strong>code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,mp[<span class="number">1005</span>][<span class="number">1005</span>],pre[<span class="number">1005</span>][<span class="number">1005</span>],ans=<span class="number">-0x7fffffff</span>,m,x,y,xr,xl,yr,yl;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sum.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sum.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m=n*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) pre[i+j<span class="number">-1</span>][n-i+j]=mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) pre[i][j]=pre[i][j]+pre[i][j<span class="number">-1</span>]+pre[i<span class="number">-1</span>][j]-pre[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">x=i+j<span class="number">-1</span>,y=n-i+j;</span><br><span class="line"><span class="comment">//xr=x+k;yr=y+k;yl=y-k;xl=x-k;</span></span><br><span class="line">xr=<span class="built_in">min</span>(m,x+k);</span><br><span class="line">yr=<span class="built_in">min</span>(m,y+k);</span><br><span class="line">xl=<span class="built_in">max</span>(<span class="number">1</span>,x-k);</span><br><span class="line">yl=<span class="built_in">max</span>(<span class="number">1</span>,y-k);</span><br><span class="line"><span class="type">int</span> cnt=pre[xr][yr]-pre[xr][yl<span class="number">-1</span>]-pre[xl<span class="number">-1</span>][yr]+pre[xl<span class="number">-1</span>][yl<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//if(cnt&gt;ans) cout&lt;&lt;xr&lt;&lt;&quot; &quot;&lt;&lt;yr&lt;&lt;&quot; &quot;&lt;&lt;xl&lt;&lt;&quot; &quot;&lt;&lt;yl&lt;&lt;endl;</span></span><br><span class="line">ans=ans&gt;cnt?ans:cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>一个小设想：能不能不旋转直接前缀和求值？理论复杂度是 $O(n^2k)$ 确实只有 $WA$没有 $TLE$ 。</p><p>（30pts）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,mp[<span class="number">1005</span>][<span class="number">1005</span>],pre[<span class="number">1005</span>][<span class="number">1005</span>],ans=<span class="number">-0x7fffffff</span>,a,b,l,r,x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sum.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;sum.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mp[i][j]);</span><br><span class="line">pre[i][j]=mp[i][j]+pre[i<span class="number">-1</span>][j]+pre[i][j<span class="number">-1</span>]-pre[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a=i;b=<span class="built_in">min</span>(j+k,n);l=<span class="number">0</span>;r=<span class="number">2</span>*k;x=<span class="built_in">max</span>(<span class="number">0</span>,a-l<span class="number">-1</span>);y=<span class="built_in">max</span>(<span class="number">0</span>,b-r<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line"><span class="type">int</span> cnt=pre[a][b]-pre[x][b]-pre[a][y]+pre[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">1</span>;p&lt;=k;p++)&#123;</span><br><span class="line">a=<span class="built_in">min</span>(i+p,n);b=<span class="built_in">min</span>(j+k-p,n);l=<span class="number">0</span>;r=<span class="number">2</span>*k<span class="number">-2</span>*p;x=<span class="built_in">max</span>(<span class="number">0</span>,a-l<span class="number">-1</span>);y=<span class="built_in">max</span>(<span class="number">0</span>,b-r<span class="number">-1</span>);</span><br><span class="line">cnt+=pre[a][b]-pre[x][b]-pre[a][y]+pre[x][y];</span><br><span class="line"><span class="comment">//cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">a=<span class="built_in">max</span>(<span class="number">0</span>,i-p);b=<span class="built_in">min</span>(j+k-p,n);l=<span class="number">0</span>;r=<span class="number">2</span>*k<span class="number">-2</span>*p;x=<span class="built_in">max</span>(<span class="number">0</span>,a-l<span class="number">-1</span>);y=<span class="built_in">max</span>(<span class="number">0</span>,b-r<span class="number">-1</span>);</span><br><span class="line">cnt+=pre[a][b]-pre[x][b]-pre[a][y]+pre[x][y];</span><br><span class="line"><span class="comment">//cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">ans=cnt&gt;ans?cnt:ans;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="comment">//fclose(stdin);</span></span><br><span class="line"><span class="comment">//fclose(stdout);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="T2-number"><a href="#T2-number" class="headerlink" title="T2 number"></a>T2 number</h2><p><strong>题意：</strong> 一个 $n$ 个元素的序列 $A$ 以及 $m$ 个元素的序列 $B$ ，求 第k小的 $a_i * b_j$。</p><p><strong>solution：</strong> </p><p>50pts（考场code）：因为肯定满足 $a_i <em> b_j &lt;a_{i+1} </em> b_j$ 所以先将所有 $a_1 <em> b_j$ $push$ 进优先队列，然后依次取出堆顶元素，压入 $a_{i+1} </em> b_j$<br>，一直循环 $k$ 次即可。</p><p>100pts： 同样事由于具有单调性，所以可以二分答案，$check$ 利用单调性枚举即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,k,a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span>&#123;</span><br><span class="line">ll t=<span class="number">0</span>;</span><br><span class="line">ll j=m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">1</span>&amp;&amp;a[i]*b[j]&gt;=mid) j--;</span><br><span class="line">t+=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;number.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;number.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">n=in;m=in;k=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=in;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+m);</span><br><span class="line">ll l=<span class="number">0</span>,r=a[n]*b[m]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line">ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="T3-bigint"><a href="#T3-bigint" class="headerlink" title="T3 bigint"></a>T3 bigint</h2><p><strong>题意：</strong> 一个长度为 $n$ 的长整数，区间修改，区间赋值。</p><p><strong>solution：</strong> 一眼线段树模板。只不过因为区间维护的是个整数的一段，所以需要一些小小的预处理。还有很多细节。不明白对拍出来没有问题但是 OJ 上任然是 $WA$ 。 </p><p>如果你直接利用字符串的操作，也可以骗到 $50pts$ ,代码量是线段树的三分之一，何乐而不为呢？考场上10分钟打完就直接跑路，然后发现输入的 $l$ 和 $r$ 有亿点点坑。</p><h3 id="“我们从大整数的最低位（最右边）开始标号”"><a href="#“我们从大整数的最低位（最右边）开始标号”" class="headerlink" title="“我们从大整数的最低位（最右边）开始标号”"></a>“我们从大整数的最低位（最右边）开始标号”</h3><p>不要问我怎么被坑了，<del>问就是样例太有迷惑性了。</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll opt,l,r,n,m,L,R,a[maxn],ten[maxn],kkk[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">ll l,r,len,mul,tag;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;t[p].len=t[p].r-t[p].l+<span class="number">1</span>;t[p].tag=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[p].mul=a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[p].mul=(t[p&lt;&lt;<span class="number">1</span>].mul*ten[t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len]%mod+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].tag!=<span class="number">-1</span>)&#123;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].mul=kkk[t[p&lt;&lt;<span class="number">1</span>].len]*t[p].tag%mod;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul=kkk[t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len]*t[p].tag%mod;</span><br><span class="line">t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=t[p].tag;</span><br><span class="line">t[p].tag=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(ll p,ll l,ll r,ll v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r)&#123;</span><br><span class="line">t[p].mul=kkk[t[p].len]*v%mod;</span><br><span class="line">t[p].tag=v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line">ll mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,r,v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,v);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,v);</span><br><span class="line"><span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,v);</span><br><span class="line">&#125;</span><br><span class="line">t[p].mul=(t[p&lt;&lt;<span class="number">1</span>].mul*ten[t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len]%mod+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r) <span class="keyword">return</span> t[p].mul%mod;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line">ll mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> ans1=<span class="built_in">query</span>(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> ans2=<span class="built_in">query</span>(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> (ans1*ten[<span class="built_in">min</span>(t[p].r,r)-mid]%mod+ans2)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;bigint.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;bigint.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">n=in;m=in;</span><br><span class="line">ten[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">kkk[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ten[i]=ten[i<span class="number">-1</span>]*<span class="number">10</span>%mod;</span><br><span class="line">kkk[i]=kkk[i<span class="number">-1</span>]*<span class="number">10</span>%mod+<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">a[i]=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">opt=in;L=in;R=in;</span><br><span class="line">l=n-R;r=n-L;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(l,r,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">ll v=in;</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>,l,r,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(stdin);</span><br><span class="line"><span class="built_in">fclose</span>(stdout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>96行，这么看起来还是字符串来的划算</p><p>字符串的算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">string s;</span><br><span class="line">ll opt,l,r,n,m,L,R;</span><br><span class="line"><span class="type">char</span> v;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;bigint.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;bigint.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;opt,&amp;L,&amp;R);</span><br><span class="line">l=n-R<span class="number">-1</span>;r=n-L<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">res=res*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">res%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="type">int</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ch);</span><br><span class="line">v=ch+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) s[i]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fclose</span>(stdin);</span><br><span class="line"><span class="built_in">fclose</span>(stdout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="T4-array"><a href="#T4-array" class="headerlink" title="T4 array"></a>T4 array</h2><p><strong>题意：</strong> 有一个数组 $A$ ,可以随意修改 $k$ 个值，最小化 $T(A)=max_{i-2}^n|A_i-A_{i-1}|$ 的值。</p><p><strong>solution：</strong> <del>看到题我还以为是差分</del>。玄学 $dp$ （确信 。首先考虑最大化最小值，毫无疑问用二分（机房$dalao$原话），然后考虑用 $dp$ 来做 $check$ ,很明显的一点，对于两点 $i,j$ ，如果不需要修改，那么他们的计算结果一定小于等于二分值 $mid*(j-i)$ ，所以我们从最坏情况开始向前枚举。那么最坏情况就是修改所有点，我们记录 $dp_i$ 表示前i个全部修改，后 $i+1~n$ 的点合法最小代价。然后从 $i+1$ 向后枚举，如果枚举到一个点满足段首所述性质，那么就修改两个点之间的所有点。最后看一下当前代价是否小于等于 $k$ 即可。这个 $dp$ 是真的毒瘤。</p><p>代码就将就理解吧，因为我当时候也没太听懂，现在又要去刷题了（逃<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in read()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line">ll n,k,a[<span class="number">2005</span>],dp[<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">dp[i]=n-i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(a[j]-a[i])&lt;=m*(j-i)) dp[i]=<span class="built_in">min</span>(dp[i],dp[j]+j-i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i]+i&lt;=k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;array.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;array.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">n=in;k=in;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=in;</span><br><span class="line">ll l=<span class="number">0</span>,r=<span class="number">2e9</span>,ans=r;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line"><span class="built_in">fclose</span>(stdin);</span><br><span class="line"><span class="built_in">fclose</span>(stdout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
